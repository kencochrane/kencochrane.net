<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deployment on KenCochrane.net</title>
    <link>http://www.kencochrane.net/tags/deployment/</link>
    <description>Recent content in Deployment on KenCochrane.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Mar 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.kencochrane.net/tags/deployment/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Deploying my Django application to dotCloud: Part 2</title>
      <link>http://www.kencochrane.net/blog/2012/03/deploying-a-django-application-on-dotcloud/</link>
      <pubDate>Fri, 23 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2012/03/deploying-a-django-application-on-dotcloud/</guid>
      <description>

&lt;p&gt;As I mentioned in a &lt;a href=&#34;http://kencochrane.net/blog/2012/03/im-now-working-for-dotcloud/&#34;&gt;recent blog
post&lt;/a&gt;,
in the 11 months since I wrote my &lt;a href=&#34;http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/&#34;&gt;first post on
dotCloud&lt;/a&gt;,
I now work there. Besides me working there, there has been a lot of
other changes at &lt;a href=&#34;http://www.dotcloud.com&#34;&gt;dotCloud&lt;/a&gt;, and I wanted to
take the time to update my original post so that it was up to date and
had all the recent information. I&amp;rsquo;m going to completely rewrite the old
blog post here, with updated information, and leave the old one around
for posterity.&lt;/p&gt;

&lt;p&gt;dotCloud&amp;rsquo;s goal is to provide a bunch of different independent services
that you can use as building blocks to build your application. If you
need a database, take your pick from one of the many they support. Need
an application that uses Django or Rails on the front end, and Java in
the backend, that is fine, you can do that too. They realize that most
developers don&amp;rsquo;t stick to one standard technology stack for all of their
applications, so this allows you the flexibility to use the best tool
for the job. It also gives you a nice playground to try out new services
and see how they run without having to install, configure and maintain
the service just for testing.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to go over the steps that it took to install my blog onto
dotCloud, and hopefully answer some common questions along the way.&lt;/p&gt;

&lt;h1 id=&#34;documentation:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Documentation&lt;/h1&gt;

&lt;p&gt;Before I get started with any new service the first thing I usually do
is look at the documentation. DotCloud has a nice list of documents
along with some tutorials on how to get started. These 4 documents were
the ones that I used the most.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.dotcloud.com/firststeps/platform-overview/&#34;&gt;http://docs.dotcloud.com/firststeps/platform-overview/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.dotcloud.com/tutorials/python/django/&#34;&gt;http://docs.dotcloud.com/tutorials/python/django/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.dotcloud.com/services/mysql/&#34;&gt;http://docs.dotcloud.com/services/mysql/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.dotcloud.com/services/mysql-masterslave/&#34;&gt;http://docs.dotcloud.com/services/mysql-masterslave/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;first-steps:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;First Steps:&lt;/h1&gt;

&lt;p&gt;Like all cool services these days, dotCloud uses a python based CLI, so
before we can get started we need to install the dotCloud client and
configure it so that we can start using it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# create my dotcloud virtual environment.
$ mkvirtualenv dotcloud

# install dotcloud client using pip
$ pip install dotcloud

# create our application called blog
$ dotcloud create blog

#enter api key that we got from: http://www.dotcloud.com/account/settings when prompted
#&amp;lt;key goes here&amp;gt;

# if you were not prompted to enter your key you can run this command, and it will let you enter your API key again.
$ dotcloud register
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have the client all setup, and an application created, now
we can start building our service. I have forked my blog repository on
github so that I could make dotCloud specific changes to it and not
effect my original repo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# go into projects directory
cd ~/projects

# forked kencochranenet to kencochranenet_dotcloud, now clone that. locally
git clone git://github.com/kencochrane/kencochranenet_dotcloud.git kencochranenet_dotcloud

# go into the new directory.
cd kencochrane_dotcloud
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reading through the documentation tells me that I need to create a
wsgi.py file and put in the root of my project. Using
&lt;a href=&#34;http://docs.dotcloud.com/tutorials/python/django/#wsgi-py&#34;&gt;http://docs.dotcloud.com/tutorials/python/django/#wsgi-py&lt;/a&gt; as a
template, I created my wsgi.py file below. I had issues with the default
template and I needed to add a directory to the sys.path so that wsgi
could find my django apps correctly. Here is my finished file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;import os
import sys

# Ken added this, only thing that is different from the example template (not counting settings file name)
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__),&#39;mysite&#39;)))
os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;] = &#39;mysite.settings&#39;

import django.core.handlers.wsgi
djangoapplication = django.core.handlers.wsgi.WSGIHandler()
def application(environ, start_response):
    if &#39;SCRIPT_NAME&#39; in environ:
        del environ[&#39;SCRIPT_NAME&#39;]
    return djangoapplication(environ, start_response)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DotCloud uses &lt;a href=&#34;http://www.pip-installer.org/en/latest/#requirements-files&#34;&gt;PIP requirements
files&lt;/a&gt; to
manage your project dependencies. We already have our pip requirements
file where it needs to be and named correctly so we don&amp;rsquo;t need to do
anything, but if we didn&amp;rsquo;t have one, we would need to create one and put
it in the root, and call it requirements.txt&lt;/p&gt;

&lt;h2 id=&#34;services:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Services&lt;/h2&gt;

&lt;p&gt;When we add a service to our deployment stack, dotCloud gives us the
appropriate connection information in a file called
&amp;lsquo;/home/dotcloud/environment.json&amp;rsquo; that is available to us on our
deployment container. This allows us to not have to hard code
username/password and server urls in our settings.py file, and it also
makes it a little more secure for us since we don&amp;rsquo;t have to have that
info in our source repository.&lt;/p&gt;

&lt;p&gt;This is how we use it. At the top of your settings.py file you will need
to add the following. snippet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;import json
with open(&#39;/home/dotcloud/environment.json&#39;) as f:
  env = json.load(f)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we have that added to the settings.py file, we now have a variable
env that has all of the env settings we need.&lt;/p&gt;

&lt;p&gt;You could go a little further add some custom code to check if the
environment.json file exists, and if it does, you know you are in
production, so use that setup, or if not, then you must be in local
mode, so use your local settings. If you want to get really cool, you
can have your own json file that has a similar setup for local
development, and if it doesn&amp;rsquo;t find the dotcloud one, it could look for
your own, and load your settings from that. This will allow you to use
the same settings file for both production and dev, with only a little
bit of code at the top to load the correct env file.&lt;/p&gt;

&lt;h2 id=&#34;database:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Database&lt;/h2&gt;

&lt;p&gt;Most applications need a database, and this blog is no different. This
is how we setup our database to work with our blog on dotcloud. We are
going to be using mysql for our database. With Django you need to set
your database settings in your settings.py. This is how we setup a mysql
database connection inside of our settings.py. Notice that the name of
the database doesn&amp;rsquo;t come from the env, you pick that yourself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;DATABASES = {
    &#39;default&#39;: {
        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,
        &#39;NAME&#39;: &#39;blogdb&#39;,
        &#39;USER&#39;: env[&#39;DOTCLOUD_DB_MYSQL_LOGIN&#39;],
        &#39;PASSWORD&#39;: env[&#39;DOTCLOUD_DB_MYSQL_PASSWORD&#39;],
        &#39;HOST&#39;: env[&#39;DOTCLOUD_DB_MYSQL_HOST&#39;],
        &#39;PORT&#39;: int(env[&#39;DOTCLOUD_DB_MYSQL_PORT&#39;]),
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-the-database:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Create the Database&lt;/h2&gt;

&lt;p&gt;dotCloud gives you your own dedicated database, with full root access.
With great power comes great responsibilities. One of those
responsibilities is that you need to create your own database schemas,
and users yourself. Which means you normally need to do something like
this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# connect to dotcloud mysql server instance
$ dotcloud run blog.db -- mysql -u root -p

# mysql -u root -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 34
Server version: 5.1.41-3ubuntu12.10 (Ubuntu)

# create the user and database and give user permissions to database.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

mysql&amp;gt; create database blogdb;
Query OK, 1 row affected (0.00 sec)

mysql&amp;gt; create user &#39;blog_username&#39; identified by &#39;strong_password&#39;;
Query OK, 0 rows affected (0.05 sec)

mysql&amp;gt; grant all on blogdb.* to &#39;blog_user&#39;@&#39;%&#39;;
Query OK, 0 rows affected (0.04 sec)

mysql&amp;gt; flush privileges;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; exit;Bye
Shared connection to database closed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Does that look familiar? I have it here in case you want to do it the
long way.&lt;/p&gt;

&lt;p&gt;To make things easier, we are going to create a small python script that
will check to see if we have our database created, and if not, it will
create it for us. This will make it so that we don&amp;rsquo;t have to login into
our database and do it by hand before we deploy. The file is called
createdb.py and this is what it looks like. This script is for mysql. If
you want a postgreSQL database, you can use this as a template and
change it so that it will work with postgreSQL.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;import MySQLdb
import os
from wsgi import *

def create_dbs(names):
    print(&amp;quot;create_dbs: let&#39;s go.&amp;quot;)
    django_settings = __import__(os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;], fromlist=&#39;DATABASES&#39;)
    print(&amp;quot;create_dbs: got settings.&amp;quot;)
    databases = django_settings.DATABASES
    for name, db in databases.iteritems():
        if name in names and db[&#39;ENGINE&#39;].endswith(&#39;mysql&#39;):
            host = db[&#39;HOST&#39;]
            user = db[&#39;USER&#39;]
            password = db[&#39;PASSWORD&#39;]
            port = db[&#39;PORT&#39;]
            db_name = db[&#39;NAME&#39;]
            print &#39;creating database %s on %s&#39; % (db_name, host)
            db = MySQLdb.connect(user=user,
                                passwd=password,
                                host=host,
                                port=port)
            cur = db.cursor()
            print(&amp;quot;Check if database is already there.&amp;quot;)
            cur.execute(&amp;quot;&amp;quot;&amp;quot;SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA
                         WHERE SCHEMA_NAME = %s&amp;quot;&amp;quot;&amp;quot;, (db_name,))
            results = cur.fetchone()
            if not results:
                print(&amp;quot;Database %s doesn&#39;t exist, lets create it.&amp;quot; % db_name)
                sql = &amp;quot;&amp;quot;&amp;quot;CREATE DATABASE IF NOT EXISTS %s &amp;quot;&amp;quot;&amp;quot; % (db_name,)
                print(&amp;quot;&amp;gt; %s&amp;quot; % sql)
                cur.execute(sql)
                print(&amp;quot;.....&amp;quot;)
            else:
                print(&amp;quot;database already exists, moving on to next step.&amp;quot;)


if __name__ == &#39;__main__&#39;:
    import sys
    print(&amp;quot;create_dbs start&amp;quot;)
    create_dbs(sys.argv[1:])
    print(&amp;quot;create_dbs all done&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;adding-a-cache:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Adding a cache&lt;/h2&gt;

&lt;p&gt;Since most of the blog content doesn&amp;rsquo;t change much, it is a great
candidate for caching. So we are going to take advantage of Django&amp;rsquo;s
built in caching abilities and add some caching to our blog. Normally I
use &lt;a href=&#34;http://memcached.org&#34;&gt;memcached&lt;/a&gt; for my caching, but dotCloud&amp;rsquo;s
memcached support is limited right now. The reason why it is limited is
because memcached doesn&amp;rsquo;t have any built in authentication mechanism,
and in order to make sure it is secure, you need to run a special
version of memcached that supports
&lt;a href=&#34;http://code.google.com/p/memcached/wiki/SASLAuthProtocol&#34;&gt;SASL&lt;/a&gt;, and
most of the memcached clients don&amp;rsquo;t support this. So instead of
deploying an insecure service, they decided to not support it fully.
There are ways to use it, but it involves all kind of complicated
firewall rules and running something like stunnel. So it is possible,
but it isn&amp;rsquo;t very clean.&lt;/p&gt;

&lt;p&gt;Instead they recommend that you use &lt;a href=&#34;http://redis.io&#34;&gt;redis&lt;/a&gt; instead,
redis has the same caching abilities that memcached has, plus a lot
more, including authentication. So we are going to use redis for our
cache. In order to use redis, we will need to add the redis library
because redis caching support isn&amp;rsquo;t built into Django. In your
requirements.txt file you will need to add &lt;code&gt;django-redis==1.4.5&lt;/code&gt; so that
the libraries will be available for Django to use.&lt;/p&gt;

&lt;p&gt;Once you have the library installed, you will need to add these settings
to your settings.py file so that django knows which redis server and
password to use.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;CACHES = {
    &#39;default&#39;: {
        &#39;BACKEND&#39;: &#39;redis_cache.cache.RedisCache&#39;,
        &#39;LOCATION&#39;: env[&#39;DOTCLOUD_CACHE_REDIS_HOST&#39;]+&#39;:&#39;+env[&#39;DOTCLOUD_CACHE_REDIS_PORT&#39;],
        &#39;OPTIONS&#39;: {
            &#39;DB&#39;: 1,
            &#39;PASSWORD&#39;: env[&#39;DOTCLOUD_CACHE_REDIS_PASSWORD&#39;],
            &#39;PARSER_CLASS&#39;: &#39;redis.connection.HiredisParser&#39;
        },
    },
}

# we also are going to use redis for our session cache as well.
SESSION_ENGINE = &#39;django.contrib.sessions.backends.cached_db&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information about using redis as your cache for Django, check
out these links.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/niwibe/django-redis&#34;&gt;https://github.com/niwibe/django-redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pypi.python.org/pypi/django-redis/1.4.5&#34;&gt;http://pypi.python.org/pypi/django-redis/1.4.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/1.3/topics/cache/&#34;&gt;https://docs.djangoproject.com/en/1.3/topics/cache/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://answers.dotcloud.com/question/213/redis-cache-settings-for-django&#34;&gt;http://answers.dotcloud.com/question/213/redis-cache-settings-for-django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;django-admin:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Django Admin&lt;/h2&gt;

&lt;p&gt;We also need an easy way to create our django admin account for us. In
order to do that I have this mkadmin.py script. This will default the
password to &amp;lt;&amp;lsquo;P@s$w0rd1&amp;rsquo;&amp;gt;, once you have your code installed, you will
need to login to the admin account and change your password to something
more secure.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;#!/usr/bin/env python
from wsgi import *
from django.contrib.auth.models import User
u, created = User.objects.get_or_create(username=&#39;admin&#39;)
if created:
    u.set_password(&#39;P@s$w0rd1&#39;)
    u.is_superuser = True
    u.is_staff = True
    u.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;media:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Media&lt;/h2&gt;

&lt;p&gt;We need to put our static and media files in the following locations:
&lt;code&gt;static=/home/dotcloud/data/static/&lt;/code&gt; and
&lt;code&gt;media=/home/dotcloud/data/media/&lt;/code&gt;. Because of this we need to make sure
we change our settings.py file, and setup an nginx.conf file to map to
the correct locations. Here are the settings.py file changes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;# media settings
MEDIA_ROOT = &#39;/home/dotcloud/data/media/&#39;
MEDIA_URL = &#39;/media/&#39;

# static settings
STATIC_ROOT = &#39;/home/dotcloud/data/static/&#39;
STATIC_URL = &#39;/static/&#39;

# admin prefix
ADMIN_MEDIA_PREFIX = &#39;/static/admin/&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the nginx.conf&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode nginx&#34;&gt;location /media/ { root /home/dotcloud/data ; }
location /static/ { root /home/dotcloud/data ; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;post-install:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Post Install&lt;/h2&gt;

&lt;p&gt;We are going to create a
&lt;a href=&#34;http://docs.dotcloud.com/guides/postinstall/&#34;&gt;postinstall&lt;/a&gt; script to
handle all of the tasks we need to do after we install our code on the
server. This is what will call our createdb.py, and mkadmin.py files
from above, as well as syncing our database, running migrations and
running collectstatic to move all static files into the right locations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;#!/bin/sh
python createdb.py default
python mysite/manage.py syncdb --noinput
python mysite/manage.py migrate
python mkadmin.py
mkdir -p /home/dotcloud/data/media /home/dotcloud/data/static
python mysite/manage.py collectstatic --noinput
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;rsquo;t forget to make sure your postinstall, createdb.py and mkadmin.py
scripts are executable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# make the script executable.
$ chmod +x postinstall createdb.py mkadmin.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dotcloud-yml:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;dotcloud.yml&lt;/h2&gt;

&lt;p&gt;Now that we have our application&amp;rsquo;s project structure all setup and
configured the way dotCloud wants it, we can configure our deployment
stack. This is done with a file called dotcloud.yml. For more
information about the dotcloud.yml file check out this link:
&lt;a href=&#34;http://docs.dotcloud.com/guides/build-file/&#34;&gt;http://docs.dotcloud.com/guides/build-file/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode yaml&#34;&gt;www:
  type: python
db:
  type: mysql
cache:
  type: redis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is telling us that we want 3 services, a python www service, a
mysql db service, and a redis cache service. This is a very basic setup,
and you can get a lot more complicated depending on what you want to
achieve. Notice that this isn&amp;rsquo;t setup for high availability because none
of the instances are scaled. See the section about scaling below for
more information. If you are running in a production app on dotCloud it
is recommended that you scale all of your services so that they can
withstand EC2 server crashes, and other unforeseen issues.&lt;/p&gt;

&lt;h2 id=&#34;deployment:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Deployment&lt;/h2&gt;

&lt;p&gt;Now we are ready to deploy our Django app, but before I go any further
it is important to know the following. Dotcloud will pay attention to
your .gitignore files. If you have a settings file in your .gitignore
file so that it doesn&amp;rsquo;t get saved in the repo, it will not push those
changes up to the cloud. You will need to remove it from the .gitignore
in order to get those files out there. It is also import to remember
that only changes that are committed are pushed, so don&amp;rsquo;t forget to
commit your changes. If you wanted to be tricky you could use a post
install script to pull down the file from a secure location and install
it that way, if you want to make things super secure.&lt;/p&gt;

&lt;p&gt;Everything is all setup, so all we have to do is push our application to
dotCloud.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# push out your changes to the server
$ dotcloud push blog .
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;service-info:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Service info&lt;/h2&gt;

&lt;p&gt;Once you push your code to dotCloud you can see what it looks like by
running the info command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# get the information about our new services
$ dotcloud info blog
cache:
    config:
        redis_password: &amp;lt;password&amp;gt;
        redis_replication: true
    instances: 1
    type: redis
db:
    config:
        mysql_masterslave: true
        mysql_password: &amp;lt;password&amp;gt;
    instances: 1
    type: mysql
www:
    config:
        static: static
        uwsgi_processes: 4
    instances: 1
    type: python
    url: &amp;lt;url was here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;scaling:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Scaling&lt;/h2&gt;

&lt;p&gt;Scaling is the ability to grow your application so that it can handle
more traffic, or possible failures that might occur. With a normal non
PaaS setup, scaling an application can be quite painful and time
consuming, but with a PaaS it can be as easy as running a few commands.
There are three types of scaling, Vertical, Horizontal, High
Availability.&lt;/p&gt;

&lt;p&gt;Vertical scaling, means growing the service you have now so that it can
get bigger. This is popular with databases, the bigger a database gets
the more space and memory it needs.&lt;/p&gt;

&lt;p&gt;Horizontal scaling means creating more then one instance of a service so
it spread the work between the different services, giving you greater
capacity.&lt;/p&gt;

&lt;p&gt;High Availability means that you have more then one service running at a
time, so that if one of the services has an issue, the other one will
pick up the slack. This will help avoid downtime, when failures occur
(EC2 instance crashes). Ideally when running in production, all of your
services should be scaled for High Availability.&lt;/p&gt;

&lt;p&gt;There are two kinds of services, stateful, and stateless. Stateful
services are services that holds persistent data. Examples of stateful
services are mysql, redis, postgresql, solr, MongoDB and RabbitMQ.&lt;/p&gt;

&lt;p&gt;Horizontally High availability scaling a stateful service on dotCloud
means creating a master/slave setup, which can switch the slave with the
master automatically if the master has any issues. dotCloud supports HA
scaling on MySQL, redis, and MongoDB.&lt;/p&gt;

&lt;p&gt;Stateful services scale like this&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;mysql : 2 (master/slave)&lt;/li&gt;
&lt;li&gt;redis : 2 (master/slave)&lt;/li&gt;
&lt;li&gt;mongodb : 3 or 5 (using replica sets)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Scaling a stateless and one of the supported stateful services is the
same. You would just run the scale command line command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ dotcloud scale app db=2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For stateless applications, you are limited to a set number of scaling
units, unless you are on the enterprise plan. If you need to have an
application with lots of scale units, you should contact dotCloud, and
let them know what you are planning to do, and they will advise you on
how best to accomplish your goals.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href=&#34;http://docs.dotcloud.com/guides/scaling/&#34;&gt;http://docs.dotcloud.com/guides/scaling/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;database-backups:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Database Backups&lt;/h2&gt;

&lt;p&gt;Just because you are hosting your application on dotCloud doesn&amp;rsquo;t mean
you shouldn&amp;rsquo;t backup your data. The most important data to backup is
your database. Luckily dotCloud makes it easy to back up your database.
There is a very helpful guide on how to setup your database backups
here: &lt;a href=&#34;http://docs.dotcloud.com/guides/backups/&#34;&gt;http://docs.dotcloud.com/guides/backups/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;email:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Email&lt;/h2&gt;

&lt;p&gt;If you need to send or receive email from your application, you can do
that to. Because dotCloud runs on EC2, and EC2 is a popular place where
SPAMMERS send SPAM from, it is best to use a 3rd party email provider to
send your emails for you. Popular ones are
&lt;a href=&#34;http://mailgun.net/&#34;&gt;MailGun&lt;/a&gt;, &lt;a href=&#34;http://sendgrid.com/&#34;&gt;SendGrid&lt;/a&gt;,
&lt;a href=&#34;http://www.critsend.com/&#34;&gt;CritSend&lt;/a&gt;, and &lt;a href=&#34;http://aws.amazon.com/ses/&#34;&gt;Amazon
SES&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can set this up a couple of different ways. The first way is the
easiest way possible, it allows you to configure the SMTP settings for
each service. You would do it like this (see below). You can manually
set the smtp settings for that service, and when your application needs
to send an email it will use those settings. This is the most simple
setup, but there are downsides to this approach. You would need to set
this for each service, if you have more then one that will be duplicated
everywhere. Also if you want to change your settings, you will need to
destroy your service and recreate it, since those configs can only be
set once when the service is created.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode yaml&#34;&gt;www:
  type: python
  config:
    smtp_server: smtp.mailgun.org
    smtp_port: 25
    smtp_username: postmaster@company.com
    smtp_password: YourMailGunPassword
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A better approach would be to use dotCloud&amp;rsquo;s SMTP service. The SMTP
service is built to receive emails from your services and forward them
to the appropriate location. It is best to use a 3rd party email
provider, but you can also use the typical poor mans solution, where you
use gmail to send your emails. Be careful when using gmail, because you
aren&amp;rsquo;t aloud to send a lot of emails via gmail, once you hit your daily
limit you will be blocked, so this is fine for a few emails a day, don&amp;rsquo;t
trust it for everyday stuff. Also, the emails will always be coming from
your gmail address, fine for system emails, but not if you are trying to
run a legit business.&lt;/p&gt;

&lt;p&gt;Here is an example using mailgun.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode yaml&#34;&gt;mailer:
  type: smtp
  config:
    smtp_relay_server: smtp.mailgun.org
    smtp_relay_port: 587
    smtp_relay_username: postmaster@yourmailgundomain.com
    smtp_relay_password: YourMailgunPassword
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example using gmail.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode yaml&#34;&gt;mailer:
  type: smtp
  config:
    smtp_relay_server: smtp.gmail.com
    smtp_relay_port: 587
    smtp_relay_username: your_gmail_username@gmail.com
    smtp_relay_password: Your_Gmail_Password
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have these all setup, they will be available in your
environment.json file.&lt;/p&gt;

&lt;p&gt;If you want to receive email, it is best to use a service like
&lt;a href=&#34;http://mailgun.net/&#34;&gt;MailGun&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.dotcloud.com/guides/emails/&#34;&gt;http://docs.dotcloud.com/guides/emails/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.dotcloud.com/services/smtp/&#34;&gt;http://docs.dotcloud.com/services/smtp/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cron-jobs:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Cron jobs&lt;/h2&gt;

&lt;p&gt;If your app needs to run cron jobs, follow the steps in this guide:
&lt;a href=&#34;http://docs.dotcloud.com/guides/periodic-tasks/&#34;&gt;http://docs.dotcloud.com/guides/periodic-tasks/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;celery:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Celery&lt;/h2&gt;

&lt;p&gt;This blog doesn&amp;rsquo;t really have a need for celery, but dotCloud does
support it. For more information follow this link:
&lt;a href=&#34;http://docs.dotcloud.com/tutorials/python/django-celery/&#34;&gt;http://docs.dotcloud.com/tutorials/python/django-celery/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;s3fs:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;S3FS&lt;/h2&gt;

&lt;p&gt;If you store data on s3 you can mount your s3 bucket so that you can
have access to s3 from your application, just like it was a local
directory on your container. This is helpful for storing files that are
uploaded by your visitors, or to share files between different web
processes. Follow these instructions to set it up:
&lt;a href=&#34;http://docs.dotcloud.com/guides/s3fs/&#34;&gt;http://docs.dotcloud.com/guides/s3fs/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;logs:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Logs&lt;/h2&gt;

&lt;p&gt;If you need to look at the logs to see how it is going you can do it two
ways. The first way will tail your logs for you to your console.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# look at logs of your service, it will tail them to your console. ctrl-c to stop.
$ dotcloud logs blog.www
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or login via ssh and look at your logs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# Open up a shell
$ dotcloud ssh blog.www
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are the ones you most likely care about.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# nginx access and error logs.
/var/log/nginx/&amp;lt;app_name&amp;gt;.{access,error}.log

# wsgi error logs
/var/log/supervisor/uswgi.log
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;restart-service:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Restart Service&lt;/h2&gt;

&lt;p&gt;If you need to restart your service just issue this command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# restart the service
dotcloud restart blog.www
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;links:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Read how this service stacks up against other services like it in my
&lt;a href=&#34;http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/&#34;&gt;Django hosting
roundup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dotCloud.com&#34;&gt;http://www.dotCloud.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Standardizing Python WSGI deployment</title>
      <link>http://www.kencochrane.net/blog/2011/12/standardizing-python-wsgi-deployment/</link>
      <pubDate>Fri, 30 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2011/12/standardizing-python-wsgi-deployment/</guid>
      <description>&lt;p&gt;Over the past year I have been testing all of the new python platform as
a service companies that have popped up, and I have posted my notes on
my blog so that everyone can learn from my experiences.
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-experiences-with-epio/&#34;&gt;ep.io&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/&#34;&gt;apphosted.com&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-day-gondorio/&#34;&gt;gondor.io&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/&#34;&gt;dotcloud.com&lt;/a&gt;,
&lt;a href=&#34;http://DjangoZoom.com&#34;&gt;DjangoZoom.com&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/11/developers-guide-for-running-django-apps-on-heroku/&#34;&gt;Heroku&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/&#34;&gt;Django hosting
roundup&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;All and all, the platforms were very similar, they allowed you to easily
host your python/django project without having to worry about managing a
server or other typical system administration duties. Some of the
services were more advanced and had more features then others, but since
it was still early in the game, that was expected.&lt;/p&gt;

&lt;p&gt;The one thing that was different between each service was the way that
you have your python project setup. This might not seem like a big deal,
but because of the little differences between providers it required me
to change my test project every time I wanted to test out a new
providers service. These little changes weren&amp;rsquo;t a big deal for me, but
it could be a barrier of entry for less technical people. It also makes
it harder for someone to change services if they wanted. This probably
sounds like a good idea to the platform providers because it makes it a
little harder for people to leave their service, but I don&amp;rsquo;t think that
was their intention. Looking at the different platforms, and their
implementations, you can see they all make sense, and it was just their
own way of solving a problem because there was no standard available.&lt;/p&gt;

&lt;p&gt;Before I started programmed in python, I came from a Java background. In
Java they have already solved the deployment problem with their WAR
files. For those of you that aren&amp;rsquo;t familiar with Java or WAR files,
basically WAR files are just java projects that are laid out in a common
directory structure, with a few required configuration files (web.xml,
etc) that the application server uses when deploying the application.
This directory structure is then zipped up for easy portability. All of
the different Java application servers know how to read these files and
deploy the applications. It makes installing applications really easy,
and if you ever need to change application servers, it shouldn&amp;rsquo;t require
any changes at all, assuming you stuck with the standard format. &lt;a href=&#34;http://en.wikipedia.org/wiki/WAR_file_format_(Sun&#34;&gt;Java
WAR files on
Wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I was lucky enough to attend DjangoCon US 2011 in Portland Oregon this
year. At the conference there was a Django Hosting Panel moderated by
Sean O&amp;rsquo;Connor where the different hosting providers were asked questions
about their platforms. If you didn&amp;rsquo;t get a chance to see it, it is
available on blip.tv here.
&lt;a href=&#34;http://blip.tv/djangocon/django-hosting-panel-5572201&#34;&gt;http://blip.tv/djangocon/django-hosting-panel-5572201&lt;/a&gt; &lt;em&gt;Fun Fact: That
is me in the front row with the blue shirt and green hat.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;During the panel, Sean asked if there was any plans for working on
interoperability between the different platforms. Andrew Godwin
referenced Java&amp;rsquo;s WAR format and also talked about how he has already
started to talk to others about this idea at DjangoCon EU and would like
to see it move forward. The others in the panel seemed to agree that
something could be done, but it didn&amp;rsquo;t seem like it was urgent to them,
or if they really cared/wanted to do it. I can understand their
reluctance, because I&amp;rsquo;m sure they have more important things to work on,
and this would be very low on their list of things to do. After all
whatever comes from this, is going to require changes to their platform
in order to support it.&lt;/p&gt;

&lt;p&gt;That is why I think we (the developer community), need to come up with a
standard, propose it to the rest o the python community, with input from
the different platform providers, and then leave it up to the different
providers to decide if they are going to support it or not. It would be
great if everyone supported it, but because this isn&amp;rsquo;t going to make
anyone money in the short term, it will be hard to force anyone to do
it.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m willing to help to create the standard, but where do we start, and
whom do we submit the proposal too, the PSF?&lt;/p&gt;

&lt;p&gt;I think the easiest place to start would be to look at the different
platforms and find out what they have in common, and go from there. Off
the top of my head, I&amp;rsquo;m pretty sure they all support virtualenv and pip
for requirements. They are also all wsgi based, but I think that is
where the commonality stops.&lt;/p&gt;

&lt;p&gt;For example they all have a different way for specifying application
settings. ep.io has an ini file, dotcloud has a yml file, and gondor has
a .gondor/config file. It shouldn&amp;rsquo;t be too hard to come up with a
standard format with sane attributes.&lt;/p&gt;

&lt;p&gt;We could probably all agree on a common project structure, and where to
put the common files (requirements.txt for pip requirements and put it
in the root of the project, etc.).&lt;/p&gt;

&lt;p&gt;Something that will be important is to make the standard solid but
flexible. Since all of these platforms are a little different we will
need to allow some way for them to have a custom section or file that
will be platform dependent, so that they can extend the standard without
breaking it. These extensions won&amp;rsquo;t be supported by everyone, but it
will allow the platform providers the flexibility to move forward
without getting held back with a standard process which is normally a
slow process.&lt;/p&gt;

&lt;p&gt;That is also why versioning is important, make sure it is obvious which
version of the standard the application is using, so that it doesn&amp;rsquo;t
break as changes in the standard are made in the future.&lt;/p&gt;

&lt;p&gt;As you can see, with a little bit of effort I have a nice start, but
where do we go from here? What do you think, is this a good idea? Do you
want to help move it forward? Post some comments below, and lets
continue this discussion into 2012.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developers guide to Running Django Applications on Heroku</title>
      <link>http://www.kencochrane.net/blog/2011/11/developers-guide-for-running-django-apps-on-heroku/</link>
      <pubDate>Wed, 30 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2011/11/developers-guide-for-running-django-apps-on-heroku/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://Heroku.com&#34;&gt;Heroku&lt;/a&gt; the platform as a service (PAAS) company,
very popular in the Ruby on Rails community, has now started opening up
their platform to languages besides Ruby. They now offer support for
Python, Java, Clojure, Node.js, and Scala on their new Cedar stack.
Heroku&amp;rsquo;s Cedar stack is still in beta, but that shouldn&amp;rsquo;t stop you from
trying it out, and that is just what I&amp;rsquo;m going to do.&lt;/p&gt;

&lt;p&gt;6 months ago I wrote a series of blog posts that reviewed all of the
cool new django hosting services that were popping up. My goal was to
look at them all, and compare them to find out what they had to offer,
and to see if I could use them on my future projects. I&amp;rsquo;m going to
review Heroku using the same process that I used to review those other
services, so that I can we can compare apples to apples.&lt;/p&gt;

&lt;p&gt;For those of you who are not familiar with my other blog posts, feel
free to check them out now
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-experiences-with-epio/&#34;&gt;ep.io&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/&#34;&gt;apphosted.com&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-day-gondorio/&#34;&gt;gondor.io&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/&#34;&gt;dotcloud.com&lt;/a&gt;,
&lt;a href=&#34;http://DjangoZoom.com&#34;&gt;DjangoZoom.com&lt;/a&gt;, &lt;a href=&#34;http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/&#34;&gt;Django hosting
roundup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For those of you that are lazy, I&amp;rsquo;ll sum it up pretty quickly. What I&amp;rsquo;m
trying to do is pretty simple, I sign up for the service, and just
looking at the documentation available, can I get my blog application up
and running, and what did I have to do, in order for it to work. I&amp;rsquo;ll
describe each step along the way, as a helpful guide for others who
might be trying to do the same with their application. If I come across
an error, I will tell you what the error was, and how I fixed it, so
that if you get the same error, hopefully what I did to fix my problem,
will also fix yours.&lt;/p&gt;

&lt;h1 id=&#34;heroku-django-documentation:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Heroku Django Documentation&lt;/h1&gt;

&lt;p&gt;Before you start using any new platform, you should take the time to
read the documentation. I know it doesn&amp;rsquo;t sound like fun,but trust me,
it will save you a lot of pain and frustration later on. Here are some
links that I found helpful.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Quickstart guide&lt;/strong&gt;:
&lt;a href=&#34;http://devcenter.heroku.com/articles/quickstart&#34;&gt;http://devcenter.heroku.com/articles/quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python articles&lt;/strong&gt;: &lt;a href=&#34;http://devcenter.heroku.com/articles/python&#34;&gt;http://devcenter.heroku.com/articles/python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Django article&lt;/strong&gt;: &lt;a href=&#34;http://devcenter.heroku.com/articles/django&#34;&gt;http://devcenter.heroku.com/articles/django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dev Center&lt;/strong&gt;: &lt;a href=&#34;http://devcenter.heroku.com/&#34;&gt;http://devcenter.heroku.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;prerequisites:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Prerequisites&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Heroku account&lt;/li&gt;
&lt;li&gt;Heroku command line client&lt;/li&gt;
&lt;li&gt;Python 2.7, virtualenv, pip, git&lt;/li&gt;
&lt;li&gt;Must use pip to manage dependencies with a requirements.txt file&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;signing-up-for-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Signing up for Heroku&lt;/h1&gt;

&lt;p&gt;Signing up was as simple as can be, all I needed to do was follow this
link: &lt;a href=&#34;https://api.heroku.com/signup&#34;&gt;https://api.heroku.com/signup&lt;/a&gt; and fill out my email address. Go
into my email and click on the link they sent, which took me to a page
that had me pick my password, and I was done. The whole process took
less then 1 minute. Can&amp;rsquo;t beat that.&lt;/p&gt;

&lt;h1 id=&#34;verifying-you-heroku-account:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Verifying you Heroku account&lt;/h1&gt;

&lt;p&gt;When you sign up for an account, you have limited access to some
features (add-ons, etc.) until you verify your account. Verifing your
account is easy all you have to do is enter your credit card
information. This proves to them you are real, and also allows you to
use some of the paid features. I recommend that you verify your account
so that you can get access to some of the nice free add-ons that are
available.&lt;/p&gt;

&lt;h1 id=&#34;installing-the-heroku-command-line-client:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Installing the heroku command line client&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m using a mac so I&amp;rsquo;m going to install the following version of the
heroku command line client (toolbelt).
&lt;a href=&#34;http://toolbelt.herokuapp.com/osx/download&#34;&gt;http://toolbelt.herokuapp.com/osx/download&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click on link, download the file.&lt;/li&gt;
&lt;li&gt;Find the file that was downloaded (heroku-toolbelt.pkg) and double
click it.&lt;/li&gt;
&lt;li&gt;Follow prompts; enter password when prompted, and click close.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;test-heroku-command-line-client:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Test heroku command line client&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Open terminial&lt;/li&gt;
&lt;li&gt;Type &amp;ldquo;heroku version&amp;rdquo; you should see something like this
&amp;ldquo;heroku-gem/2.14.0&amp;rdquo; if so, it worked. if not, you did
something wrong.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;login-to-heroku-from-command-line-client:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Login to heroku from command line client&lt;/h1&gt;

&lt;p&gt;Logging into the client will try to find your ssh key, and upload it to
heroku for pushing code later on. If you don&amp;rsquo;t have a key it will prompt
you to create one. If you have more then one it will ask you which one
you want to use.&lt;/p&gt;

&lt;h2 id=&#34;no-key-found-example:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;No key found example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku login
Enter your Heroku credentials.
Email: adam@example.comPassword:
Could not find an existing public key.
Would you like to generate one? [Yn]
Generating new SSH public key.
Uploading ssh public key /Users/adam/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;found-more-then-one-key-example:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Found more then one key example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku login
Enter your Heroku credentials.
Email: &amp;lt;my email&amp;gt;
Password:
Found the following SSH public keys:
1) apphosted.key.pub
2) id_rsa.pub
Which would you like to use with your Heroku account? 2
Uploading ssh public key /Users/ken/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;getting-your-django-application-ready:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Getting your Django application ready&lt;/h1&gt;

&lt;p&gt;Now that you have an account and the client installed, you are ready to
get started. If you are starting from scratch I recommend following the
steps in this tutorial. &lt;a href=&#34;http://devcenter.heroku.com/articles/django&#34;&gt;http://devcenter.heroku.com/articles/django&lt;/a&gt; .
If you are like me and already have an application that you want to
install on to Heroku, keep reading.&lt;/p&gt;

&lt;p&gt;Since I already have a project, I&amp;rsquo;m going to tell you what I needed to
do in order to get my blog application up and running on heroku. I
followed the instructions from the heroku tutorial and went from there.
Heroku depends on git, so I&amp;rsquo;m using a copy of my blog app that is hosted
on github: &lt;a href=&#34;https://github.com/kencochrane/kencochrane_blog_heroku&#34;&gt;https://github.com/kencochrane/kencochrane_blog_heroku&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ cd /Users/ken/projects/github

$ git clone https://kencochrane@github.com/kencochrane/kencochrane_blog_heroku.git kencochrane_heroku
$ cd kencochrane_heroku

# making a new virtual environment using virtualenvwrapper.
$ mkvirtualenv --no-site-packages --distribute kencochrane_heroku
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should automatically activate the environment for you. If it doesn&amp;rsquo;t,
run this command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ workon kencochrane_heroku
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that I have my virtualenv, I need to install my requirements using
pip.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;creating-django-application-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Creating django application on heroku&lt;/h1&gt;

&lt;p&gt;Creating an application on heroku is easy, you just need to run the
following command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku create --stack cedar
Creating some-name-4741... done, stack is cedar
http://some-name-4741.herokuapp.com/ | git@heroku.com:some-name-4741.git
Git remote heroku added
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;deploying-django-application-to-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Deploying django application to Heroku&lt;/h1&gt;

&lt;p&gt;Once you are ready you can deploy your django application to Heroku.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything went well, it should look something like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ git push heroku master
Counting objects: 209, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (176/176), done.
Writing objects: 100% (209/209), 271.89 KiB, done.
Total 209 (delta 28), reused 192 (delta 23)

-----&amp;gt; Heroku receiving push
-----&amp;gt; Python/Django app detected
-----&amp;gt; Preparing virtualenv version 1.6.4
       New python executable in ./bin/python
       Installing setuptools............done.
       Installing pip...............done.
-----&amp;gt; Django settings injection
       Injecting code into blog/settings.py to read from DATABASE_URL

&amp;lt;removed a lot of output that doesn&#39;t need to be shown&amp;gt;

       Successfully installed South django-activitysync django-debug-toolbar django-disqus django-memcache-status django-tagging django-xmlrpc feedparser httplib2 oauth2 python-memcached python-twitter simplejson yolk docutils Pygments psycopg2 Django
       Cleaning up...
-----&amp;gt; Discovering process types
       Procfile declares types         -&amp;gt; (none)
       Default types for Python/Django -&amp;gt; web
-----&amp;gt; Compiled slug size is 10.3MB
-----&amp;gt; Launching... done, v5
       http://some-name-4741.herokuapp.com deployed to Heroku
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;deploying-application-to-heroku-failed-now-what:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Deploying application to Heroku failed, now what?&lt;/h1&gt;

&lt;p&gt;The very first time you push to master you will get something like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ git push heroku master

The authenticity of host &#39;heroku.com (50.19.85.132)&#39; can&#39;t be established.
RSA key fingerprint is 8b:48:5e:67:0e:c9:16:47:32:f2:87:0c:1f:c8:60:ad.
Are you sure you want to continue connecting (yes/no)? yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is normal, just type &amp;lsquo;yes&amp;rsquo;, and you will never be prompted for this
again.&lt;/p&gt;

&lt;h2 id=&#34;django-app-must-be-in-a-package-subdirectory:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Django app must be in a package subdirectory&lt;/h2&gt;

&lt;p&gt;If you django project isn&amp;rsquo;t setup correctly, you will get an error like
this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ git push heroku master
Counting objects: 199, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (167/167), done.
Writing objects: 100% (199/199), 270.86 KiB, done.
Total 199 (delta 26), reused 192 (delta 23)


-----&amp;gt; Heroku receiving push
-----&amp;gt; Python app detected
 !     Django app must be in a package subdirectory
 !     Heroku push rejected, failed to compile Python app


To git@heroku.com:some-name-4741.git
 ! [remote rejected] master -&amp;gt; master (pre-receive hook declined)
error: failed to push some refs to &#39;git@heroku.com:some-name-4741.git&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This failed, because django app must be in a package subdirectory.. So
you need to change the way my django app is setup. Move all of the files
under a django project directory except the .git directory and
.gitignore and requirements.txt files. For an example of what this looks
like, check out the project directory structure on my repo in github.&lt;/p&gt;

&lt;h2 id=&#34;heroku-push-rejected-no-cedar-supported-app-detected:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Heroku push rejected, no Cedar-supported app detected&lt;/h2&gt;

&lt;p&gt;Another error you can get is this one. &amp;ldquo;Heroku push rejected, no
Cedar-supported app detected&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ git push heroku master
Counting objects: 204, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (171/171), done.
Writing objects: 100% (204/204), 271.34 KiB, done.
Total 204 (delta 27), reused 192 (delta 23)

-----&amp;gt; Heroku receiving push
 !     Heroku push rejected, no Cedar-supported app detected

To git@heroku.com:cold-summer-4741.git
 ! [remote rejected] master -&amp;gt; master (pre-receive hook declined)
error: failed to push some refs to &#39;git@heroku.com:cold-summer-4741.git&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had this error and I couldn&amp;rsquo;t figure it out. After searching through
all of the heroku python docs (all 2 of them), I didn&amp;rsquo;t find anything,
so I started doing some trial and error testing, and I finally figure
out what was wrong. My django project directory was kencochrane_blog,
and this had an underscore, and when I changed it to just kenblog (no
more underscore), it worked. I couldn&amp;rsquo;t find anything anywhere that said
you can&amp;rsquo;t use underscores for your django app name, so they might want
to update their documentation, or possibly fix the bug. I&amp;rsquo;m not sure if
this is by design or not, maybe someone can let me know.&lt;/p&gt;

&lt;h1 id=&#34;check-django-application-status-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Check Django application status on heroku&lt;/h1&gt;

&lt;p&gt;Now that you have pushed your application out onto Heroku how do you
know if it is actually running? The Heroku client has a command called
ps, which will tell you what your processes are doing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku ps

Process       State               Command
------------  ------------------  ------------------------------
web.1         crashed for 2m      python kenblog/manage.py runserver 0...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My django application looks like it crashed. Most likely because I
didn&amp;rsquo;t setup the database yet, lets look at the logs to see what is
causing the problems to be sure.&lt;/p&gt;

&lt;h1 id=&#34;checking-django-application-logs-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Checking Django application logs on Heroku&lt;/h1&gt;

&lt;p&gt;The Heroku client has a nifty logs command that you can use to view the
last chunk of logs for your application. It will combine all of your
logs into one view, so that you don&amp;rsquo;t have to have more then one log
process running. You can call it directly and get an output similar to
the shell command &amp;lsquo;tail&amp;rsquo; and you can all use the &amp;lsquo;&amp;ndash;tail&amp;rsquo; option to
follow the logs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku logs --tail
2011-11-27T18:40:00+00:00 heroku[api]: Deploy 5f194d2 by kencochrane@2011-11-27T18:40:00+00:00 heroku[api]: Release v7 created by kencochrane@
2011-11-27T18:40:00+00:00 heroku[web.1]: State changed from crashed to created
2011-11-27T18:40:00+00:00 heroku[web.1]: State changed from created to starting
2011-11-27T18:40:00+00:00 heroku[slugc]: Slug compilation finished
2011-11-27T18:40:03+00:00 heroku[web.1]: Starting process with command `python kenblog/manage.py runserver 0.0.0.0:12033 --noreload`
2011-11-27T18:40:04+00:00 app[web.1]: Unexpected error: (&amp;lt;type &#39;exceptions.NameError&#39;&amp;gt;, NameError(&amp;quot;name &#39;DATABASES&#39; is not defined&amp;quot;,), &amp;lt;traceback object at 0x1a7b128&amp;gt;)
2011-11-27T18:40:05+00:00 app[web.1]: There is no South database module &#39;south.db.None&#39; for your database. Please either choose a supported database, check for SOUTH_DATABASE_ADAPTER[S] settings, or remove South from INSTALLED_APPS.
2011-11-27T18:40:06+00:00 heroku[web.1]: State changed from starting to crashed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks like it is an issue with the settings file. If you wanted to take
a look at the settings file to see if we can find out what is wrong you
can run the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# (your path will be different)
$ heroku run cat kenblog/settings.py

&amp;lt;normal settings file stuff with the following added at the end.&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;import os, sys, urlparse
urlparse.uses_netloc.append(&#39;postgres&#39;)
urlparse.uses_netloc.append(&#39;mysql&#39;)
try:
    if os.environ.has_key(&#39;DATABASE_URL&#39;):
        url = urlparse.urlparse(os.environ[&#39;DATABASE_URL&#39;])
        DATABASES[&#39;default&#39;] = {
            &#39;NAME&#39;:     url.path[1:],
            &#39;USER&#39;:     url.username,
            &#39;PASSWORD&#39;: url.password,
            &#39;HOST&#39;:     url.hostname,
            &#39;PORT&#39;:     url.port,
        }
        if url.scheme == &#39;postgres&#39;:
            DATABASES[&#39;default&#39;][&#39;ENGINE&#39;] = &#39;django.db.backends.postgresql_psycopg2&#39;
        if url.scheme == &#39;mysql&#39;:
            DATABASES[&#39;default&#39;][&#39;ENGINE&#39;] = &#39;django.db.backends.mysql&#39;
except:
    print &amp;quot;Unexpected error:&amp;quot;, sys.exc_info()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is odd, not sure why this is like this since I&amp;rsquo;m seeing the
DATABASES variable above. Let&amp;rsquo;s check to see if the environment
variables are there. (the output has been changed to protect the
innocent, but you still get the picture). You can also use the command
&amp;lsquo;heroku config&amp;rsquo; if you just want to see your application configuration
options.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku run env
Running env attached to terminal... up, run.6
DATABASE_URL=postgres://blah:somethingelse@ec2-555-55-555-555.compute-1.amazonaws.com/morestuff
PORT=37265
HOME=/app
PYTHONUNBUFFERED=true
TERM=xterm
COLUMNS=153

PATH=bin:/usr/local/bin:/usr/bin:/bin
PWD=/app
SHARED_DATABASE_URL=postgres://blah:evenmorestuff@ec2-555-55-555-555.compute-1.amazonaws.com/morestuff
LINES=32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This output looks good the DATABASE_URL env variable is there, so that
is OK. Looking more closely at my settings.py file I didn&amp;rsquo;t have a
DATABASES variable because the last time I used this project, the other
hosting provider didn&amp;rsquo;t require that I have one. So I have added a blank
DATABASES variable, and that seems to have fixed my issue. Heroku,
should make the error message a little nicer, add more notes to their
documentation, or even better make their code handle the case when there
is no DATABASES variable in the settings file. I have submitted a patch
to fix this, so hopefully that will get rolled out in the near future.
(&lt;a href=&#34;https://github.com/heroku/heroku-buildpack-python/pull/8&#34;&gt;https://github.com/heroku/heroku-buildpack-python/pull/8&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Now if we redeploy the app and look at the logs, they look much better.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku logs
2011-11-27T18:59:25+00:00 heroku[api]: Deploy 96be00f by kencochrane@
2011-11-27T18:59:25+00:00 heroku[api]: Release v8 created by kencochrane@
2011-11-27T18:59:25+00:00 heroku[web.1]: State changed from crashed to created
2011-11-27T18:59:26+00:00 heroku[web.1]: State changed from created to starting
2011-11-27T18:59:26+00:00 heroku[slugc]: Slug compilation finished
2011-11-27T18:59:31+00:00 app[web.1]: 0 errors found
2011-11-27T18:59:31+00:00 heroku[web.1]: State changed from starting to up
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;running-django-management-commands-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Running django management commands on Heroku&lt;/h1&gt;

&lt;p&gt;Running django management commands are easy you just need to run the
following command and replace &amp;lt;command&amp;gt; with the management
command you want to run. There are a few examples below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku run python kenblog/manage.py &amp;lt;command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;running-django-shell-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Running django shell on Heroku&lt;/h2&gt;

&lt;p&gt;If you need to use the interactive python shell with django, you still
can, you just need to run the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku run python kenblog/manage.py shell
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;syncing-django-database-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Syncing Django Database on Heroku&lt;/h2&gt;

&lt;p&gt;Now that our application is starting like it should let&amp;rsquo;s sync the db.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku run python kenblog/manage.py syncdb
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;running-django-south-migrations-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Running Django South Migrations on Heroku&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku run python kenblog/manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets look at our processes now&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku ps
Process       State               Command
------------  ------------------  ------------------------------
run.5         complete for 21m    cat kenblog/settings.py
run.6         complete for 18m    env
run.7         complete for 1m     python kenblog/manage.py syncdb
run.8         complete for 1m     python kenblog/manage.py migrate
web.1         up for 4m           python kenblog/manage.py runserver..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Things are looking better, we are up, and it also shows our old commands
that we ran.&lt;/p&gt;

&lt;p&gt;if you need to work with the processes you have the following options.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;ps:dynos [QTY]                 # scale to QTY web processes
ps:restart [PROCESS]           # restart an app process
ps:scale PROCESS1=AMOUNT1 ...  # scale processes by the given amount
ps:stop PROCESS                # stop an app process
ps:workers [QTY]               # scale to QTY background processes
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;opening-your-django-application-in-a-web-browser:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Opening your django application in a web browser&lt;/h1&gt;

&lt;p&gt;If you run this command it will open a web browser and hopefully your
site is running as it should&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku open
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;running-django-and-gunicorn-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Running django and gunicorn on heroku&lt;/h1&gt;

&lt;p&gt;By default heroku deploys with the built in django runserver, which
isn&amp;rsquo;t recommended for production. If you are playing around it is ok,
but once you get past that, the first thing you should do is switch to
something better like guincorn. Switching is quick and painless, and you
will be glad that you did.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add gunicorn==0.13.4 to your requirements file.&lt;/li&gt;
&lt;li&gt;create a new file called Procfile at the same level as your
requirements.txt file with the following in it.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;web: python kenblog/manage.py run_gunicorn -b &amp;quot;0.0.0.0:$PORT&amp;quot; -w 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add gunicorn to the installed_apps in settings.py&lt;/p&gt;

&lt;p&gt;then&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ git commit -am &amp;quot;use gunicorn&amp;quot;
$ git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looking at your logs you will see it up and running&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku logs
2011-11-27T21:06:24+00:00 heroku[slugc]: Slug compilation started
2011-11-27T21:06:32+00:00 heroku[api]: Deploy 7b2eec1 by kencochrane@
2011-11-27T21:06:32+00:00 heroku[api]: Release v8 created by kencochrane@
2011-11-27T21:06:32+00:00 heroku[web.1]: State changed from created to starting
2011-11-27T21:06:35+00:00 heroku[web.1]: Starting process with command `python kenblog/manage.py run_gunicorn -b &amp;quot;0.0.0.0:4075&amp;quot; -w 3`
2011-11-27T21:06:36+00:00 app[web.1]: Validating models...
2011-11-27T21:06:37+00:00 heroku[web.1]: State changed from starting to up
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;running-django-celery-background-tasks-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Running django/celery background tasks on Heroku&lt;/h1&gt;

&lt;p&gt;Heroku offers you two types of processes, a web process and a worker
process. Web processes are used for serving web pages, etc. Worker
processes are used for items that run in the background. The heroku
tutorial goes over how to setup background task using celery and kombu
(&lt;a href=&#34;http://devcenter.heroku.com/articles/django&#34;&gt;http://devcenter.heroku.com/articles/django&lt;/a&gt;) if you want more info I
would check that out.&lt;/p&gt;

&lt;h1 id=&#34;serving-django-static-media-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Serving Django Static media on Heroku&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m not sure how to serve up static media on heroku, to get my app
working I just used the built in &amp;ldquo;django.views.static.serve&amp;rdquo; views for
now, this isn&amp;rsquo;t ideal and you would want a more permanent solution. A
more long term solution would be to push all static media into Amazon s3
and then use Amazon cloudfront to serve everything.&lt;/p&gt;

&lt;h1 id=&#34;uploading-files-to-heroku-with-django:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Uploading files to Heroku with Django&lt;/h1&gt;

&lt;p&gt;Heroku allows you to upload files to their app&amp;rsquo;s &amp;ldquo;Emphemeral
Filesystem&amp;rdquo;:
&lt;a href=&#34;http://devcenter.heroku.com/articles/dyno-isolation#ephemeral_filesystem&#34;&gt;http://devcenter.heroku.com/articles/dyno-isolation#ephemeral_filesystem&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Which the app can use as a temporary scratchpad, but no files it
writes are visible to any other &amp;ldquo;Each dyno gets its own ephemeral
filesystem, with a fresh copy of the most recently deployed code.
During its lifetime the dyno can use the filesystem as a temporary
scratchpad, but no files it writes are visible to any other dyno
(including other dynos in the application) and any files written will
be discarded the moment the dyno is stopped or restarted.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means you can&amp;rsquo;t use this space to store uploaded files, but it
should allow you to upload it there for a minute, and then send it over
to Amazon S3 for a more permant storage solution. You could use a tool
like Django Queued storage for this:
&lt;a href=&#34;https://github.com/jezdez/django-queued-storage&#34;&gt;https://github.com/jezdez/django-queued-storage&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;databases:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Databases&lt;/h1&gt;

&lt;p&gt;Heroku gives each app a 5MB shared postgresql database for FREE. If you
pay \$15/month you get upgraded to 20GB of space. They also offer
dedicated database instances if you need that. See this page for more
details. &lt;a href=&#34;http://www.heroku.com/pricing#0-0&#34;&gt;http://www.heroku.com/pricing#0-0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They also have a bunch of other addons (redis, mongodb, couchdb, amazon
RDS) that you should be able to tie into, see the addons page for a
complete list. &lt;a href=&#34;http://addons.heroku.com/&#34;&gt;http://addons.heroku.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;setting-up-django-caching-on-herku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Setting up Django Caching on Herku&lt;/h1&gt;

&lt;p&gt;To use memcache on Heroku, I went to the add-on page and installed the
free memcache addon. Once I did this I can run the heroku config command
to find out my config settings. I then use that information in my django
settings file so that I can have access to caching in my app.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku config
...
MEMCACHE_PASSWORD    =&amp;gt; xxxxxxxxxxxx
MEMCACHE_SERVERS     =&amp;gt; instance.hostname.net
MEMCACHE_USERNAME    =&amp;gt; xxxxxxxxxxxx
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They also offer redis if you prefer that.&lt;/p&gt;

&lt;h1 id=&#34;sending-email-from-django-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Sending Email from django on Heroku&lt;/h1&gt;

&lt;p&gt;If you need to send or receive email in your application there are a few
email add-ons that you can use. Pick the one you want and then run the
&amp;lsquo;heroku config&amp;rsquo; command described above to get your settings, and update
your django settings accordingly.&lt;/p&gt;

&lt;h1 id=&#34;application-size:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Application size&lt;/h1&gt;

&lt;p&gt;You application and all of it&amp;rsquo;s dependencies can&amp;rsquo;t be more then 100MB in
size.&lt;/p&gt;

&lt;h1 id=&#34;heroku-pricing:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Heroku Pricing&lt;/h1&gt;

&lt;p&gt;Directly from this page:
&lt;a href=&#34;http://devcenter.heroku.com/articles/how-much-does-a-dyno-cost&#34;&gt;http://devcenter.heroku.com/articles/how-much-does-a-dyno-cost&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dynos cost \$0.05 per hour, prorated to the second. For example, an app
with four dynos is charged \$0.20 per hour for each hour that the four
dynos are running.&lt;/p&gt;

&lt;p&gt;Pricing is based on calendar time. If you set your app to four dynos,
you will be charged \$0.20 per hour regardless of the traffic your site
serves during that time.&lt;/p&gt;

&lt;p&gt;Each application receives 750 free dyno hours per month. For example if
you have 1 web dyno running for all of April, and a worker dyno running
half the time you would have 330 dyno-hours billed that month or \$16.50
(720 web dyno hours + 360 worker dyno hours - 750 free dyno hours).&lt;/p&gt;

&lt;p&gt;See this page for more details: &lt;a href=&#34;http://www.heroku.com/pricing#0-0&#34;&gt;http://www.heroku.com/pricing#0-0&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;conclusion:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I haven&amp;rsquo;t really had much time to really play with Heroku, and stress
test it at all, but I have to say it is pretty impressive to begin with.
There are still some rough edges, but I&amp;rsquo;m sure they will have those
smoothed out before they remove the beta tag. The thing that impresses
me the most is all of the addons that you have access to out of the box.
I&amp;rsquo;m not sure how many of these work with the new platform, or with
django right now, but I&amp;rsquo;m sure it is only a matter of time before they
are available.&lt;/p&gt;

&lt;p&gt;I would highly recommend signing up and trying out their service, it is
free so what do you have to lose?&lt;/p&gt;

&lt;h2 id=&#34;update:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Update&lt;/h2&gt;

&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with
dotCloud a competitor to Heroku. I plan on keeping this blog post up to
date and impartial. If you think there are any errors, please let me
know in the comments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up Django with Green Unicorn, nginx, supervisord and fabric on CentOS 5.5</title>
      <link>http://www.kencochrane.net/blog/2011/06/django-gunicorn-nginx-supervisord-fabric-centos55/</link>
      <pubDate>Mon, 27 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2011/06/django-gunicorn-nginx-supervisord-fabric-centos55/</guid>
      <description>

&lt;p&gt;When I first started working with django I deployed my apps using apache
and mod_python. Then after a little while I started playing with nginx
and switched my setup so that nginx was serving the static content and
reverse proxied requests back to apache and mod_python. Not too long
after that, I switched out mod_python with mod_wsgi and ran mod_wsgi
in daemon mode.&lt;/p&gt;

&lt;p&gt;This setup worked well for a while, but one thing I never really liked
was the fact that I needed to run apache which is pretty heavy even when
you strip out all the unused modules. Apache is great, but all I was
really using it for was a router between nginx and mod_wsgi, I wasn&amp;rsquo;t
using any of the other features in apache.&lt;/p&gt;

&lt;p&gt;I looked at fastcgi and uswgi and they looked good, but for one reason
or another I never made the jump. Recently I have been hearing a lot of
good things about green unicorn, so I decided to check it out. When I
first looked at it, it was fairly new and because of this a little
concerned with stability, so I kept and eye on it and watched it mature.&lt;/p&gt;

&lt;p&gt;While I was waiting for green unicorn to mature I ended up doing a lot
of research on the &lt;a href=&#34;http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/&#34;&gt;new python hosting
services&lt;/a&gt;
that recently hit the market. Three out of the five services that I
looked were using green unicorn, the other two were using uWSGI.&lt;/p&gt;

&lt;p&gt;The fact that these three services are basing there new businesses on
green unicorn gave it a lot of credibility. Not too long after that I
started playing with green unicorn to see what it would take to get my
sites up and running.&lt;/p&gt;

&lt;p&gt;The first thing that I noticed was that I didn&amp;rsquo;t need to create a wsgi
file if I used their gunicorn_django command, which was pretty sweet.
The fact that they built it into the service shows you that django is a
first class citizen.&lt;/p&gt;

&lt;p&gt;The second thing that I noticed was that I needed a way to start up
green unicorn and keep it running, something that apache does for you
with mod_wsgi. I did a little bit of research and found out that
supervisord would work perfectly for what I needed to do with green
unicorn.&lt;/p&gt;

&lt;p&gt;Because seeing is better then reading, I&amp;rsquo;ll guide you throw the steps
that you will need to do in order to get your system setup in a way that
will make using green unicorn very easy, especially if you want to run
more then one website on your server. I&amp;rsquo;m going to use a 256MB rackspace
cloud instance running centos 5.5.&lt;/p&gt;

&lt;h1 id=&#34;create-a-rackspace-cloud-server:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Create a rackspace cloud server&lt;/h1&gt;

&lt;p&gt;Go into the rackspace cloud server management website and allocate
yourself a new 256MB CentOS 5.5 server or if you prefer do the same
thing using their API. Now that you have a server and the root password,
follow along step by step to get you system all setup.&lt;/p&gt;

&lt;h1 id=&#34;software-and-versions:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Software and versions&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;RackSpace Cloud Server 256MB&lt;/li&gt;
&lt;li&gt;CentOS 5.5&lt;/li&gt;
&lt;li&gt;Python 2.6.6&lt;/li&gt;
&lt;li&gt;nginx 1.0.4&lt;/li&gt;
&lt;li&gt;supervisord 3.0a10&lt;/li&gt;
&lt;li&gt;virtualenv 1.6.1&lt;/li&gt;
&lt;li&gt;pip 1.0.1&lt;/li&gt;
&lt;li&gt;gunicorn 0.12.2&lt;/li&gt;
&lt;li&gt;fabric 1.1.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;bitbucket-project:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Bitbucket project&lt;/h1&gt;

&lt;p&gt;To make things easier I have created a django bootstrap project
directory with all of the file used in the blog post. It is located
here, so feel free to clone and fork.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://bitbucket.org/kencochrane/django-gunicorn-nginx-supervisord-bootstrap/&#34;&gt;https://bitbucket.org/kencochrane/django-gunicorn-nginx-supervisord-bootstrap/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;login-to-server:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Login to server&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;ssh root@&amp;lt;RackSpaceIP&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;update-packages:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Update packages&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;yum -y update
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;install-packages:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Install packages&lt;/h1&gt;

&lt;p&gt;You might not need all of these right now, but I normally need these
down the line, so doing them all now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;yum -y install emacs readline-devel ncurses-devel libevent-devel glib2-devel libjpeg-devel freetype-devel bzip2 bzip2-devel bzip2-libs openssl-devel pcre pcre-devel gpg make gcc yum-utils unzip
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;add-a-django-user-as-a-system-user:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Add a django user as a system user&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;useradd -d /opt/django -m -r django
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;set-password-for-django-to-what-ever-you-want:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Set password for django to what ever you want&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;passwd django
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;setup-directories:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Setup directories&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;mkdir -p /opt/django
mkdir -p /opt/django/apps
mkdir -p /opt/django/logs
mkdir -p /opt/django/logs/nginx
mkdir -p /opt/django/logs/apps
mkdir -p /opt/django/configs
mkdir -p /opt/django/scripts
mkdir -p /opt/django/htdocs
mkdir -p /opt/django/tmp
mkdir -p /opt/django/configs/nginx
mkdir -p /opt/django/configs/supervisord
mkdir -p /opt/django/apps/my_app
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;add-blank-html-page:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Add blank html page&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;echo &amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;nothing here&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; &amp;quot; &amp;gt; /opt/django/htdocs/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;install-zlib:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Install Zlib&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# download from zlib.net
mkdir -p /tmp/downloads
cd /tmp/downloads
wget http://www.zlib.net/zlib-1.2.5.tar.gz
tar -xvzf zlib-1.2.5.tar.gz
cd zlib-1.2.5
./configure -s
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;install-python-2-6-6:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Install python 2.6.6&lt;/h1&gt;

&lt;p&gt;CentOS 5.5 doesn&amp;rsquo;t come with python2.6 pre installed so we need to do
that on our own.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;mkdir -p /tmp/downloads
cd /tmp/downloads
wget http://www.python.org/ftp/python/2.6.6/Python-2.6.6.tgz
tar -xvzf Python-2.6.6.tgz
cd Python-2.6.6
./configure --enable-shared
make
make altinstall
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;add-the-following-to-etc-profile:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Add the following to /etc/profile&lt;/h1&gt;

&lt;p&gt;We need to add the lib path to the LD_LIBRARY_PATH or else you will
get an error saying it can&amp;rsquo;t find libpython2.6.so.1.0&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib/:/usr/local/lib64/
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;source-the-new-profile:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Source the new profile&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;source /etc/profile
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;install-distribute:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Install distribute&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;mkdir -p /tmp/downloads
cd /tmp/downloads
curl -O http://python-distribute.org/distribute_setup.py
python2.6 distribute_setup.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;install-pip-virtualenv:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Install Pip &amp;amp; virtualenv&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;mkdir -p /tmp/downloads
cd /tmp/downloads
curl -O -k https://raw.github.com/pypa/pip/master/contrib/get-pip.py
python2.6 get-pip.py
pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;install-supervisor:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Install supervisor&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;pip install supervisor
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;install-mercurial:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Install mercurial&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;pip install mercurial
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;install-nginx:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Install NGINX&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;mkdir -p /tmp/downloads
cd /tmp/downloads
wget http://nginx.org/download/nginx-1.0.4.tar.gz
tar -xzvf nginx-1.0.4.tar.gz
cd nginx-1.0.4
./configure --sbin-path=/usr/local/sbin --with-http_ssl_module --with-http_stub_status_module
make
/etc/init.d/nginx stop
sleep 2
sudo make install
sudo chmod +x /usr/local/sbin/nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;install-my-app:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Install my app&lt;/h2&gt;

&lt;h1 id=&#34;add-first-virtualenv:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Add first virtualenv&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;cd /opt/django/apps/my_app/
virtualenv --distribute --no-site-packages v0.1

# make this a post_create hook?
touch /opt/django/apps/my_app/v0.1/.venv

cd /opt/django/apps/my_app/v0.1/
hg clone https://bitbucket.org/kencochrane/django-gunicorn-nginx-supervisord-bootstrap my_app

ln -s /opt/django/apps/my_app/v0.1 /opt/django/apps/my_app/current

ln -s /opt/django/apps/my_app/current/my_app/conf/nginx.conf /opt/django/configs/nginx/myapp.conf

ln -s /opt/django/apps/my_app/current/my_app/conf/supervisord.conf /opt/django/configs/supervisord/myapp.conf

# activate the ve
source /opt/django/apps/my_app/current/bin/activate
cd /opt/django/apps/my_app/current/my_app/
./bootstrap.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;configure-nginx:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Configure nginx&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# as root
mkdir -p /etc/nginx
ln -s /opt/django/apps/my_app/current/my_app/server/etc/nginx.conf /etc/nginx/nginx.conf
ln -s /usr/local/nginx/conf/mime.types /etc/nginx/mime.types
ln -s /opt/django/apps/my_app/current/my_app/server/init.d/nginx /etc/init.d/nginx
chmod 755 /etc/init.d/nginx
chkconfig --add nginx
chkconfig nginx on
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;configure-supervisord:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Configure Supervisord&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# as root
ln -s /opt/django/apps/my_app/current/my_app/server/etc/supervisord.conf  /etc/supervisord.conf
ln -s /opt/django/apps/my_app/current/my_app/server/init.d/supervisord /etc/init.d/supervisord
chmod 755 /etc/init.d/supervisord
chkconfig --add supervisord
chkconfig supervisord on
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;firewall:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Firewall&lt;/h1&gt;

&lt;p&gt;We need to open up the firewall so that we are allowed connection, if
you don&amp;rsquo;t know anything about this, check out these links.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cloudservers.rackspacecloud.com/index.php/Firewalls&#34;&gt;http://cloudservers.rackspacecloud.com/index.php/Firewalls&lt;/a&gt;
&lt;a href=&#34;http://cloudservers.rackspacecloud.com/index.php/Introduction_to_iptables&#34;&gt;http://cloudservers.rackspacecloud.com/index.php/Introduction_to_iptables&lt;/a&gt;
&lt;a href=&#34;http://cloudservers.rackspacecloud.com/index.php/Sample_iptables_ruleset&#34;&gt;http://cloudservers.rackspacecloud.com/index.php/Sample_iptables_ruleset&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# Open http port 80
iptables -I RH-Firewall-1-INPUT -p tcp --dport 80 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;bashrc-file-changes:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;.bashrc file changes&lt;/h1&gt;

&lt;p&gt;I can&amp;rsquo;t remember where I saw this little trick, if you know please let
me know so that I can give them credit. If you put a file in your
mercurial directory called .venv, when you cd into the directory this
little bash hack will automatically activate your virtual environment
for you. This allows you to have something similar to virtualenvwrapper
in this custom setup.&lt;/p&gt;

&lt;p&gt;Add this code to the .bashrc file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;emacs /opt/django/.bashrc
#
# User specific aliases and functions
has_virtualenv() {
    if [ -e .venv ]; then
        deactivate &amp;gt;/dev/null 2&amp;gt;&amp;amp;1
        source bin/activate
    fi
}

venv_cd () {
    cd &amp;quot;$@&amp;quot; &amp;amp;&amp;amp; has_virtualenv
}

alias cd=&amp;quot;venv_cd&amp;quot;

#end of changes

# source the file to get new changes in active shell
source /opt/django/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;change-permissions-of-the-django-home-directory-to-django:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Change permissions of the django home directory to django&lt;/h1&gt;

&lt;p&gt;This cleans up and left over root ownership&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;chown -R django:django /opt/django/*
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;switch-to-django-user:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Switch to django user&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;su - django
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;start-up-nginx:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Start up nginx&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;service nginx start
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;startup-supervisord:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Startup supervisord&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;service supervisord start
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;test-nginx-and-supervisord:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Test Nginx and supervisord&lt;/h1&gt;

&lt;p&gt;Check supervisord status&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;supervisorctl status
my_app                           RUNNING    pid 13594, uptime 0:00:05
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To check nginx go to the IP or domain name for your rackspace server in
your browser and make sure it worked.&lt;/p&gt;

&lt;h1 id=&#34;updating-the-application-using-fabric:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Updating the application using fabric&lt;/h1&gt;

&lt;p&gt;Inside of the bitbucket project directory there is a file called
fabfile.py. This file will allow you to update the application from your
machine whenever you want just by calling one command.&lt;/p&gt;

&lt;p&gt;It will prompt you for your hostname and password for the django user.
Then it will go out to the rackspace server and pull and update the app
and restart the application in supervisord. It is very basic for right
now, but should get you started if you want to do more advanced stuff.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;fab update_server
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;conclusion:c618fab5154c76fcdb1f622089e4dd3f&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Now that we have everything setup, if you want to add a new application
to our setup all we need to do is.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a new directory under apps&lt;/li&gt;
&lt;li&gt;create the virtualenv&lt;/li&gt;
&lt;li&gt;run the bootstrap to install the software&lt;/li&gt;
&lt;li&gt;make sure that the application has a supervisord and nginx
configuration file&lt;/li&gt;
&lt;li&gt;symlink those files to the correct locations in the config directory&lt;/li&gt;
&lt;li&gt;run any python management commands you might need to run (syncdb,
migrate, etc)&lt;/li&gt;
&lt;li&gt;reload supervisord and nginx&lt;/li&gt;
&lt;li&gt;you should be good to go.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope this was helpful to someone besides myself, if it was helpful for
you please let me know in the comments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Django Hosting Roundup: (Ep.io vs Gondor.io vs DotCloud vs Heroku vs AppHosted vs DjangoZoom) Who wins?</title>
      <link>http://www.kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/</link>
      <pubDate>Mon, 06 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/</guid>
      <description>

&lt;h1 id=&#34;updates:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Updates&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Updated 2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a
job with dotCloud. I plan on keeping this blog post up to date
and impartial. If you think there are any errors, please let me know
in the comments below.&lt;/li&gt;
&lt;li&gt;Updated 1/26/2012: Updated Gondor.io with info from Donald Stufft.&lt;/li&gt;
&lt;li&gt;Updated 01/24/2012: changed gondor.io to include SSL support&lt;/li&gt;
&lt;li&gt;Updated 01/01/2012: Added Heroku and updated ep.io, gondor.io,
and dotcloud.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;intro:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;For the past 6 weeks I have been trying out all of the new django/python
hosting services that are currently available today, and I have been
writing about my experiences along the way. It only makes sense to
conclude this series of articles with one last article comparing all of
the services against each other. It is important to note that many of
these services are still in development and aren&amp;rsquo;t even available to the
general public, so I&amp;rsquo;ll try to keep this article up to date as these
services change over time. With that said, don&amp;rsquo;t take my word for it, go
out and try all of these services on your own and find out which one you
like the best, you won&amp;rsquo;t be disappointed.&lt;/p&gt;

&lt;h1 id=&#34;quick-recap:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Quick Recap&lt;/h1&gt;

&lt;h2 id=&#34;ep-io:bcec1efcbef3921a30bfadad97f88500&#34;&gt;ep.io&lt;/h2&gt;

&lt;p&gt;Blog post: &lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-experiences-with-epio/&#34;&gt;My Experiences with
ep.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty solid offering, with a nice set of features and a decent price.
Good set of documentation.&lt;/p&gt;

&lt;p&gt;[&lt;strong&gt;Update&lt;/strong&gt;: Epio closed down on May 31st 2012 ]&lt;/p&gt;

&lt;h2 id=&#34;gondor-io:bcec1efcbef3921a30bfadad97f88500&#34;&gt;gondor.io&lt;/h2&gt;

&lt;p&gt;Blog post: &lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-day-gondorio/&#34;&gt;My day in
gondor.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Their website has a nice list of features that they expect to have once
they officially launch, but most of those features aren&amp;rsquo;t available yet.
The documentation is a little light, but the service has a lot of
potential.&lt;/p&gt;

&lt;h2 id=&#34;dotcloud-com:bcec1efcbef3921a30bfadad97f88500&#34;&gt;dotCloud.com&lt;/h2&gt;

&lt;p&gt;Blog post: &lt;a href=&#34;http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/&#34;&gt;Deploying my Django application to
dotcloud.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They have a ton of money ($10M), and with it, a ton of features. They
are very developer friendly, but you need to be pretty technical, it
isn&amp;rsquo;t quite ready for beginners. Good set of documentation.&lt;/p&gt;

&lt;p&gt;[&lt;strong&gt;Full disclosure&lt;/strong&gt;: I now work for dotCloud]&lt;/p&gt;

&lt;h2 id=&#34;apphosted-com:bcec1efcbef3921a30bfadad97f88500&#34;&gt;AppHosted.com&lt;/h2&gt;

&lt;p&gt;Blog post: &lt;a href=&#34;http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/&#34;&gt;apphosted.com Django Hosting
Review&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Built with security, stability and scalability on their mind from the
beginning. They have a solid offering, and they look to be targeting
enterprise customers who will pay more for that peace of mind. They are
currently lacking some key features, which I&amp;rsquo;m sure they will be adding
soon. Good set of documentation.&lt;/p&gt;

&lt;h2 id=&#34;djangozoom-com:bcec1efcbef3921a30bfadad97f88500&#34;&gt;DjangoZoom.com&lt;/h2&gt;

&lt;p&gt;Blog post: &lt;a href=&#34;http://kencochrane.net/blog/2011/06/djangozoom-com-review/&#34;&gt;DjangoZoom.com
Review&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Built to be fast and easy to use, still missing some key features, but
I&amp;rsquo;m sure they will be available by the time they go live. Decent amount
of documentation.&lt;/p&gt;

&lt;h2 id=&#34;heroku-com:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Heroku.com&lt;/h2&gt;

&lt;p&gt;Blog post: &lt;a href=&#34;http://kencochrane.net/blog/2011/11/developers-guide-for-running-django-apps-on-heroku/&#34;&gt;Developers guide for running django apps on
Heroku&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Originally built as a Ruby on Rails service, they have now added support
for python. The service is still in beta, but it has a lot of potential.
It looks a lot like what dotCloud is offering, with the ability to run
code from almost any language, and a ton of different add-ons for lots
of different services.&lt;/p&gt;

&lt;h1 id=&#34;awards:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Awards&lt;/h1&gt;

&lt;h2 id=&#34;fastest-deployments:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Fastest Deployments:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://DjangoZoom.com&#34;&gt;DjangoZoom.com&lt;/a&gt; - Zoom is right, it doesn&amp;rsquo;t take
long to configure your application and have it up and running on their
servers.&lt;/p&gt;

&lt;h2 id=&#34;easiest-to-use:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Easiest To Use:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://DjangoZoom.com&#34;&gt;DjangoZoom.com&lt;/a&gt; - No command line interface
needed, just a web browser, a project in a git repo that it has access
too, and a few questions answered and your app is up and running.&lt;/p&gt;

&lt;h2 id=&#34;most-features:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Most Features:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://dotcloud.com&#34;&gt;dotCloud.com&lt;/a&gt; - They raised \$10 Million, and they
are spending it on hiring people, buying companies, and building
services. They have a bunch of services currently and they don&amp;rsquo;t plan on
stopping, their roadmap has everything on it, and I think if you give
them enough time they will eventually have a service for everything.&lt;/p&gt;

&lt;h2 id=&#34;most-developer-friendly:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Most Developer Friendly:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://dotcloud.com&#34;&gt;dotCloud.com&lt;/a&gt; - They give lots of features without
handcuffing the developer. They are the only company with full database
and shell access. They do a good job of offering the same type of
service a developer could get if they built it themselves.&lt;/p&gt;

&lt;h2 id=&#34;best-overall-value:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Best Overall Value:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ep.io&#34;&gt;ep.io&lt;/a&gt; - This one is hard since most of the services
don&amp;rsquo;t have any pricing listed, but currently ep.io is in the lead, they
offer reasonable prices with a nice Free tier. This allows developers to
try out the service for FREE, as well as run smaller pet projects that
they might not have tried before because they didn&amp;rsquo;t want to pay for
hosting. They have the second most features available, second to only
dotCloud, and there service is pretty solid.&lt;/p&gt;

&lt;h2 id=&#34;easiest-project-setup:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Easiest Project Setup:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://apphosted.com&#34;&gt;apphosted.com&lt;/a&gt; - Their goal was to make it real
easy to get your project up onto their servers without having to change
your project, and they did that, there was very little if any changes I
needed to make in order to get my application up on their servers.&lt;/p&gt;

&lt;h1 id=&#34;django-feature-hosting-matrix:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Django Feature Hosting Matrix&lt;/h1&gt;

&lt;p&gt;To make things easier when comparing all of the different services I
have built this matrix with all of the information I compiled from each
of the services. I don&amp;rsquo;t know the answers for all services, but I&amp;rsquo;ll
update it when I find out those answers. If you know the answers feel
free to post a comment to let me know.&lt;/p&gt;

&lt;p&gt;I have included all of the new django services as well as google app
engine and webfaction.com, a tradition hosting service. This should make
it a little easier to see how these new services compare to other
hosting options.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Chart removed since it was out of date]&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;who-wins:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Who wins?&lt;/h1&gt;

&lt;p&gt;It is really hard to pick just one winner, mainly because most of these
services are still in beta and not quite finished yet. Also because each
service is a little different, and it will depend on what you are trying
to do. So, go out try them out, and let me know which one you picked.&lt;/p&gt;

&lt;p&gt;The real winner is us, the developers, and the python community in
general. We now have a bunch of really cool services that will make our
lives better, and that is awesome.&lt;/p&gt;

&lt;h1 id=&#34;thank-you:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Thank you!&lt;/h1&gt;

&lt;p&gt;I want to thank all of the people who made these services, and gave me
early access to their systems so that I could play around with them. I
wish them the best of luck, and hope they all are really successful, and
they are around for a long time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DjangoZoom.com Review</title>
      <link>http://www.kencochrane.net/blog/2011/06/djangozoom-com-review/</link>
      <pubDate>Sun, 05 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2011/06/djangozoom-com-review/</guid>
      <description>

&lt;p&gt;This is part five in my series on django hosting services. Previously, I
looked at
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-experiences-with-epio/&#34;&gt;ep.io&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/&#34;&gt;apphosted.com&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-day-gondorio/&#34;&gt;gondor.io&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/&#34;&gt;dotcloud.com&lt;/a&gt;
and now I&amp;rsquo;m looking at &lt;a href=&#34;http://DjangoZoom.com&#34;&gt;DjangoZoom.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;DjangoZoom.com is the brain child of Nate Aune and Shimon Rura and is
based in Boston, Massachusetts. It was founded in 2010 at
&lt;a href=&#34;http://startupweekend.org/&#34;&gt;StartupWeekend Boston&lt;/a&gt; and was a finalist
in the &lt;a href=&#34;http://www.masschallenge.org/&#34;&gt;MassChallenge&lt;/a&gt;. Their office is
in the &lt;a href=&#34;http://dogpatchlabs.com/&#34;&gt;Dogpatch Labs&lt;/a&gt; space for startups in
Cambridge, Massachusetts. They are currently still in a closed beta, but
they were nice enough to send me an invite to check it out.&lt;/p&gt;

&lt;p&gt;Normally when I check out a service for the first time, I look over the
documentation to see what it can do, and what it can&amp;rsquo;t do, and what I
need to do in order to get my app up and running. DjangoZoom has a nice
collection of documents that help guide you through the process of
getting your application up and running on their platform. You need to
be logged in, in order to read the documents, so I won&amp;rsquo;t be able to link
to any documents here, but if you are lucky enough to get an invite to
DjangoZoom, I would check out the documents first, they will make the
process much easier. They answer most of the common questions that you
will have, and if you can&amp;rsquo;t find your answer you can send them a message
and they are very fast to respond.&lt;/p&gt;

&lt;p&gt;After reading the documents I learned a few things. First off,
DjangoZoom is a little different then the other services, all of the
previous services that I have reviewed ep.io, dotcloud, apphosted,
gondor.io, had a command line client that you use to push your
application up onto their servers.&lt;/p&gt;

&lt;p&gt;DjangoZoom doesn&amp;rsquo;t have a command line client at all, they only have a
web based control panel that you use to install and configure your
application. Also, instead of pushing your application code up on to
their servers, they pull the code down from your code repository at
build time. Most of the other services try and make it so that you can
run any python/wsgi based application, where as DjangoZoom, is only
supporting Django applications.&lt;/p&gt;

&lt;p&gt;Not having a command line client has it&amp;rsquo;s pros and cons. The main
advantage of not having a command line client is simplicity. No need to
install anything on your machine in order to deploy your code, all you
need is a web browser. You can deploy your code from anywhere you have
an internet connection. Making the application deployment as easy as
possible will open up their service to people that are less technical,
and might not be comfortable installing a command line client and
running commands. The disadvantages of using just a web based console is
that you are limited to what you can do in a browser. This is going to
be less and less of an issue going forward as web browsers are getting
more and more powerful all of the time. Also, just because they only
offer a web based console now, doesn&amp;rsquo;t mean they can&amp;rsquo;t add a command
line client later.&lt;/p&gt;

&lt;p&gt;Just like all of the other reviews I&amp;rsquo;m going to test out the system by
deploying my blog onto their system and see how it goes. My blog is
currently hosted on bitbucket.org which uses mercurial, and currently
djangozoom.com only offers support for git. In order to use
djangozoom.com I needed to make a fork of my blog and put it on github.
You can find my fork here:
&lt;a href=&#34;https://github.com/kencochrane/kencochrane_blog&#34;&gt;https://github.com/kencochrane/kencochrane_blog&lt;/a&gt; . They recommend
github for git hosting, but you can use just about any git repo that is
publicly accessible. If you have a private git repo, and you are on
github just add the user djangozoom as a collaborator on your project.
If you aren&amp;rsquo;t on github and you have a private repo, you can add their
public key to your repo, and it will give them permission to access your
git repository from their servers.&lt;/p&gt;

&lt;h1 id=&#34;install-process:927af003b7c8858a42469bacd2525b8a&#34;&gt;Install Process&lt;/h1&gt;

&lt;p&gt;Once I had my code up on github I needed to make a few changes in order
for it to work correctly, nothing major just needed to make my
settings.py file a little more standard, which was pretty typical for
the other services as well. Now that I had that done, I was ready to
login to DjangoZoom and setup my application. Registering and logging
into DjangoZoom was pretty straight forward, it was the same process as
most online services, so just about anyone could do it with their eyes
closed.&lt;/p&gt;

&lt;p&gt;After I logged in, I was able to add my application, here are the steps
that I took to get my application up and running.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Clicked on &amp;ldquo;add a new project&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Put in repo url: &lt;a href=&#34;git://github.com/kencochrane/kencochrane_blog.git&#34;&gt;git://github.com/kencochrane/kencochrane_blog.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Only SSH authentication is supported, so use either an
unauthenticated public URL, or an SSH url (e.g.
&lt;a href=&#34;mailto:git@github.com&#34;&gt;git@github.com&lt;/a&gt;:yourname/project.git. On github.org, use the Git
Read-Only URL if your repo is public, or the SSH URL if private.)&lt;/p&gt;

&lt;p&gt;Hit Next.&lt;/p&gt;

&lt;p&gt;Entered my title &amp;ldquo;kencochrane_blog&amp;rdquo;&lt;/p&gt;

&lt;p&gt;selected django 1.3&lt;/p&gt;

&lt;p&gt;settings module : mysite.settings&lt;/p&gt;

&lt;p&gt;static media location : &amp;ldquo;static /site-media&amp;rdquo;&lt;/p&gt;

&lt;p&gt;no additional directories to add to python path&lt;/p&gt;

&lt;p&gt;put in my requirements.txt file, so that it knows where to find my pip
requirements. You don&amp;rsquo;t need to do this, djangozoom will scan your
projects and find this out for you, but it didn&amp;rsquo;t work for me, I have
an issue with my application that I wasn&amp;rsquo;t able to find, and it was
causing issues with their autoscanner. I think this is more my fault
then theirs.&lt;/p&gt;

&lt;p&gt;not putting in any extra requirements.&lt;/p&gt;

&lt;p&gt;base(repo) python package: put mysite.settings because my settings.py
and root urls.py are at the top level of your repository. normally I
don&amp;rsquo;t do this, but I was following the example of this repo
&lt;a href=&#34;https://github.com/natea/mezzanine-site&#34;&gt;https://github.com/natea/mezzanine-site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Checked the &amp;ldquo;ready to roll, deploy my project now&amp;rdquo; check box and hit
next&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At first I had some errors with my requirements, I needed to remove
django and mysql and update the python-twitter lib. Once I did that, it
worked like a charm. The whole deploy process only took 2 minutes and 45
seconds.&lt;/p&gt;

&lt;p&gt;Wow that was fast, pretty impressive considering it needed to pull down
all of the code from github, and download a ton of dependencies, and
then do what ever it needs to do to set it up on to their servers. After
talking with them about this, they said they hope to get it even faster,
which would be pretty impressive.&lt;/p&gt;

&lt;p&gt;Now that I have my app deployed I can change some of the settings.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I created an alias to for my app to
&lt;a href=&#34;http://kencochrane.djangozoom.net&#34;&gt;http://kencochrane.djangozoom.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also add a hostname like kencochrane.net.&lt;/p&gt;

&lt;p&gt;you can add a wildcard hostname as well. *.kencochrane.net.&lt;/p&gt;

&lt;p&gt;You can create a django superuser.&lt;/p&gt;

&lt;p&gt;You can also run any of your manage.py commands right from the web
console.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This whole process was pretty straight forward and didn&amp;rsquo;t take long to
complete. Now that I have done it with one application, it will be much
easier for the next one.&lt;/p&gt;

&lt;h1 id=&#34;cool-feature-request:927af003b7c8858a42469bacd2525b8a&#34;&gt;Cool Feature Request&lt;/h1&gt;

&lt;p&gt;Currently DjangoZoom makes it really easy to deploy your application to
their servers. What would be cool is if they would make it easy to
deploy common django applications to their service. For example on their
blog they have a video to show how easy it is to &lt;a href=&#34;http://djangozoom.com/blog/2011/03/15/deploying-django-cms-45-seconds-djangozoom/&#34;&gt;deploy django-cms to
DjangoZoom&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the video it shows them going out to github, forking and copying the
link to the project, and then making some minor changes on the
djangozoom settings page to get it to work correctly, and then it
deploys. These steps weren&amp;rsquo;t complicated but you needed to know what to
do in order to get it to work. What if they made this a one step
process?&lt;/p&gt;

&lt;p&gt;Click on a &amp;ldquo;install django-cms&amp;rdquo; link, and then their service would do
what it needs to do to get it up and running on their service, and then
returns you to a page where you can configure the app, add a django
admin user, change the url, etc. That would allow someone who doesn&amp;rsquo;t
know anything about django an easy way to get a django-cms based website
in no time. They could add one click installs for all kinds of common
django projects, and expand outside of the developer community, which
would expand their customer base. Those customers are the ones that
really don&amp;rsquo;t want to worry about server deploys and server management,
and they are the ones that will pay more for those features.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m sure this feature isn&amp;rsquo;t on their roadmap, but I just thought I would
throw it out there and see what people have to say about it.&lt;/p&gt;

&lt;h1 id=&#34;djangozoom-com-status:927af003b7c8858a42469bacd2525b8a&#34;&gt;DjangoZoom.com status&lt;/h1&gt;

&lt;p&gt;DjangoZoom is still in closed beta, which means they are not done with
it yet, and there may be some occasional bugs that pop up here and
there, but that is expected. Another thing about a beta is that not all
of the features are finished yet. So before you jump in and try and get
your application up and running, check and make sure that your
application can run correctly on the service with the features they have
available so far. Here is a run down of all the different features your
application might need and where they stand in DjangoZoom today.&lt;/p&gt;

&lt;h2 id=&#34;logging:927af003b7c8858a42469bacd2525b8a&#34;&gt;Logging&lt;/h2&gt;

&lt;p&gt;You currently can&amp;rsquo;t view your django or nginx logs at this time, they
are working on this feature and hope to have it so that you can view
your logs in the web based console in the future. In the meantime you
can use a tool like django-sentry to view your django-logs.&lt;/p&gt;

&lt;h2 id=&#34;ssl:927af003b7c8858a42469bacd2525b8a&#34;&gt;SSL&lt;/h2&gt;

&lt;p&gt;Not available yet.&lt;/p&gt;

&lt;h2 id=&#34;caching:927af003b7c8858a42469bacd2525b8a&#34;&gt;Caching&lt;/h2&gt;

&lt;p&gt;They currently don&amp;rsquo;t support a caching server, they want to make sure
they set it up correctly so that it is reliable and so that it is
secure. In the meantime you can use django local memory caching.&lt;/p&gt;

&lt;h2 id=&#34;database:927af003b7c8858a42469bacd2525b8a&#34;&gt;Database&lt;/h2&gt;

&lt;p&gt;They support PostgreSQL 8.4, if you are using mysql you will need to
convert your app to support PostgreSQL. Since the Django ORM handles
this by default, this shouldn&amp;rsquo;t be a big deal unless you did something
custom. No direct database access available. Loading data into system
only supported by using django dumpdata/loaddata&lt;/p&gt;

&lt;h2 id=&#34;background-tasks:927af003b7c8858a42469bacd2525b8a&#34;&gt;Background tasks&lt;/h2&gt;

&lt;p&gt;Not available yet, celery support possible in the future.&lt;/p&gt;

&lt;h2 id=&#34;cronjobs:927af003b7c8858a42469bacd2525b8a&#34;&gt;Cronjobs&lt;/h2&gt;

&lt;p&gt;Not supported, they recommend &lt;a href=&#34;http://packages.python.org/APScheduler/&#34;&gt;Advanced Python
Scheduler&lt;/a&gt; or
&lt;a href=&#34;https://github.com/reavis/django-cron&#34;&gt;django-cron&lt;/a&gt; which should run on
their system.&lt;/p&gt;

&lt;h2 id=&#34;shell-access:927af003b7c8858a42469bacd2525b8a&#34;&gt;Shell Access&lt;/h2&gt;

&lt;p&gt;Not supported&lt;/p&gt;

&lt;h2 id=&#34;api:927af003b7c8858a42469bacd2525b8a&#34;&gt;API&lt;/h2&gt;

&lt;p&gt;Not available yet, one planned for the future.&lt;/p&gt;

&lt;h2 id=&#34;command-line-client:927af003b7c8858a42469bacd2525b8a&#34;&gt;Command line client&lt;/h2&gt;

&lt;p&gt;Not available yet, one planned for the future. Use the web base control
panel.&lt;/p&gt;

&lt;h2 id=&#34;version-control:927af003b7c8858a42469bacd2525b8a&#34;&gt;Version control&lt;/h2&gt;

&lt;p&gt;Currently only supports git.&lt;/p&gt;

&lt;h2 id=&#34;videos:927af003b7c8858a42469bacd2525b8a&#34;&gt;Videos&lt;/h2&gt;

&lt;p&gt;Here are some videos of the DjangoZoom.com deployment process.&lt;/p&gt;

&lt;p&gt;&lt;p&gt;&lt;iframe title=&#34;YouTube video player&#34; width=&#34;480&#34; height=&#34;390&#34; src=&#34;http://www.youtube.com/embed/NCQxqw94Cgs&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;iframe title=&#34;YouTube video player&#34; src=&#34;http://www.youtube.com/embed/DSe6R1ByS5k&#34; width=&#34;480&#34; frameborder=&#34;0&#34; height=&#34;390&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion:927af003b7c8858a42469bacd2525b8a&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I really enjoyed playing with DjangoZoom, it is quick and easy to use,
it is still missing some key features that some people will need, but
I&amp;rsquo;m sure they will add those soon enough. I wish them luck, and I can&amp;rsquo;t
wait to see them go live to the general public.&lt;/p&gt;

&lt;h1 id=&#34;update:927af003b7c8858a42469bacd2525b8a&#34;&gt;Update:&lt;/h1&gt;

&lt;p&gt;Read how this service stacks up against other services like it in my
&lt;a href=&#34;http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/&#34;&gt;Django hosting
roundup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with
dotCloud a competitor to DjangoZoom. I plan on keeping this blog post up
to date and impartial. If you think there are any errors, please let me
know in the comments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AppHosted.com Django Hosting Service Review</title>
      <link>http://www.kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/</link>
      <pubDate>Wed, 18 May 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/</guid>
      <description>

&lt;p&gt;This post is the fourth in my series about the new Django hosting
services that just recently hit the market. Previously I have reviewed
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-experiences-with-epio/&#34;&gt;ep.io&lt;/a&gt; ,
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-day-gondorio/&#34;&gt;gondor.io&lt;/a&gt; , and
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/&#34;&gt;dotCloud.com&lt;/a&gt;
.This post reviews &lt;a href=&#34;http://AppHosted.com&#34;&gt;AppHosted.com&lt;/a&gt; , another
similar service that is currently in beta. I was lucky enough to get a
sneak peak of this service before it was released to the general public,
and here are my notes and impressions for the short time I had to play
with the new service.&lt;/p&gt;

&lt;h1 id=&#34;overview:fd2d20709a7d24937bf602503a235c47&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://AppHosted.com&#34;&gt;AppHosted.com&lt;/a&gt; uses a similar concept as the
other django hosting services, they provide you with a command line
client called metro that you use to interact with the service. Like the
other command line clients, it is pretty much just a nice wrapper around
their API, so anything you can do with the metro client you can do with
their API. The client is used to configure your service and push your
files up into their servers. Once the application is created and your
code has been uploaded to their server, you can use their web based
control panel to configure or manage your application.&lt;/p&gt;

&lt;p&gt;So that we can compare apples to apples I will go through the process of
installing my blog onto the service so that we can see how it works with
apphosted compared to the other services. It will also hopefully provide
a very simple how to guide on how to install your application onto
AppHosted.com.&lt;/p&gt;

&lt;h1 id=&#34;first-steps:fd2d20709a7d24937bf602503a235c47&#34;&gt;First Steps&lt;/h1&gt;

&lt;p&gt;Like all new projects the first thing that I like to do is create a new
project directory and a new virtual environment for the project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# move into my projects directory
$ cd ~projects/

# make my virtual environment apphosted
$ mkvirtualenv apphosted

# clone my blog
$ hg clone https://bitbucket.org/kencochrane/kencochranenet kencochrane_apphosted

# move into the new project directory
$ cd kencochrane_apphosted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that I have a local working copy of my blog code and a new virtual
environment I&amp;rsquo;m ready to go.&lt;/p&gt;

&lt;h1 id=&#34;command-line-interface:fd2d20709a7d24937bf602503a235c47&#34;&gt;Command Line Interface&lt;/h1&gt;

&lt;p&gt;AppHosted has a command line client called Metro, it uses this client to
configure and upload your application onto the apphosted servers. Metro
only has three dependencies: httplib2, paramiko, and pycrypto, if you
don&amp;rsquo;t have them installed pip should handle that for you.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# install the metro client
$ pip install metroclient

Downloading/unpacking metroclient
Running setup.py egg_info for package metroclient
Requirement already satisfied (use --upgrade to upgrade): httplib2 in /Users/ken/.virtualenvs/apphosted/lib/python2.6/site-packages (from metroclient)
Requirement already satisfied (use --upgrade to upgrade): paramiko in /Library/Python/2.6/site-packages (from metroclient)
Requirement already satisfied (use --upgrade to upgrade): pycrypto&amp;gt;=1.9 in /Library/Python/2.6/site-packages (from paramiko-&amp;gt;metroclient)
Installing collected packages: metroclient
Running setup.py install for metroclient
changing mode of build/scripts-2.6/metro from 644 to 755
changing mode of /Users/ken/.virtualenvs/apphosted/bin/metro to 755
Successfully installed metroclient
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;initial-data-django-admin-user:fd2d20709a7d24937bf602503a235c47&#34;&gt;Initial Data &amp;amp; Django admin user&lt;/h1&gt;

&lt;p&gt;At the moment Apphosted.com doesn&amp;rsquo;t provide an easy way to create a
django admin user, in order to create this user in your appHosted.com
database you need to create it on a local database and then export that
data into a fixture called initial_data.json.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# locally I run this command to dump the data, so that I can load on app hosted.
$ python manage.py dumpdata &amp;gt; initial_data.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is another way to create the django admin user, which I&amp;rsquo;ll
describe a little later. This would also be the same way that you would
import any application data that you need in order for your application
to run correctly.&lt;/p&gt;

&lt;h1 id=&#34;metro-client:fd2d20709a7d24937bf602503a235c47&#34;&gt;Metro Client&lt;/h1&gt;

&lt;p&gt;One of the goals for appHosted.com was that they didn&amp;rsquo;t want to require
that you make lots of changes to your project directory structure in
order to use their service. In order to do this they need to do a lot
more work to figure out what it is you want to do, and if they can&amp;rsquo;t
figure it out, they will ask you some questions.&lt;/p&gt;

&lt;p&gt;Now that we have our project directory and our initial_data.json file
all ready, lets go ahead and deploy the application. Activate the
virtual environment and go into your project directory. Kick off the
metro client and answer the questions that pop up.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# run the metro client.
$ metro

Metro Application Manager 1.21
Copyright (c) Lumentica,  http://www.lumentica.com

Application directory (i.e. path to project): ./
Application name: kencochraneblog
Application version: 0.1
Application description: Ken&#39;s AppHosted Blog
Application modules (extra; comma-separated): South==0.7.3, django-activitysync==0.2.2, django-debug-toolbar==0.8.4, django-disqus==0.3.4, django-memcache-status==1.0.1, django-tagging==0.3.1, django-xmlrpc==0.1.2, feedparser==4.1, httplib2==0.6.0, oauth2==1.2.0, python-memcached==1.47, python-twitter==0.8.1, simplejson==2.1.2, wsgiref==0.1.2, yolk==0.4.1, docutils==0.6, Pygments==1.3.1
WSGI module (optional):
Paste config (optional):
Fixtures (optional; comma-separated):
Sync database and load fixtures? (y/n): y
Use SSL? (y/n): n
Force SSL: (y/n): n
Build complete.
Upload to AppHosted? (y/n): y
AppHosted Username: kencochrane
AppHosted Password:
Deploying...
:: Configuring application environment...
:: Configuring application permissions...
:: Configuring application server...
:: Application deployed to server successfully...
:: Application deployment complete...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What did this do for us? It takes our application, and uploads it to
their server, and then it installs all of our dependencies that we
listed above. Then it configures it according to our answers, and tries
to start it up, if we told it to, it will sync our database and load our
fixtures. It also takes all of this information and stores it in a file
called metro.config, so that we don&amp;rsquo;t need to type that in every time if
nothing has changed.&lt;/p&gt;

&lt;p&gt;You might have noticed that I needed to manually enter in all of my
dependencies when prompted, when I asked about this, I was told that if
I didn&amp;rsquo;t enter all of the dependencies it would scan the project for a
pip style requirements.txt file, and use that to load all of your
dependencies. I haven&amp;rsquo;t had a chance to test that out yet, since I
already entered my requirements by hand, and once you do it, you don&amp;rsquo;t
need to do it again.&lt;/p&gt;

&lt;p&gt;My blog uses south for migration management, and at the time of this
writing there is a bug, and it isn&amp;rsquo;t correctly kicking off the migrate
command during the database sync process. They are aware of the issue
and they are working on a fix, but there is a work around in the
meantime. I&amp;rsquo;ll describe the work around shortly.&lt;/p&gt;

&lt;p&gt;Once your application is deployed it will almost immediately be
available at &lt;a href=&#34;http://&#34;&gt;http://&lt;/a&gt;&amp;lt;your-app-name&amp;gt;.apphosted.com.&lt;/p&gt;

&lt;h1 id=&#34;log-files:fd2d20709a7d24937bf602503a235c47&#34;&gt;Log Files&lt;/h1&gt;

&lt;p&gt;In order to view the log files, you need to log into the web control
panel and from there you can download the logs that you are interested
in. At the moment they only support downloading the log files, which is
a little inconvenient, it would be nice to have the ability to tail the
logs, or see the last 50 or 100 lines in the control panel. I asked
about this, and they agreed and said it is on their list of things to
work on.&lt;/p&gt;

&lt;h1 id=&#34;shell-access:fd2d20709a7d24937bf602503a235c47&#34;&gt;Shell Access&lt;/h1&gt;

&lt;p&gt;Metro gives you the ability to shell into your application directory, so
that you can kick off django management commands, and other cool things.
One important thing to note is that when you login to the shell, it is a
jailed shell, and you only have access to your own project, and with
limited command access. This is done for security reasons. It is nice to
know that your application runs in it&amp;rsquo;s own jailed area, and no one
else&amp;rsquo;s applications can access your information.&lt;/p&gt;

&lt;p&gt;Setting up the shell access requires a few steps. Follow these
directions to get the full details:
&lt;a href=&#34;http://docs.apphosted.com/apphosted/apphosted_shell.html&#34;&gt;http://docs.apphosted.com/apphosted/apphosted_shell.html&lt;/a&gt; , but
basically it requires the following.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;create a ssh key if you don&amp;rsquo;t already have one.&lt;/li&gt;
&lt;li&gt;Login to the web console and add your public key.&lt;/li&gt;
&lt;li&gt;In the web console browse over to your application
Settings-&amp;gt;Tools page and click on the “Update Public
Keys” button. (Don&amp;rsquo;t forget about this step, or you won&amp;rsquo;t be able
to login.&lt;/li&gt;
&lt;li&gt;Use the metro client to open the shell.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: It would be real cool if we didn&amp;rsquo;t have to do step 3, why can&amp;rsquo;t
it automatically update the public keys for all apps? I&amp;rsquo;m guessing it is
a security reason. The first time, I didn&amp;rsquo;t hit the update public keys
button and I couldn&amp;rsquo;t figure out why it wasn&amp;rsquo;t working, and luckily one
quick email to the support line, and they let me know what I did wrong,
and I was up and running in no time.&lt;/p&gt;

&lt;p&gt;This is how you can kick off the shell, there are a bunch of command
line args that you can pass as well, just do metro &amp;ndash;help and it will
show them all to you.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ metro -s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: There is currently a bug that is preventing me from logging into
the shell from my MacBook Pro OS X 10.6.7 using Python 2.6.1 . When I do
it gives me this error. I have informed appHosted, and they said it
looks like an issue with paramiko and python 2.6.1 on the Mac, not sure
if it affects other python versions on other operating systems. They are
working on the issue.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ metro -s
Metro Application Manager 1.21
Copyright (c) Lumentica,  http://www.lumentica.com

Application name: kencochraneblog
AppHosted Username: kencochrane
AppHosted Password:
Traceback (most recent call last):
File &amp;quot;/Users/ken/.virtualenvs/apphosted/bin/metro&amp;quot;, line 75, in run_shell
ssh.connect(host, username=app_name, port=port)
File &amp;quot;/Library/Python/2.6/site-packages/paramiko/client.py&amp;quot;, line 278, in connect
for (family, socktype, proto, canonname, sockaddr) in socket.getaddrinfo(hostname, port, socket.AF_UNSPEC, socket.SOCK_STREAM):
gaierror: [Errno 8] nodename nor servname provided, or not known
Error: [Errno 8] nodename nor servname provided, or not known
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;work-arounds:fd2d20709a7d24937bf602503a235c47&#34;&gt;Work Arounds&lt;/h1&gt;

&lt;p&gt;Now that you know how to shell into your application, you can also kick
off django management commands. I mentioned earlier that there was
another way to create the django admin user, well here is how you do it.
Login to the metro shell and then kick off the createsuperuser django
management command. Logging into the shell and finding things isn&amp;rsquo;t easy
do to the added security so to save you some trouble this is what I did.
Python isn&amp;rsquo;t in your path so you need to put the fully qualified path to
the virtual env&amp;rsquo;s python. Not sure if the jailed shell allows you to
edit your .profile if so, it might be nice to configure this so that you
don&amp;rsquo;t always have to do the full path.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# Create superuser (django admin)
$ /ve/kencochraneblog/bin/python /app/kencochraneblog/mysite/manage.py createsuperuser

# kicking off south migrations by hand.
$ /ve/kencochraneblog/bin/python /app/kencochraneblog/mysite/manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My application&amp;rsquo;s name is kencochraneblog, so make sure you replace my
application name with yours, it should be something like this. replace
app_name,django_project_dir and command with your variables.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ /ve/&amp;lt;app_name&amp;gt;/bin/python /app/&amp;lt;app_name&amp;gt;/&amp;lt;django_project_dir&amp;gt;/manage.py &amp;lt;command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;background-tasks:fd2d20709a7d24937bf602503a235c47&#34;&gt;Background Tasks&lt;/h1&gt;

&lt;p&gt;AppHosted also supports background tasks via celery, they don&amp;rsquo;t have the
documentation created yet, but it should be available soon. They are
also planning on supporting a cron like service, not sure if it will be
cron, or something similar, but it should do, what you need it to do.&lt;/p&gt;

&lt;h1 id=&#34;api:fd2d20709a7d24937bf602503a235c47&#34;&gt;API&lt;/h1&gt;

&lt;p&gt;AppHosted provides a pretty nice API that allows you to do anything that
the metro client does. This will allow you to write your own automation
and management scripts to interact with your application. If you
practice continuous deployment, it will allow you to automatically
deploy the latest version of code on a post commit hook, if all of your
tests pass.&lt;/p&gt;

&lt;h1 id=&#34;services:fd2d20709a7d24937bf602503a235c47&#34;&gt;Services&lt;/h1&gt;

&lt;p&gt;Right now they only support memcache for caching, and PostgreSQL for
databases, but they plan on adding more services as they move forward.&lt;/p&gt;

&lt;h1 id=&#34;conclusion:fd2d20709a7d24937bf602503a235c47&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I have been playing with AppHosted for a few weeks now, and I&amp;rsquo;m pretty
happy with what they have so far. They still have a few issues to work
out and they are still a work in progress, but I have been seeing
improvements all of the time, so it will only be a matter of time before
they are ready for the general public. Every time I came across an
issue, they were quick to reply to my emails and solve my issues, or
tell me where I was going wrong. If you have any more questions I
recommend checking out their documentation @
&lt;a href=&#34;http://docs.apphosted.com/index.html&#34;&gt;http://docs.apphosted.com/index.html&lt;/a&gt; . Check them out, and make sure
you let me know what you think.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;They are now open to the general public.&lt;/p&gt;

&lt;h2 id=&#34;update:fd2d20709a7d24937bf602503a235c47&#34;&gt;Update:&lt;/h2&gt;

&lt;p&gt;Read how this service stacks up against other services like it in my
&lt;a href=&#34;http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/&#34;&gt;Django hosting
roundup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with
dotCloud a competitor to apphosted. I plan on keeping this blog post up
to date and impartial. If you think there are any errors, please let me
know in the comments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploying my Django application to dotCloud</title>
      <link>http://www.kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/</link>
      <pubDate>Tue, 26 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;warning&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This post is out of date, please read the new updated one:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kencochrane.net/blog/2012/03/deploying-a-django-application-on-dotcloud/&#34;&gt;Deploying my Django application to dotCloud Part
2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have recently wrote about
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-experiences-with-epio/&#34;&gt;ep.io&lt;/a&gt;
and &lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-day-gondorio/&#34;&gt;gondor.io&lt;/a&gt;,
two new python/django hosting services that are currently in beta.
Another new service that has just recently hit the scene and is causing
a lot of waves is &lt;a href=&#34;http://dotcloud.com&#34;&gt;DotCloud.com&lt;/a&gt;. DotCloud is a
little different for a number of reasons. Their service isn&amp;rsquo;t targeting
any one technology stack like ep.io and gondor.io with
Python/Django/wsgi.&lt;/p&gt;

&lt;p&gt;DotCloud&amp;rsquo;s goal is to provide a bunch of different independent services
that you can use as building blocks to build your application. If you
need a database, take your pick from one of the many they support. Need
an application that uses Django or Rails on the front end, and Java in
the backend, that is fine, you can do that too. They realize that most
developers don&amp;rsquo;t stick to one standard technology stack for all of their
applications, so this allows you the flexibility to use the best tool
for the job. It also gives you a nice playground to try out new services
and see how they run without having to install, configure and maintain
the service just for testing.&lt;/p&gt;

&lt;p&gt;DotCloud was part of the Y Combinator summer class of 2010, and they
just recently &lt;a href=&#34;http://techcrunch.com/2011/03/22/paas-dotcloud-raises-10m-from-jerry-yang-benchmark-and-others/&#34;&gt;raised $10
Million&lt;/a&gt;.
With access to that much money, I&amp;rsquo;m guessing they will be hiring a bunch
of people pretty quickly, and I&amp;rsquo;m sure we will be seeing their services
expand as well.&lt;/p&gt;

&lt;p&gt;Like all new technologies, I want to play with them, and see if they
live up to all of the hype. I was lucky enough to get a beta invite a
few weeks ago, and I have been playing with it since. I decided that the
best way to test it out would be to deploy my blog, and see how hard it
would be. Here are the steps that I took to get my django based blog up
and running on DotCloud. I ran into a few issues and I made sure that I
put those in as well, so that if you get the same issue you can see how
I solved it.&lt;/p&gt;

&lt;h1 id=&#34;documentation:d61e2efe99db168c8115d51b1877dded&#34;&gt;Documentation&lt;/h1&gt;

&lt;p&gt;Before I get started with any new service the first thing I usually do
is look at the documentation. DotCloud has a nice list of documents
along with some tutorials on how to get started. These 3 documents were
the ones that I used the most.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.dotcloud.com/tutorials/django/&#34;&gt;http://docs.dotcloud.com/tutorials/django/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.dotcloud.com/components/mysql/&#34;&gt;http://docs.dotcloud.com/components/mysql/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.dotcloud.com/tutorials/firststeps/&#34;&gt;http://docs.dotcloud.com/tutorials/firststeps/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;first-steps:d61e2efe99db168c8115d51b1877dded&#34;&gt;First Steps:&lt;/h1&gt;

&lt;p&gt;Like all cool services these days, dotcloud uses a python based CLI, so
before we can get started we need to install the dotcloud client and
configure it so that we can start using it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# create my dotcloud virtual environment.
$ mkvirtualenv dotcloud

# install dotcloud client using pip
$ pip install dotcloud

# create our application namespace called kencochrane
$ dotcloud create kencochrane

#enter api key that we got from: http://www.dotcloud.com/account/settings when prompted
#&amp;lt;key goes here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have the client all setup, and an application namespace, now
we can start building our service. I have forked my blog repository on
bitbucket so that I could make dotcloud specific changes to it and not
effect my original repo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# go into projects directory
cd ~/projects

# forked kencochranenet to kencochranenet_dotcloud, now clone that. locally
hg clone https://bitbucket.org/kencochrane/kencochranenet_dotcloud kencochrane_dotcloud

# go into the new directory.
cd kencochrane_dotcloud
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reading through the documentation tells me that I need to create a
wsgi.py file and put in the root of my project. Using
&lt;a href=&#34;http://docs.dotcloud.com/tutorials/django/#djangowsgipy&#34;&gt;http://docs.dotcloud.com/tutorials/django/#djangowsgipy&lt;/a&gt; as a template,
I created my wsgi.py file below. I had issues with the default template
and I needed to add a directory to the sys.path so that wsgi could find
my django apps correctly. Here is my finished file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;import os
import sys

# Ken added this, only thing that is different from the example template (not counting settings file name)
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__),&#39;mysite&#39;)))
os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;] = &#39;mysite.settings&#39;

import django.core.handlers.wsgi
djangoapplication = django.core.handlers.wsgi.WSGIHandler()
def application(environ, start_response):
    if &#39;SCRIPT_NAME&#39; in environ:
        del environ[&#39;SCRIPT_NAME&#39;]
    return djangoapplication(environ, start_response)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DotCloud uses &lt;a href=&#34;http://www.pip-installer.org/en/latest/#requirements-files&#34;&gt;PIP requirements
files&lt;/a&gt; to
manage your project dependencies. We already have our pip requirements
file where it needs to be and named correctly so we don&amp;rsquo;t need to do
anything, but if we didn&amp;rsquo;t have one, we would need to create one and put
it in the root, and call it requirements.txt&lt;/p&gt;

&lt;p&gt;DotCloud requires that we put all of our static media in a directory
called &amp;lsquo;static&amp;rsquo; in the root of our project. Because my static media is
already found elsewhere, I need to create a directory called static and
move all of my files into it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# we need to create a static directory to serve static media from (/static) .
mkdir -p static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you use the django admin then you will need to create a postinstall
script that will create a symlink under static for your django admin
media files. Here is what mine looks like. If you use this as a
template, don&amp;rsquo;t forget to change the DJANGO_SETTINGS_MODULE variable
to match your project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;#!/usr/bin/env python
import os
# To import anything under django.*, we must set this variable.
os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;] = &#39;mysite.settings&#39;
# Import the admin module. The media directory is right under it!
import django.contrib.admin
# Retrieve the absolute path of the admin module.
admindir = os.path.dirname(django.contrib.admin.__file__)
# Add /media behind it.
mediadir = os.path.join(admindir, &#39;media&#39;)
# Compute the path of the symlink under the static directory.
staticlink = os.path.join(&#39;static&#39;, &#39;admin_media&#39;)
# If the link already exists, delete it.
if os.path.islink(staticlink):
    os.unlink(staticlink)
# Install the correct link.

os.symlink(mediadir, staticlink)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# make the script executable.
chmod +x postinstall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because we changed our location of our static media, we need to remember
to update our settings.py file with the new settings. Here are my
changes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;# edit settings.py file to the following.
ADMIN_MEDIA_PREFIX = &#39;/static/admin_media/&#39;

# change MEDIA_URL
MEDIA_URL = &#39;/static/&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Deployment&lt;/p&gt;

&lt;p&gt;Now that we have our application&amp;rsquo;s project structure all setup and
configured the way dotcloud wants it, we can start up some services and
then deploy our app. If you want to find out what services they have
available, you can run the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# find out which services that are available.
dotcloud deploy -h

You can chose among the following services:  
  java          host any Java servlet (also Clojure, Play!, and much more)
  mysql         the worlds most popular open source database             
  nodejs        run JavaScript processes (including web apps)             
  php           host any PHP web app: Drupal, WordPress...                
  php-worker    run background PHP processes                              
  postgresql    the worlds most advanced open source database            
  python        host any Python/WSGI web app: Django, Pylons, Web2py...   
  python-worker run background Python processes                           
  rabbitmq      AMQP message queue server                                 
  redis         advanced key-value store                                  
  ruby          host any Ruby/Rack web app: Rails, Sinatra...             
  ruby-worker   run background Ruby processes                             
  smtp          authenticated SMTP relay to send e-mails reliably         
  static        host static HTTP content    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need a database for our blog, since it was originally setup to use
mysql, lets use that one here. Start up a new mysql service called
&amp;lsquo;kencochrane.mysql&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# start up the database service.
$ dotcloud deploy -t mysql kencochrane.mysql
Created &amp;quot;kencochrane.mysql&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s make sure that it was created, and find out some more about our
new database instance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# get the information about our new service
$ dotcloud info kencochrane.mysqlcluster: wolverine
config:
    mysql_password: password_was_changed
created_at: 1303671517.96066
name: kencochrane.mysql
namespace: kencochrane
ports:
-   name: ssh
    url: ssh://dotcloud@mysql.kencochrane.dotcloud.com:3912
-   name: mysql
    url: mysql://root:password_was_changed@mysql.kencochrane.dotcloud.com:3913
state: running
type: mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see from above, we have a mysql database, it is running, and
it lets us know the ssh and mysql urls and ports, along with the root
password. Lets create our database. To do that we will login to the
server and run some sql commands. (the sensitive information has been
changed)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# connect to dotcloud mysql server instance
$ dotcloud run kencochrane.mysql -- mysql -u root -p

# mysql -u root -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 34
Server version: 5.1.41-3ubuntu12.10 (Ubuntu)

# create the user and database and give user permissions to database.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

mysql&amp;gt; create database blogdb;
Query OK, 1 row affected (0.00 sec)

mysql&amp;gt; create user &#39;blog_username&#39; identified by &#39;strong_password&#39;;
Query OK, 0 rows affected (0.05 sec)

mysql&amp;gt; grant all on blogdb.* to &#39;blog_user&#39;@&#39;%&#39;;
Query OK, 0 rows affected (0.04 sec)

mysql&amp;gt; flush privileges;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; exit;Bye
Shared connection to mysql.kencochrane.dotcloud.com closed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have our database all setup, we need to change our settings
file so that it has all of the new information. Here is what mine looks
like.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;# update your settings.py file.

DATABASES = {
    &#39;default&#39;: {
        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,
        &#39;NAME&#39;: &#39;blogdb&#39;,
        &#39;USER&#39;: &#39;blog_username&#39;,
        &#39;PASSWORD&#39;: &#39;strong_password&#39;,
        &#39;HOST&#39;: &#39;mysql.kencochrane.dotcloud.com&#39;,
        &#39;PORT&#39;: &#39;3913&#39;,
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are ready to deploy our Django app, but before I go any further
it is important to know the following. Dotcloud will pay attention to
your .hgignore files. If you have a settings file in your .hgignore file
so that it doesn&amp;rsquo;t get saved in the repo, it will not push those changes
up to the cloud. You will need to remove it from the .hgignore in order
to get those files out there. It is also import to remember that only
changes that are committed are pushed, so don&amp;rsquo;t forget to commit your
changes. If you wanted to be tricky you could use a post install script
to pull down the file from a secure location and install it that way, if
you want to make things super secure.&lt;/p&gt;

&lt;p&gt;Now that we have that behind us, lets get going. First we need to create
a new python service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# deploy a new python app called kencochrane.blog
$ dotcloud deploy --type python kencochrane.blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Service is now created so all we have to do is push our application to
the new service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# push out your changes to the server
$ dotcloud push kencochrane.blog .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now your code is out in the cloud, you just need to sync your database
and run the migrations to get your database all setup, and you should be
good to go.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# sync the database
$ dotcloud run kencochrane.blog python current/mysite/manage.py syncdb

# we use south so run migrate
$ dotcloud run kencochrane.blog python current/mysite/manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;now it works, just go to &lt;a href=&#34;http://blog.kencochrane.dotcloud.com/&#34;&gt;http://blog.kencochrane.dotcloud.com/&lt;/a&gt; to see.&lt;/p&gt;

&lt;p&gt;If you need to look at the logs to see how it is going you can do it two
ways. The first way will tail your logs for you to your console.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# look at logs of your service, it will tail them to your console. ctrl-c to stop.
$ dotcloud logs kencochrane.blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or login via ssh and look at your logs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# Open up a shell
$ dotcloud ssh kencochrane.blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are the ones you most likely care about.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# nginx access and error logs.
/var/log/nginx/&amp;lt;app_name&amp;gt;.{access,error}.log

# wsgi error logs
/var/log/supervisor/uswgi.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to restart your service just issue this command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# restart the service
dotcloud restart kencochrane.blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DotCloud runs on Amazon&amp;rsquo;s EC2 service, and last week while I was doing
my testing, I was getting a bunch of errors, I wasn&amp;rsquo;t sure if the errors
were because this is a beta service, and they are still bugs in it, or
if it was related to the amazon issues. Either way, I listed those
errors below incase anyone else gets them. If I got the error I would
just run the command again until it worked, sometimes it took 3 times
before everything worked fine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# attempt 1
$ dotcloud push kencochrane.blog .DotCloud service unavailable (&amp;quot;No JSON object could be decoded&amp;quot;).
Please try again later. If the problem persists, send an email to support@dotcloud.com.

# attempt 2
$ dotcloud push kencochrane.blog .
# upload . ssh://dotcloud@uploader.dotcloud.com:1060/kencochrane.blog
# hg
remote: Warning: Permanently added &#39;[uploader.dotcloud.com]:1060,[174.129.15.77]:1060&#39; (RSA) to the list of known hosts.
pushing to ssh://dotcloud@uploader.dotcloud.com:1060/kencochrane.blog
searching for changes
remote: adding changesets
remote: adding manifests
remote: adding file changes
remote: added 1 changesets with 3 changes to 3 files
Scheduling build
Fetching logs...
Build started...
mkdir: cannot create directory `126:afdea9036e83&#39;: File exists
Failed to fetch tarball (&amp;lt;type &#39;exceptions.ValueError&#39;&amp;gt;: Failed to extract the tarball, abort.)
Build finished.
Shared connection to blog.kencochrane.dotcloud.com closed.

# 3rd time is a charm, it finally works.
$ dotcloud push kencochrane.blog .# upload . ssh://dotcloud@uploader.dotcloud.com:1060/kencochrane.blog
# hg
remote: Warning: Permanently added &#39;[uploader.dotcloud.com]:1060,[174.129.15.77]:1060&#39; (RSA) to the list of known hosts.
pushing to ssh://dotcloud@uploader.dotcloud.com:1060/kencochrane.blog
searching for changes
no changes found
Scheduling build
Fetching logs...
Build started...
.
. all of the files (trimmed for space)
.
Fetched code revision 126:afdea9036e83
.
. all the requirments (trimmed for space)
.
Cleaning up...
Reloading nginx configuration: nginx.
uwsgi: stopped
uwsgi: started
Build finished.

Shared connection to blog.kencochrane.dotcloud.com closed.
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;conclusion:d61e2efe99db168c8115d51b1877dded&#34;&gt;Conclusion:&lt;/h1&gt;

&lt;p&gt;Setting up my blog on DotCloud was fairly straightforward, the
documentation helped guide me along the way. I did run into a few road
blocks that stopped me in my tracks for a little while, but after some
digging I was able to get past those issues. Hopefully this post will
help you overcome the same issues I had, and make your deployment a
little more smooth.&lt;/p&gt;

&lt;p&gt;The service is very flexible, which is going to be good for most
developers, but with the added flexibility they added some complexity
that doesn&amp;rsquo;t exist on the other services. For example ep.io and
gondor.io handle all database and user creation for you, so you don&amp;rsquo;t
need to know what commands to run to create the database and the user,
and they also automatically add the database connection strings to your
settings file. I for one don&amp;rsquo;t mind the extra complexity considering I&amp;rsquo;m
going to get the ability to have direct access to my database so that I
can do what I want. Others, might not want to worry about that. If you
are building an application for a client that isn&amp;rsquo;t very tech savy, the
more things that are automated the better.&lt;/p&gt;

&lt;p&gt;DotCloud is still in beta, and if you take a look at their
&lt;a href=&#34;http://docs.dotcloud.com/components/roadmap/&#34;&gt;roadmap&lt;/a&gt;, they have very
ambitious goals. I for one can&amp;rsquo;t wait to see how they progress. I have
only gone into a few of the many things that dotcloud has to offer, I
recommend that you try it out for yourself and leave me a comment
letting me know how you liked it.&lt;/p&gt;

&lt;h1 id=&#34;next-time:d61e2efe99db168c8115d51b1877dded&#34;&gt;Next time:&lt;/h1&gt;

&lt;p&gt;I have been lucky enough to get a sneak peak at &lt;a href=&#34;http://apphosted.com&#34;&gt;http://apphosted.com&lt;/a&gt; a
python/django hosting service similar to gondor.io and ep.io. I&amp;rsquo;m
currently playing with the service now, once I&amp;rsquo;m finished I&amp;rsquo;ll post my
findings.&lt;/p&gt;

&lt;h2 id=&#34;update:d61e2efe99db168c8115d51b1877dded&#34;&gt;Update:&lt;/h2&gt;

&lt;p&gt;Read how this service stacks up against other services like it in my
&lt;a href=&#34;http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/&#34;&gt;Django hosting
roundup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I &lt;a href=&#34;http://kencochrane.net/blog/2012/03/im-now-working-for-dotcloud/&#34;&gt;accepted a job with
dotCloud&lt;/a&gt;.
I plan on keeping this blog post up to date and impartial. If you think
there are any errors, please let me know in the comments.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;warning&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This post is out of date, please read the new updated one:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kencochrane.net/blog/2012/03/deploying-a-django-application-on-dotcloud/&#34;&gt;Deploying my Django application to dotCloud Part
2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>