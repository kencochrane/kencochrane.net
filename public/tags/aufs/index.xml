<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aufs on KenCochrane.net</title>
    <link>http://www.kencochrane.net/tags/aufs/</link>
    <description>Recent content in Aufs on KenCochrane.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 07 Jun 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.kencochrane.net/tags/aufs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Running Docker on Digital Ocean with Ubuntu</title>
      <link>http://www.kencochrane.net/blog/2013/06/running-docker-on-digital-ocean/</link>
      <pubDate>Fri, 07 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2013/06/running-docker-on-digital-ocean/</guid>
      <description>

&lt;p&gt;I recently wrote a post on how to get &lt;a href=&#34;http://www.docker.com&#34;&gt;Docker&lt;/a&gt; up
and &lt;a href=&#34;http://kencochrane.net/blog/2013/05/running-docker-on-rackspace-cloud/&#34;&gt;running on
Rackspace&lt;/a&gt;
and since then I have received some requests on how to get it up and
running on other hosts. One of those hosts is &lt;a href=&#34;https://www.digitalocean.com/?refcode=3313a09727d4&#34;&gt;Digital
Ocean&lt;/a&gt; a hot new
Cloud hosting provider that offers a 512MB 20GB SSD VPS for only \$5.00
/ month. A really great deal, and also a great price if you want to play
around with some new tool and not have to worry about possibly breaking
a production server. This post should guide you though the process of
getting an Ubuntu 12.04 and 13.04 VPS up and running with Docker.&lt;/p&gt;

&lt;h1 id=&#34;step-1-register:f6acbe7546ab0bafe3ff3295f5ba358a&#34;&gt;Step 1: Register&lt;/h1&gt;

&lt;p&gt;First things first, if you don&amp;rsquo;t already have a Digital Ocean account,
you will need to create one. If you &lt;a href=&#34;https://www.digitalocean.com/?refcode=3313a09727d4&#34;&gt;follow this
link&lt;/a&gt;, click sign up
and enter this promo code &lt;strong&gt;VPSERS10&lt;/strong&gt;, you will be given a $10 credit
to try out the service.&lt;/p&gt;

&lt;h1 id=&#34;step-2-billing:f6acbe7546ab0bafe3ff3295f5ba358a&#34;&gt;Step 2: Billing&lt;/h1&gt;

&lt;p&gt;To prevent abuse, Digital Ocean requires that you enter a credit card
before you can spin up a server. Go ahead and do that now. Once you put
in your information you should see a screen like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.kencochrane.net/digital-ocean/startup.png&#34; alt=&#34;image&#34; /&gt;{.img-polaroid}&lt;/p&gt;

&lt;h1 id=&#34;step-3-ssh-keys:f6acbe7546ab0bafe3ff3295f5ba358a&#34;&gt;Step 3 SSH keys&lt;/h1&gt;

&lt;p&gt;To make your life easier, I would add a public SSH key to your account.
If you don&amp;rsquo;t add an SSH key then you will be emailed a root password
when the server is setup. It is easier and more secure to add your
public key, and then select that key when building the server, and they
will automatically add the key to your server for you. If you don&amp;rsquo;t have
a SSH key, don&amp;rsquo;t worry they are easy to create. Just do a quick web
search, and there are a ton of different guide out there to help you get
one setup.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.kencochrane.net/digital-ocean/ssh_key.png&#34; alt=&#34;image&#34; /&gt;{.img-polaroid}&lt;/p&gt;

&lt;h1 id=&#34;step-4-create-droplet:f6acbe7546ab0bafe3ff3295f5ba358a&#34;&gt;Step 4: Create Droplet&lt;/h1&gt;

&lt;p&gt;Digital Ocean calls their servers Droplets. Lets create a droplet. Click
on the big &amp;ldquo;Create&amp;rdquo; button on the control panel.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enter a hostname at the top.&lt;/li&gt;
&lt;li&gt;Pick your size&lt;/li&gt;
&lt;li&gt;select your region&lt;/li&gt;
&lt;li&gt;Select your image. Docker currently only runs on a &lt;strong&gt;64bit OS&lt;/strong&gt;, and
needs a fairly recent kernel (3.8+) with AUFS enabled. The only
images on Digital Ocean that will currently work with Docker are
&lt;strong&gt;Ubuntu 13.04 x64 Server&lt;/strong&gt;, and &lt;strong&gt;Ubuntu 12.04 x64 Server&lt;/strong&gt;. I&amp;rsquo;ll
cover the install instructions for those two options below.&lt;/li&gt;
&lt;li&gt;Pick your SSH key that you added previously. If you don&amp;rsquo;t pick one,
your root password will be emailed to you.&lt;/li&gt;
&lt;li&gt;Enable VirtIO&lt;/li&gt;
&lt;li&gt;Click the big &amp;ldquo;Create Droplet&amp;rdquo; button at the bottom.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://www.kencochrane.net/digital-ocean/select_distro_ubuntu_12_04.png&#34; alt=&#34;image&#34; /&gt;{.img-polaroid}&lt;/p&gt;

&lt;p&gt;Droplet getting created&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.kencochrane.net/digital-ocean/create_droplet.png&#34; alt=&#34;image&#34; /&gt;{.img-polaroid}&lt;/p&gt;

&lt;p&gt;After about 60 seconds you should have a cloudlet created with an IP
address. Now pick the distribution you picked below and follow the rest
of the directions.&lt;/p&gt;

&lt;h1 id=&#34;ubuntu-12-04-64bit-server:f6acbe7546ab0bafe3ff3295f5ba358a&#34;&gt;Ubuntu 12.04 64bit Server&lt;/h1&gt;

&lt;h2 id=&#34;upgrade-kernel:f6acbe7546ab0bafe3ff3295f5ba358a&#34;&gt;Upgrade kernel&lt;/h2&gt;

&lt;p&gt;The default kernel with 12.04 doesn&amp;rsquo;t work well with Docker so we are
going to upgrade to the same one that is used by 13.04. To do this you
will go into your control panel for your droplet, and go into the
settings tab and change the kernel pull down to &amp;ldquo;Ubuntu
13.04-x64-vmlinuz-3.8.0-23-generic&amp;rdquo; and click change.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.kencochrane.net/digital-ocean/change_kernel.png&#34; alt=&#34;image&#34; /&gt;{.img-polaroid}&lt;/p&gt;

&lt;p&gt;In order for the kernel change to take affect you will need to power
cycle the droplet. Click on the power tab, and then hit the &amp;ldquo;Power
Cycle&amp;rdquo; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.kencochrane.net/digital-ocean/power_cycle.png&#34; alt=&#34;image&#34; /&gt;{.img-polaroid}&lt;/p&gt;

&lt;h2 id=&#34;login-to-server:f6acbe7546ab0bafe3ff3295f5ba358a&#34;&gt;Login to server&lt;/h2&gt;

&lt;p&gt;Now that you have the new kernel you need to login to the server to
install the rest of the stuff.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ ssh root@&amp;lt;your_ip_address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s check to make sure you have the right kernel. It should show a 3.8
kernel if you did everything right.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ uname -a
Linux docker-1 3.8.0-23-generic #34-Ubuntu SMP Wed May 29 20:22:58 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s install some dependencies now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install linux-image-generic-lts-raring
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you see this, just pick the default (already selected) and hit OK.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.kencochrane.net/digital-ocean/kernel_menu.png&#34; alt=&#34;image&#34; /&gt;{.img-polaroid}&lt;/p&gt;

&lt;p&gt;Install Docker from the Docker PPA&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ sudo apt-get install python-software-properties &amp;amp;&amp;amp; sudo add-apt-repository ppa:dotcloud/lxc-docker
$ sudo apt-get update
$ sudo apt-get install lxc-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker should have been installed and started up. lets test to make sure
it works.&lt;/p&gt;

&lt;p&gt;``` {.sourceCode .bash
 $ docker ps
 ID                  IMAGE               COMMAND             CREATED             STATUS              PORTS}
$ docker version
Client version: 0.4.0
Server version: 0.4.0
Go version: go1.0.3&lt;/p&gt;

&lt;p&gt;$ docker run base /bin/echo hello world
hello world&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Hopefully it worked. If not, feel free to ask questions on \#docker on
freenode, or [submit a support
ticket](https://github.com/docker/docker/issues?labels=doc&amp;amp;state=open).

Ubuntu 13.04 64bit Server
=========================

13.04 comes with the 3.8 kernel, so we won&#39;t need to do anything kernel
related, which makes this install much simpler compared to 12.04.

Install the dependencies

``` {.sourceCode .bash}
$ sudo apt-get update
$ sudo apt-get install linux-image-extra-`uname -r`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you see this, just pick the default (already selected) and hit OK.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.kencochrane.net/digital-ocean/kernel_menu.png&#34; alt=&#34;image&#34; /&gt;{.img-polaroid}&lt;/p&gt;

&lt;p&gt;Install Docker&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ sudo apt-get install software-properties-common
$ sudo add-apt-repository ppa:dotcloud/lxc-docker
$ sudo apt-get update
$ sudo apt-get install lxc-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker should have been installed and started up. lets test to make sure
it works.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ docker ps
ID                  IMAGE               COMMAND             CREATED             STATUS              PORTS

$ docker version
Client version: 0.4.0
Server version: 0.4.0
Go version: go1.0.3

$ docker run base /bin/echo hello world
hello world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hopefully it worked. If not, feel free to ask questions on #docker on
freenode, or &lt;a href=&#34;https://github.com/docker/docker/issues?labels=doc&amp;amp;state=open&#34;&gt;submit a support
ticket&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;conclusion:f6acbe7546ab0bafe3ff3295f5ba358a&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Hopefully now you have the knowledge to go and setup your own Docker
server on Digital Ocean. If you have any issues, or questions feel free
to submit the questions below or visit #docker on freenode&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Docker up and running on a RaspberryPi</title>
      <link>http://www.kencochrane.net/blog/2013/05/running-docker-on-a-raspberrypi/</link>
      <pubDate>Fri, 17 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2013/05/running-docker-on-a-raspberrypi/</guid>
      <description>

&lt;p&gt;This year I attended &lt;a href=&#34;https://us.pycon.org/2013/&#34;&gt;PyCon US&lt;/a&gt; and I was
lucky enough to get a FREE &lt;a href=&#34;http://www.raspberrypi.org&#34;&gt;RaspberryPi&lt;/a&gt;. At
the same conference &lt;a href=&#34;http://www.dotcloud.com&#34;&gt;dotCloud&lt;/a&gt; (The company I
work for), was giving a lightning talk for a project that we have been
working on, called Docker. &lt;a href=&#34;http://www.docker.io&#34;&gt;Docker&lt;/a&gt; is a tool that
allows you to better manage your Linux Containers
(&lt;a href=&#34;http://lxc.sourceforge.net&#34;&gt;LXC&lt;/a&gt;). Shortly after I got the
RaspberryPi, I started wondering if it would be possible to run Docker
on it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.kencochrane.net/rpi/RaspberryPi.jpg&#34; alt=&#34;image&#34; /&gt;{.img-polaroid}&lt;/p&gt;

&lt;p&gt;I did some digging and technically speaking the Pi should be able to run
Docker, it satisfies all of the requirements.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;LXC&lt;/li&gt;
&lt;li&gt;AUFS&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Getting it up and running isn&amp;rsquo;t going to be easy. The Linux kernels that
come with the different Linux distros for the RaspberryPi, are kind of
old, and don&amp;rsquo;t come with AUFS built in. The RaspberryPi also runs on an
ARM based chip, and it is only 32bit. Currently Docker only supports
64bit OS&amp;rsquo;s. There are plans to add 32 bit support in the future, but it
isn&amp;rsquo;t there yet.&lt;/p&gt;

&lt;p&gt;Doing some research I was able to find blog posts on how to get LXC and
AUFS up and running on the RaspberryPi. Using those guides, I was able
to make some progress but I&amp;rsquo;m not all of the way there yet. I&amp;rsquo;m hoping
to describe my steps here so that others can see what I have done, and
if they want, help me get over the hump.&lt;/p&gt;

&lt;h1 id=&#34;goals:f1d498c06f1cd77c93351132c9d7bc1e&#34;&gt;Goals&lt;/h1&gt;

&lt;p&gt;My goals for the project is to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;provide a prebuilt image that people can download that has
everything they needed in order to get started.&lt;/li&gt;
&lt;li&gt;I also want to provide a prebuilt kernel, people can download and
use without having to build their own.&lt;/li&gt;
&lt;li&gt;Port Docker to 32bit so that it will run on RaspberryPi and provide
a Debian package for easy install.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;instructions:f1d498c06f1cd77c93351132c9d7bc1e&#34;&gt;Instructions&lt;/h1&gt;

&lt;p&gt;Here are the steps that I used to make it so that my RaspberryPi could
run Docker. These are still a work in progress, so please let me know if
you have any issues, or you found a better way to do this.&lt;/p&gt;

&lt;h2 id=&#34;install-linux-os:f1d498c06f1cd77c93351132c9d7bc1e&#34;&gt;Install Linux OS&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Download &lt;a href=&#34;http://www.raspberrypi.org/downloads&#34;&gt;Raspbian&lt;/a&gt; and &lt;a href=&#34;http://elinux.org/RPi_Easy_SD_Card_Setup&#34;&gt;make
an SD card&lt;/a&gt; (I used the
2013-02-09-wheezy-raspbian.zip image)&lt;/li&gt;
&lt;li&gt;Once you have the SD card, put it in the Pi and boot it up.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;update-and-prepare-raspbian:f1d498c06f1cd77c93351132c9d7bc1e&#34;&gt;Update and Prepare Raspbian&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Switch to Root User on the Pi. These commands must be run as root.
You can also use &amp;ldquo;su&amp;rdquo; or &amp;ldquo;sudo&amp;rdquo;, what ever you prefer:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ sudo su root
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Expand to fill SD card and reboot after entering:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ raspi-config
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Update Raspbian&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ apt-get update

$ apt-get dist-upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Install git&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ sudo apt-get install git-core
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Update Firmware&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The clone will take a while. You might consider cloning on a desktop
machine to save time. Just transfer the firmware/boot and modules/
directories from your desktop PC to the Pi after the checkout. Be aware
that checking out on some OS&amp;rsquo;s that are case insensitive, may result in
some files being missing. If you see funky issues, this might be the
cause.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ cd /opt

$ git clone git://github.com/raspberrypi/firmware.git

$ cd firmware/boot

$ cp * /boot

$ cd ../modules

$ cp -r * /lib/modules

$ reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Increase the Swap File Size&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I found that in order to check out the source on the Pi, you’ll need a
swap file with the 256MB Pi, otherwise it will run out of RAM during the
checkout (with fatal: index-pack failed).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# use your favorite editor here.
$ pico /etc/dphys-swapfile

# change to 500 (MB)

$ sudo dphys-swapfile setup

$ sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Prepare to Build Kernel&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We are going to use the 3.6 kernel since it is the lastest stable one.
There is an effort to get &lt;a href=&#34;http://www.raspberrypi.org/phpBB3/viewtopic.php?f=87&amp;amp;t=40664&#34;&gt;3.8
working&lt;/a&gt;,
it isn&amp;rsquo;t 100% there yet, for more info see.&lt;/p&gt;

&lt;p&gt;The clone will take a while. Again, you may consider using a desktop PC.
Of course, if you do that, you’ll need to issue the “zcat” command from
your Pi and copy the resulting “.config” file to the “linux” directory
on your desktop PC.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ cd /opt

$ mkdir raspberrypi

$ cd raspberrypi

$ git clone git://github.com/raspberrypi/linux.git

$ cd linux

$ zcat /proc/config.gz &amp;gt; .config
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Decrease the Swap Space File&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ pico /etc/dphys-swapfile

# change to 100 (MB)

$ sudo dphys-swapfile setup

$ sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Install Packages for Kernel Compilation&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ apt-get install ncurses-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Adding AUFS Patches&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ cd /opt/raspberrypi/linux

git clone git://aufs.git.sourceforge.net/gitroot/aufs/aufs3-standalone.git
cd aufs3-standalone
git checkout origin/aufs3.6
cp -rp *.patch ../
cp -rp fs ../
cp -rp Documentation/ ../
cp -rp include/ ../
cd ..

patch -p1 &amp;lt; aufs3-base.patch
patch -p1 &amp;lt; aufs3-proc_map.patch
patch -p1 &amp;lt; aufs3-standalone.patch
patch -p1 &amp;lt; aufs3-kbuild.patch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you get this error&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;root@raspberrypi:/opt/raspberrypi/linux# patch -p1 &amp;lt; aufs3-kbuild.patch
patching file fs/Kconfig
patching file fs/Makefile
patching file include/linux/Kbuild
Hunk #1 FAILED at 66.
1 out of 1 hunk FAILED -- saving rejects to file include/linux/Kbuild.rej
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you will need to manually update include/linux/Kbuild because the
patch failed.&lt;/p&gt;

&lt;p&gt;First I reverted change on the file, and manually added. the line
(below) to line 66, below audit.h&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;header-y += aufs_type.h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;here is my git diff:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;diff --git a/include/linux/Kbuild b/include/linux/Kbuild
index fa21760..ee029e3 100644
--- a/include/linux/Kbuild
+++ b/include/linux/Kbuild
@@ -66,6 +66,7 @@ header-y += atmppp.h
 header-y += atmsap.h
 header-y += atmsvc.h
 header-y += audit.h
+header-y += aufs_type.h
 header-y += auto_fs.h
 header-y += auto_fs4.h
 header-y += auxvec.h
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Configuring Kernel&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You’ll now need to set some kernel options to support LXC, via the menu
config tool.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ cd /opt/raspberrypi/linx

$ make menuconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You need to enable these options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;General -&amp;gt; Control Group Support -&amp;gt; Memory Resource Controller
for Control Groups (&lt;em&gt;and its three child options&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://www.kencochrane.net/rpi/raspberrypi_kernel_config_1.png&#34; alt=&#34;image&#34; /&gt;{.img-polaroid}&lt;/p&gt;

&lt;p&gt;(this has high overhead;only enable if you really need it, or else
enable and remember to disable using the Kernel command line option
“cgroup_disable=memory”) (image not shown)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;General -&amp;gt; Control Group Support -&amp;gt; cpuset support&lt;/li&gt;
&lt;li&gt;Device Drivers -&amp;gt; Character Devices -&amp;gt; Support multiple
instances of devpts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://www.kencochrane.net/rpi/raspberrypi_kernel_config_2.png&#34; alt=&#34;image&#34; /&gt;{.img-polaroid}&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Device Drivers -&amp;gt; Network Device Support -&amp;gt; Virtual ethernet
pair device&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://www.kencochrane.net/rpi/raspberrypi_kernel_config_3.png&#34; alt=&#34;image&#34; /&gt;{.img-polaroid}&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;File Systems &amp;ndash;&amp;gt; Miscellaneous filesystems -&amp;gt;select &amp;ldquo;Aufs
(Advanced multi layered unification filesystem) support (NEW)&amp;rdquo; (mine
was the the very bottom)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://www.kencochrane.net/rpi/docker_rasberrypi_aufs_kernel_config.png&#34; alt=&#34;image&#34; /&gt;{.img-polaroid}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build Kernel&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This could take many hours if you compile on the Pi, there are ways to
&lt;a href=&#34;http://elinux.org/RPi_Kernel_Compilation#2._Cross_compiling_from_Linux&#34;&gt;compile on another
machine&lt;/a&gt;
and transfer the kernel to the Pi when completed. If you are in a hurry,
use this approach.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ make

$ make modules_install

$ cd /opt/raspberrypi

$ git clone git://github.com/raspberrypi/tools.git

$ cd tools/mkimage

$ python ./imagetool-uncompressed.py /opt/raspberrypi/linux/arch/arm/boot/Image

$ cp /boot/kernel.img /boot/kernel-old.img

$ cp kernel.img /boot/

$ reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Download Latest LXC&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The LXC tools provided with Raspbian are out-of-date, so let&amp;rsquo;s update to
the latest version.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ mkdir /opt/lxc

$ cd /opt/lxc

$ git clone https://github.com/lxc/lxc.git

$ apt-get install automake libcap-dev

$ cd lxc

$ ./autogen.sh &amp;amp;&amp;amp; ./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Testing the Install&lt;/p&gt;

&lt;p&gt;Check LXC is happy with your kernel:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ lxc-checkconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;User namespace should be “missing” (it checks for a kernel option that
no longer exists) and Cgroup namespace should say “required”.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Installing Go&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you install Go using the Go package that is available (apt-get
install golang). You will get a floating point issue. For more
information about the floating point issues see this page.
&lt;a href=&#34;http://www.raspberrypi.org/phpBB3/viewtopic.php?p=129647&#34;&gt;http://www.raspberrypi.org/phpBB3/viewtopic.php?p=129647&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To get it to work, we will compile Go from source. Feel free to change
the location on where we are installing it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ sudo apt-get install -y mercurial gcc libc6-dev

$ hg clone -u default https://code.google.com/p/go $HOME/go
warning: code.google.com certificate with fingerprint 9f:af:b9:ce:b5:10:97:c0:5d:16:90:11:63:78:fa:2f:37:f4:96:79 not verified (check hostfingerprints or web.cacerts config setting)
destination directory: go
requesting all changes
adding changesets
adding manifests
adding file changes
added 14430 changesets with 52478 changes to 7406 files (+5 heads)
updating to branch default
3520 files updated, 0 files merged, 0 files removed, 0 files unresolved

$ cd $HOME/go/src
$ ./all.bash

ALL TESTS PASSED

---
Installed Go for linux/arm in /home/dfc/go
Installed commands in /home/dfc/go/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If there was an error relating to out of memory, or you couldn’t
configure an appropriate swap device, you can skip the test suite by
executing&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ cd $HOME/go
$ ./make.bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;as an alternative to ./all.bash.&lt;/p&gt;

&lt;p&gt;The go command needs to be added to your \$PATH, you should also edit
your profile script (.bashrc, etc) to include these changes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ export PATH=$PATH:$HOME/go/bin
$ go version
go version devel +30c566874b83 Wed May 08 16:06:25 2013 -0700 linux/arm
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Installing Docker&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ apt-get -y install wget bsdtar curl git

export GOPATH=~/docker/go/
export PATH=$GOPATH/bin:$PATH

$ mkdir -p $GOPATH/src/github.com/dotcloud
$ cd $GOPATH/src/github.com/dotcloud
$ git clone git://github.com/dotcloud/docker.git  # or clone your own fork/branch
$ cd docker

$ go get -v github.com/dotcloud/docker/...
$ go install -v github.com/dotcloud/docker/...

$ docker version
$ docker -d
The docker runtime currently only supports amd64 (not arm). This will change in the future. Aborting.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker is installed but due to current limitations it won&amp;rsquo;t run. It is a
start, we now have a development environment to start hacking on Docker
to get it to work with the RaspberryPi.&lt;/p&gt;

&lt;h1 id=&#34;what-s-next:f1d498c06f1cd77c93351132c9d7bc1e&#34;&gt;What&amp;rsquo;s Next&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Now we have everything up and running, we need to change docker so
that it will work on the ARM with only 32bit support.&lt;/li&gt;
&lt;li&gt;I need to take my compiled kernel and make it downloadable to others&lt;/li&gt;
&lt;li&gt;I need to make an SD card image of my setup for easy download, so
that people can get started easier.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;want-to-help:f1d498c06f1cd77c93351132c9d7bc1e&#34;&gt;Want to Help?&lt;/h1&gt;

&lt;p&gt;If you want to help me with this, please send me a message on twitter
&lt;a href=&#34;https://twitter.com/kencochrane&#34;&gt;@KenCochrane&lt;/a&gt; and also add your name
to this &lt;a href=&#34;https://github.com/dotcloud/docker/issues/636&#34;&gt;Docker issue&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;resources:f1d498c06f1cd77c93351132c9d7bc1e&#34;&gt;Resources:&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;LXC:
&lt;a href=&#34;http://raspberrypicloud.wordpress.com/2013/03/12/building-an-lxc-friendly-kernel-for-the-raspberry-pi/&#34;&gt;http://raspberrypicloud.wordpress.com/2013/03/12/building-an-lxc-friendly-kernel-for-the-raspberry-pi/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AUFS: &lt;a href=&#34;http://rpitc.blogspot.sg/p/kernel-rebuild.html&#34;&gt;http://rpitc.blogspot.sg/p/kernel-rebuild.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go: &lt;a href=&#34;http://dave.cheney.net/tag/go-golang-raspberrypi&#34;&gt;http://dave.cheney.net/tag/go-golang-raspberrypi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker:
&lt;a href=&#34;http://docs.docker.io/en/latest/contributing/devenvironment.html&#34;&gt;http://docs.docker.io/en/latest/contributing/devenvironment.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Running Docker on Rackspace with Ubuntu</title>
      <link>http://www.kencochrane.net/blog/2013/05/running-docker-on-rackspace-cloud/</link>
      <pubDate>Sat, 11 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2013/05/running-docker-on-rackspace-cloud/</guid>
      <description>

&lt;p&gt;I have been playing with &lt;a href=&#34;http://www.docker.com&#34;&gt;Docker&lt;/a&gt; a lot lately,
and it got me wondering how hard it would be to run Docker on the
different Cloud providers. I noticed there were already directions on
how to install on &lt;a href=&#34;http://docs.docker.com/en/latest/installation/amazon.html&#34;&gt;Amazon
EC2&lt;/a&gt; but
nothing for the Rackspace Cloud.&lt;/p&gt;

&lt;p&gt;If you would like to run &lt;a href=&#34;http://www.docker.com&#34;&gt;Docker&lt;/a&gt; on the
&lt;a href=&#34;http://www.rackspace.com/cloud/servers/&#34;&gt;RackSpace Cloud&lt;/a&gt; using
&lt;a href=&#34;http://www.ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt; you&amp;rsquo;re in luck. I just spent the
afternoon figuring out how to get it installed on Ubuntu 12.04, 12.10,
and 13.04, and I have included my notes below. 13.04 is the easiest to
get up and running since it has the most recent kernel, but the others
aren&amp;rsquo;t too bad either, they just need a few more steps, to get them up
to par.&lt;/p&gt;

&lt;p&gt;I would love to expand this to other distros on Rackspace, so if you
come up with more, send me a note, and so I can link to them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update: 05-12-2013&lt;/strong&gt; I have updated some information given some
feedback by others. Also added a troubleshooting section.&lt;/p&gt;

&lt;h1 id=&#34;ubuntu-12-04:f2623c526ea98fcfa3c30f7d4e215bfa&#34;&gt;Ubuntu 12.04&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Build an Ubuntu 12.04 server using the &amp;ldquo;Next generation cloud
servers&amp;rdquo;, with your desired size. It will give you the password,
keep that you will need it later.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When the server is up and running ssh into the server.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ ssh root@&amp;lt;server-ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you are logged in you should check what kernel version you
are running.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ uname -a
Linux docker-12-04 3.2.0-38-virtual #61-Ubuntu SMP Tue Feb 19 12:37:47 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Let&amp;rsquo;s update the server package list&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ apt-get update
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now lets install Docker and it&amp;rsquo;s dependencies. To keep things
simple, we will use the Docker install script. It will take a couple
of minutes. (see below if you want to install via package)&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ curl get.docker.io | sudo sh -x
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Docker runs best with a new kernel, so lets use 3.8.x&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# install the new kernel
$ apt-get install linux-generic-lts-raring

# update grub so it will use the new kernel after we reboot
$ update-grub

# update-grub doesn&#39;t always work so lets make sure. ``/boot/grub/menu.lst`` was updated.
$ grep 3.8.0- /boot/grub/menu.lst

# nope it wasn&#39;t lets manually update ``/boot/grub/menu.lst``  (make sure you are searching for correct kernel version, look at initial uname -a results.)
$ sed -i s/3.2.0-38-virtual/3.8.0-19-generic/ /boot/grub/menu.lst

# once again lets make sure it worked.
$ grep 3.8.0- /boot/grub/menu.lst
title          Ubuntu 12.04.2 LTS, kernel 3.8.0-19-generic
kernel          /boot/vmlinuz-3.8.0-19-generic root=/dev/xvda1 ro quiet splash console=hvc0
initrd          /boot/initrd.img-3.8.0-19-generic
title          Ubuntu 12.04.2 LTS, kernel 3.8.0-19-generic (recovery mode)
kernel          /boot/vmlinuz-3.8.0-19-generic root=/dev/xvda1 ro quiet splash  single
initrd          /boot/initrd.img-3.8.0-19-generic

# much better.
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reboot server (either via command line or console)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;login again and check to make sure the kernel was updated&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ ssh root@&amp;lt;server_ip&amp;gt;
$ uname -a
Linux docker-12-04 3.8.0-19-generic #30~precise1-Ubuntu SMP Wed May 1 22:26:36 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux

# nice 3.8.
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make sure docker is running and test it out.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ start dockerd
$ docker pull busybox
$ docker run busybox /bin/echo hello world
hello world
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;alternate-install:f2623c526ea98fcfa3c30f7d4e215bfa&#34;&gt;Alternate install&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t want to run the get.docker.io script and want to use
packages instead, you can use the docker PPA. Here is how you use it.
Replace step 5 with the following 3 steps.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add the custom package sources to your apt sources list. Copy and
paste the following lines at once.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ sudo sh -c &amp;quot;echo &#39;deb http://ppa.launchpad.net/dotcloud/lxc-docker/ubuntu precise main&#39; &amp;gt;&amp;gt; /etc/apt/sources.list&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Update your sources. You will see a warning that GPG signatures
cannot be verified.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Now install it, you will see another warning that the package cannot
be authenticated. Confirm install.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ apt-get install lxc-docker
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;ubuntu-12-10:f2623c526ea98fcfa3c30f7d4e215bfa&#34;&gt;Ubuntu 12.10&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Build an Ubuntu 12.10 server using the &amp;ldquo;Next generation cloud
servers&amp;rdquo;, with your desired size. It will give you the password,
keep that you will need it later.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When the server is up and running ssh into the server.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ ssh root@&amp;lt;server-ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you are logged in you should check what kernel version you
are running.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ uname -a
Linux docker-12-10 3.5.0-25-generic #39-Ubuntu SMP Mon Feb 25 18:26:58 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Let&amp;rsquo;s update the server package list&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ apt-get update
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now lets install Docker and it&amp;rsquo;s dependencies. To keep things
simple, we will use the Docker install script. It will take a couple
of minutes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ curl get.docker.io | sudo sh -x
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Docker runs best with a new kernel, so lets use 3.8.x&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# add the ppa to get the right kernel package
$ echo deb http://ppa.launchpad.net/ubuntu-x-swat/q-lts-backport/ubuntu quantal main &amp;gt; /etc/apt/sources.list.d/xswat.list

# add the key for the ppa
$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B22AB97AF1CDFA9

# update packages again
$ apt-get update

# install the new kernel
$ apt-get install linux-image-3.8.0-19-generic

# make sure grub has been updated.
$ grep 3.8.0- /boot/grub/menu.lst
title   Ubuntu 12.10, kernel 3.8.0-19-generic
kernel  /boot/vmlinuz-3.8.0-19-generic root=/dev/xvda1 ro quiet splash console=hvc0
initrd  /boot/initrd.img-3.8.0-19-generic
title   Ubuntu 12.10, kernel 3.8.0-19-generic (recovery mode)
kernel  /boot/vmlinuz-3.8.0-19-generic root=/dev/xvda1 ro quiet splash  single
initrd  /boot/initrd.img-3.8.0-19-generic

# looks good. If it doesn&#39;t work for you, look at the notes for 12.04 to fix.
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reboot server (either via command line or console)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;login again and check to make sure the kernel was updated&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ ssh root@&amp;lt;server_ip&amp;gt;
$ uname -a
Linux docker-12-10 3.8.0-19-generic #29~precise2-Ubuntu SMP Fri Apr 19 16:15:35 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux

# nice 3.8.
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make sure docker is running and test it out.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ start dockerd
$ docker pull busybox
$ docker run busybox /bin/echo hello world
hello world
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;ubuntu-13-04:f2623c526ea98fcfa3c30f7d4e215bfa&#34;&gt;Ubuntu 13.04&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Build an Ubuntu 13.04 server using the &amp;ldquo;Next generation cloud
servers&amp;rdquo;, with your desired size. It will give you the password,
keep that you will need it later.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When the server is up and running ssh into the server.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ ssh root@&amp;lt;server-ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you are logged in you should check what kernel version you
are running.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ uname -a
Linux docker-1304 3.8.0-19-generic #29-Ubuntu SMP Wed Apr 17 18:16:28 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Let&amp;rsquo;s update the server package list&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ apt-get update
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now lets install Docker and it&amp;rsquo;s dependencies. To keep things
simple, we will use the Docker install script. It will take a couple
of minutes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ curl get.docker.io | sudo sh -x
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Make sure docker is running and test it out.&lt;/p&gt;

&lt;blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ start dockerd
$ docker pull busybox
$ docker run busybox /bin/echo hello world
hello world
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;what-s-next:f2623c526ea98fcfa3c30f7d4e215bfa&#34;&gt;What&amp;rsquo;s Next&lt;/h1&gt;

&lt;p&gt;Now that you have Docker running on a server, you can look at the
different &lt;a href=&#34;http://docs.docker.com/en/latest/examples/&#34;&gt;Docker examples&lt;/a&gt;
in the documentation to see how it works, and then build something, and
let everyone know what you have built. If you have any issues or
suggestions, open a github issue and let everyone know. Docker is a new
project, and it is moving quick, so any suggestions that you have might
help shape the future of the project.&lt;/p&gt;

&lt;h1 id=&#34;trouble-shooting:f2623c526ea98fcfa3c30f7d4e215bfa&#34;&gt;Trouble shooting&lt;/h1&gt;

&lt;p&gt;If you are pulling a repo and you get an error like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;Error: exit status 1: bsdtar: Linkname can&#39;t be converted from UTF-8 to current locale.
bsdtar: Linkname can&#39;t be converted from UTF-8 to current locale.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It means the the docker daemon doesn&amp;rsquo;t have the correct locales loaded
on startup. To fix it make sure your init script looks something like
this.&lt;/p&gt;

&lt;p&gt;Make sure the path to the docker binary is correct because in some
installs it might be &lt;code&gt;/usr/local/bin&lt;/code&gt; and others &lt;code&gt;/usr/local/&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;description     &amp;quot;Run docker&amp;quot;

start on runlevel [2345]
stop on starting rc RUNLEVEL=[016]
respawn

script
    test -f /etc/default/locale &amp;amp;&amp;amp; . /etc/default/locale || true
    LANG=$LANG LC_ALL=$LANG /usr/local/bin/docker -d
end script
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>