<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aws on KenCochrane.net</title>
    <link>http://www.kencochrane.net/tags/aws/</link>
    <description>Recent content in Aws on KenCochrane.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Feb 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.kencochrane.net/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Uploading a Video to Facebook from AWS S3 using python</title>
      <link>http://www.kencochrane.net/blog/2015/02/upload-video-to-facebook-from-s3-using-python/</link>
      <pubDate>Sat, 14 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2015/02/upload-video-to-facebook-from-s3-using-python/</guid>
      <description>

&lt;p&gt;If you have some video files stored in Amazon S3 and you want to upload
those videos to a Facebook page, using their video API here is some
python code that I used recently.&lt;/p&gt;

&lt;p&gt;I spent a good chunk of a day trying to get this too work, so I&amp;rsquo;m
posting this here to help anyone else who is trying to do the same.&lt;/p&gt;

&lt;p&gt;This code isn&amp;rsquo;t using any special facebook libraries it is just using
normal python along with the requests library. It should be a good
enough example to figure out how to do most things.&lt;/p&gt;

&lt;p&gt;It is important to note that you will need a valid access token with
correct permissions in order to get this to work, and that isn&amp;rsquo;t covered
in this blog post.&lt;/p&gt;

&lt;p&gt;Another thing that is important to note, that this uses a different API
host then the rest of the facebook API. Instead of &lt;code&gt;graph.facebook.com&lt;/code&gt;
it uses &lt;code&gt;graph-video.facebook.com&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Facebook Video API&lt;/strong&gt;:
&lt;a href=&#34;https://developers.facebook.com/docs/graph-api/reference/v2.2/user/videos/&#34;&gt;https://developers.facebook.com/docs/graph-api/reference/v2.2/user/videos/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Facebook Access Tokens&lt;/strong&gt;:
&lt;a href=&#34;https://developers.facebook.com/docs/facebook-login/access-tokens&#34;&gt;https://developers.facebook.com/docs/facebook-login/access-tokens&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;requirements:68da97ef1a847aab7a13405352cba049&#34;&gt;Requirements:&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ pip install requests requests-toolbelt
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;code:68da97ef1a847aab7a13405352cba049&#34;&gt;Code:&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;import os
import base64
import requests
from requests_toolbelt import MultipartEncoder
import uuid
import logging


log = logging.getLogger(__name__)


def download_file_to_tmp(source_url):
    &amp;quot;&amp;quot;&amp;quot;
    download `source_url` to /tmp return the full path, doing it in chunks so
    that we don&#39;t have to store everything in memory.
    &amp;quot;&amp;quot;&amp;quot;
    log.debug(&amp;quot;download {0}&amp;quot;.format(source_url))
    tmp_location = &amp;quot;/tmp/s3_downloads&amp;quot;

    # come up with a random name to avoid clashes.
    rand_name = str(uuid.uuid4().get_hex().lower()[0:6])

    local_filename = source_url.split(&#39;/&#39;)[-1]

    # get the extension if it has one
    if local_filename.count(&amp;quot;.&amp;quot;) &amp;gt; 0:
        ext = local_filename.split(&#39;.&#39;)[-1]
        tmp_filename = u&amp;quot;{0}.{1}&amp;quot;.format(rand_name, ext)
    else:
        tmp_filename = u&amp;quot;{0}.mp4&amp;quot;.format(local_filename)

    temp_media_location = os.path.join(tmp_location, tmp_filename)
    # make the temp directory
    if not os.path.exists(tmp_location):
        os.makedirs(tmp_location)

    r = requests.get(source_url, stream=True)
    log.debug(&amp;quot;headers = {0}&amp;quot;.format(r.headers))
    with open(temp_media_location, &#39;wb&#39;) as f:
        for chunk in r.iter_content(chunk_size=1024):
            if chunk:  # filter out keep-alive new chunks
                f.write(chunk)
                f.flush()
                os.fsync(f.fileno())
    log.debug(&amp;quot;finished download to {0}&amp;quot;.format(temp_media_location))
    return temp_media_location


def remove_file(temp_file):
    &amp;quot;&amp;quot;&amp;quot; Given a valid file path remove it &amp;quot;&amp;quot;&amp;quot;
    if os.path.exists(temp_file):
        os.remove(temp_file)


def upload_file(video_url, page_id, poster_url, access_token,
                description, title):
    &amp;quot;&amp;quot;&amp;quot;
    ``video_url``: this is where the video is in s3.
    ``page_id``:  me or a page_id for the page you want to post too.
    ``poster_url``:  the url to the poster (thumbnail) for this video
    ``access_token``: your facebook access token with permissions to upload
        to the page you want to post too.
    ``description``:  the description of the video you are posting.
    ``title``:  the title of the video you are posting
    &amp;quot;&amp;quot;&amp;quot;

    # download to data
    local_video_file = download_file_to_tmp(video_url)
    video_file_name = local_video_file.split(&amp;quot;/&amp;quot;)[-1]

    if video_file_name and video_file_name.count(&amp;quot;.&amp;quot;) == 0:
        log.debug(&amp;quot;video_file_name has no ext {0}&amp;quot;.format(video_file_name))
        # if it doesn&#39;t have an extension add one to it.
        video_file_name = &amp;quot;{0}.mp4&amp;quot;.format(video_file_name)
        log.debug(&amp;quot;video_file_name converted to {0}&amp;quot;.format(video_file_name))

    # download to data
    local_poster_file = download_file_to_tmp(poster_url)

    # need to encode it.
    with open(local_poster_file, &amp;quot;rb&amp;quot;) as image_file:
        poster_encoded_string = base64.b64encode(image_file.read())

    # need binary rep of this, not sure if this would do it

    # put it all together to post to facebook
    if page_id or page_id == &#39;me&#39;:
        path = &#39;me/videos&#39;
    else:
        path = &amp;quot;{0}/videos&amp;quot;.format(page_id)

    fb_url = &amp;quot;https://graph-video.facebook.com/{0}?access_token={1}&amp;quot;.format(
             path, access_token)

    log.debug(&amp;quot;video_file = {0}&amp;quot;.format(local_video_file))
    log.debug(&amp;quot;thumb_file = {0}&amp;quot;.format(local_poster_file))
    log.debug(&amp;quot;start upload to facebook&amp;quot;)

    # multipart chunked uploads
    m = MultipartEncoder(
        fields={&#39;description&#39;: description,
                &#39;title&#39;: title,
                &#39;thumb&#39;: poster_encoded_string,
                &#39;source&#39;: (video_file_name, open(local_video_file, &#39;rb&#39;))}
    )

    r = requests.post(fb_url, headers={&#39;Content-Type&#39;: m.content_type}, data=m)

    if r.status_code == 200:
        j_res = r.json()
        facebook_video_id = j_res.get(&#39;id&#39;)
        log.debug(&amp;quot;facebook_video_id = {0}&amp;quot;.format(facebook_video_id))
    else:
        log.error(&amp;quot;Facebook upload error: {0}&amp;quot;.format(r.text))

    # delete the tmp files
    remove_file(local_video_file)
    remove_file(local_poster_file)

    return facebook_video_id
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>