<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rhel5 on KenCochrane.net</title>
    <link>http://www.kencochrane.net/tags/rhel5/</link>
    <description>Recent content in Rhel5 on KenCochrane.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Apr 2011 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.kencochrane.net/tags/rhel5/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Upgrading MySQL 5.0.x to Percona MySQL 5.1.x RHEL5 or CENTOS 5</title>
      <link>http://www.kencochrane.net/blog/2011/04/upgrading-mysql-50x-percona-mysql-51x-rhel5-or-cen/</link>
      <pubDate>Thu, 14 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2011/04/upgrading-mysql-50x-percona-mysql-51x-rhel5-or-cen/</guid>
      <description>&lt;p&gt;Upgrade the stock MySQL 5.0.x build to the new stable MySQL 5.1.x
Percona version. Here are my notes on upgrading on Red Hat Enterprise
Linux 5 (RHEL5) or CentOS5.&lt;/p&gt;

&lt;p&gt;First we need to stop mysql&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;service mysql stop;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m assuming that you don&amp;rsquo;t have the percona repo installed on your
machine, if not follow this link on how to set it up. &lt;a href=&#34;http://www.percona.com/docs/wiki/percona-server:release:start&#34;&gt;Setting up
Percona RPM
Repo&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;mkdir -p /tmp/downloads
cd /tmp/downloads
wget http://www.percona.com/redir/downloads/percona-release/percona-release-0.0-1.i386.rpm
sudo rpm -Uhv percona-release-0.0-1.i386.rpm    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to remove the old MySQL 5.0 binaries. (Don&amp;rsquo;t worry this will
leave your data.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;yum remove -y mysql-server mysql mysql-devel mysql-test mysql-bench
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now install the new Percona MySQL 5.1.x binaries. (depending on your
connection this might take a few minutes)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;yum install -y Percona-Server-devel-51 Percona-Server-shared-51 Percona-Server-test-51 Percona-Server-client-51 Percona-Server-server-51
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;During the install it will throw out some warnings, make sure you write
those down, and make the changes that it recommends. Here are a few of
mine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;110208 16:44:52 [Warning] &#39;--log_slow_queries&#39; is deprecated and will be removed in a future release. Please use &#39;&#39;--slow_query_log&#39;/&#39;--slow_query_log_file&#39;&#39; instead.
110208 16:44:52 [Warning] &#39;--log&#39; is deprecated and will be removed in a future release. Please use &#39;&#39;--general_log&#39;/&#39;--general_log_file&#39;&#39; instead.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming the install went well, now we need to upgrade the data to the
new format. (replace &amp;lt;mysql admin user&amp;gt; with your mysql admin
username, and enter password when prompted)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;mysql_upgrade -u &amp;lt;mysql admin username&amp;gt; -p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if your upgrade was anything like mine it had a bunch of errors like
this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;db_name.table_name
error    : Table upgrade required. Please do &amp;quot;REPAIR TABLE table_name&amp;quot; or dump/reload to fix it!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you try to repair the table you get this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;db_name.table_name
note     : The storage engine for the table doesn&#39;t support repair
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to Peter Zaitsev &lt;a href=&#34;http://www.mysqlperformanceblog.com/2010/05/14/mysql_upgrade-and-innodb-tables/&#34;&gt;mysql_upgrade and Innodb
Tables&lt;/a&gt;
we know that we can do the following to fix it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode sql&#34;&gt;ALTER TABLE db_name.table_name ENGINE=INNODB;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just need to run this command for each table that threw an error and
it should fix it. (If you have lots of data this might take a while, I
had some tables that took over 2 hours)&lt;/p&gt;

&lt;p&gt;Once you think that you have all of the tables fixed, you can run this
command and it will check all of your tables and let you know if you are
good or not. If you still have errors, repeat the steps above until all
tables pass.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;mysqlcheck -A --check-upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hopefully everything passed for you, and you now have a fully upgraded
database. It is important to note that there is another option besides
running the table alter. You could have dumped all of the data prior to
the upgraded and then restored it once the database was upgraded. This
process would most likely take a lot longer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Upgrading Percona MySQL 5.0.x to Percona MySQL 5.1.x RHEL5 or CENTOS 5</title>
      <link>http://www.kencochrane.net/blog/2011/02/upgrading-percona-mysql-50x-percona-mysql-51x-rhel/</link>
      <pubDate>Tue, 15 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2011/02/upgrading-percona-mysql-50x-percona-mysql-51x-rhel/</guid>
      <description>&lt;p&gt;I have been using the Percona build of MySQL 5.0.x for a little while
now, and I have been impressed. Now it is time to upgrade to the new
stable MySQL 5.1.x version. Here are my notes on upgrading on Red Hat
Enterprise Linux 5 (RHEL5) or CentOS5.&lt;/p&gt;

&lt;p&gt;First we need to stop mysql&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;service mysql stop;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m assuming that you have the percona repo installed on your machine,
if not see follow this link on how to set it up. &lt;a href=&#34;http://www.percona.com/docs/wiki/percona-server:release:start&#34;&gt;Setting up Percona RPM
Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we need to remove the old MySQL 5.0 binaries. (Don&amp;rsquo;t worry this will
leave your data.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;yum remove -y Percona-SQL*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now install the new Percona MySQL 5.1.x binaries. (depending on your
connection this might take a few minutes)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;yum install -y Percona-Server-devel-51 Percona-Server-shared-51 Percona-Server-test-51 Percona-Server-client-51 Percona-Server-server-51
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;During the install it will throw out some warnings, make sure you write
those down, and make the changes that it recommends. Here are a few of
mine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;110208 16:44:52 [Warning] &#39;--log_slow_queries&#39; is deprecated and will be removed in a future release. Please use &#39;&#39;--slow_query_log&#39;/&#39;--slow_query_log_file&#39;&#39; instead.
110208 16:44:52 [Warning] &#39;--log&#39; is deprecated and will be removed in a future release. Please use &#39;&#39;--general_log&#39;/&#39;--general_log_file&#39;&#39; instead.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Assuming the install went well, now we need to upgrade the data to the
new format. (replace &amp;lt;mysql admin user&amp;gt; with your mysql admin
username, and enter password when prompted)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;mysql_upgrade -u &amp;lt;mysql admin username&amp;gt; -p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now if your upgrade was anything like mine it had a bunch of errors like
this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;db_name.table_name
error    : Table upgrade required. Please do &amp;quot;REPAIR TABLE table_name&amp;quot; or dump/reload to fix it!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you try to repair the table you get this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;db_name.table_name
note     : The storage engine for the table doesn&#39;t support repair
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to Peter Zaitsev &lt;a href=&#34;http://www.mysqlperformanceblog.com/2010/05/14/mysql_upgrade-and-innodb-tables/&#34;&gt;mysql_upgrade and Innodb
Tables&lt;/a&gt;
we know that we can do the following to fix it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode sql&#34;&gt;ALTER TABLE db_name.table_name ENGINE=INNODB;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just need to run this command for each table that threw an error and
it should fix it. (If you have lots of data this might take a while, I
had some tables that took over 2 hours)&lt;/p&gt;

&lt;p&gt;Once you think that you have all of the tables fixed, you can run this
command and it will check all of your tables and let you know if you are
good or not. If you still have errors, repeat the steps above until all
tables pass.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;mysqlcheck -A --check-upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hopefully everything passed for you, and you now have a fully upgraded
database. It is important to note that there is another option besides
running the table alter. You could have dumped all of the data prior to
the upgraded and then restored it once the database was upgraded. This
process would most likely take a lot longer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automated Install Script for memcached on RHEL5</title>
      <link>http://www.kencochrane.net/blog/2010/05/automated-install-script-for-memcached-on-rhel5/</link>
      <pubDate>Fri, 14 May 2010 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2010/05/automated-install-script-for-memcached-on-rhel5/</guid>
      <description>&lt;p&gt;I created this script that will download memcached build,install and set
it up to start up automatically on reboot. It also installs the init.d
script to manage memcache so you can restart etc.&lt;/p&gt;

&lt;p&gt;You can either copy and paste it into your shell prompt using a user
that has install privileges (root,admin,etc) or you can copy into a .sh
file and execute it.&lt;/p&gt;

&lt;p&gt;The code for most of this was take from this blog post:
&lt;a href=&#34;http://www.vbseo.com/blogs/danny-bembibre/daemon-scripts-memcached-44/&#34;&gt;http://www.vbseo.com/blogs/danny-bembibre/daemon-scripts-memcached-44/&lt;/a&gt;
it doesn&amp;rsquo;t seem to be around anymore so I put it here for anyone else
looking for this very helpful info.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;wget http://memcached.googlecode.com/files/memcached-1.4.5.tar.gz
tar -xvzf memcached-1.4.5.tar.gz
cd memcached-1.4.5
./configure
make
make test
make install

touch /etc/memcached.conf
cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; /etc/memcached.conf
#Memory a user
-m 64
# default port
-p 11211
# user to run daemon nobody/apache/www-data
-u nobody
# only listen locally
-l 127.0.0.1
EOF

touch /etc/init.d/memcached
chmod +x /etc/init.d/memcached

cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; /etc/init.d/memcached
#!/bin/bash
#
# memcached    This shell script takes care of starting and stopping
#              standalone memcached.
#
# chkconfig: - 80 12
# description: memcached is a high-performance, distributed memory
#              object caching system, generic in nature, but
#              intended for use in speeding up dynamic web
#              applications by alleviating database load.
# processname: memcached
# config: /etc/memcached.conf
# Source function library.
. /etc/rc.d/init.d/functions
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/local/bin/memcached
DAEMONBOOTSTRAP=/usr/local/bin/start-memcached
DAEMONCONF=/etc/memcached.conf
NAME=memcached
DESC=memcached
PIDFILE=/var/run/$NAME.pid
[ -x $DAEMON ] || exit 0
[ -x $DAEMONBOOTSTRAP ] || exit 0
RETVAL=0
start() {
 echo -n $&amp;quot;Starting $DESC: &amp;quot;
 daemon $DAEMONBOOTSTRAP $DAEMONCONF
 RETVAL=$?
 [ $RETVAL -eq 0 ] &amp;amp;&amp;amp; touch $PIDFILE
 echo
 return $RETVAL
}
stop() {
 echo -n $&amp;quot;Shutting down $DESC: &amp;quot;
 killproc $NAME
 RETVAL=$?
 echo
 [ $RETVAL -eq 0 ] &amp;amp;&amp;amp; rm -f $PIDFILE
 return $RETVAL
}
# See how we were called.
case &amp;quot;$1&amp;quot; in
 start)
  start
  ;;
 stop)
  stop
  ;;
 restart|reload)
  stop
  start
  RETVAL=$?
  ;;
 status)
  status $prog
  RETVAL=$?
  ;;
 *)
  echo $&amp;quot;Usage: $0 {start|stop|restart|status}&amp;quot;
  exit 1
esac
exit $RETVAL
EOF

touch /usr/local/bin/start-memcached
chmod +x /usr/local/bin/start-memcached

cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; /usr/local/bin/start-memcached
#!/usr/bin/perl -w
# start-memcached
# 2003/2004 - Jay Bonci &amp;lt;jaybonci@debian.org&amp;gt;
# This script handles the parsing of the /etc/memcached.conf file
# and was originally created for the Debian distribution.
# Anyone may use this little script under the same terms as
# memcached itself.
use strict;
if ($&amp;gt; != 0 and $&amp;lt; != 0) {
 print STDERR &amp;quot;Only root wants to run start-memcached.\n&amp;quot;;
 exit;
}
my $etcfile = shift || &amp;quot;/etc/memcached.conf&amp;quot;;
my $params = [];
my $etchandle;
# This script assumes that memcached is located at /usr/bin/memcached, and
# that the pidfile is writable at /var/run/memcached.pid
my $memcached = &amp;quot;/usr/local/bin/memcached&amp;quot;;
my $pidfile = &amp;quot;/var/run/memcached.pid&amp;quot;;
# If we don&#39;t get a valid logfile parameter in the /etc/memcached.conf file,
# we&#39;ll just throw away all of our in-daemon output. We need to re-tie it so
# that non-bash shells will not hang on logout. Thanks to Michael Renner for
# the tip
my $fd_reopened = &amp;quot;/dev/null&amp;quot;;
sub handle_logfile {
 my ($logfile) = @_;
 $fd_reopened = $logfile;
}
sub reopen_logfile {
 my ($logfile) = @_;
 open *STDERR, &amp;quot;&amp;gt;&amp;gt;$logfile&amp;quot;;
 open *STDOUT, &amp;quot;&amp;gt;&amp;gt;$logfile&amp;quot;;
 open *STDIN, &amp;quot;&amp;gt;&amp;gt;/dev/null&amp;quot;;
 $fd_reopened = $logfile;
}
# This is set up in place here to support other non -[a-z] directives
my $conf_directives = {
 &amp;quot;logfile&amp;quot; =&amp;gt; \&amp;amp;handle_logfile
};
if (open $etchandle, $etcfile) {
 foreach my $line (&amp;lt;$etchandle&amp;gt;) {
  $line =~ s/\#.*//go;
  $line = join &#39; &#39;, split &#39; &#39;, $line;
  next unless $line;
  next if $line =~ /^\-[dh]/o;
  if ($line =~ /^[^\-]/o) {
   my ($directive, $arg) = $line =~ /^(.*?)\s+(.*)/;
   $conf_directives-&amp;gt;{$directive}-&amp;gt;($arg);
   next;
  }
  push @$params, $line;
 }
}
unshift @$params, &amp;quot;-u root&amp;quot; unless (grep $_ eq &#39;-u&#39;, @$params);
$params = join &amp;quot; &amp;quot;, @$params;
if (-e $pidfile) {
 open PIDHANDLE, &amp;quot;$pidfile&amp;quot;;
 my $localpid = &amp;lt;PIDHANDLE&amp;gt;;
 close PIDHANDLE;
 chomp $localpid;
 if (-d &amp;quot;/proc/$localpid&amp;quot;) {
  print STDERR &amp;quot;memcached is already running.\n&amp;quot;;
  exit;
 } else {
  `rm -f $localpid`;
 }
}
my $pid = fork();
if ($pid == 0) {
 reopen_logfile($fd_reopened);
 exec &amp;quot;$memcached $params&amp;quot;;
 exit(0);
} elsif (open PIDHANDLE,&amp;quot;&amp;gt;$pidfile&amp;quot;) {
 print PIDHANDLE $pid;
 close PIDHANDLE;
} else {
 print STDERR &amp;quot;Can&#39;t write pidfile to $pidfile.\n&amp;quot;;
}
EOF

/etc/init.d/memcached restart
/sbin/chkconfig memcached on
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Installing Mercurial 1.5.1 on Red Hat Enterprise Linux 5 (RHEL5) using Python 2.5</title>
      <link>http://www.kencochrane.net/blog/2010/05/mercurial-1_5_1-on-rhel5-using-python2_5/</link>
      <pubDate>Thu, 13 May 2010 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2010/05/mercurial-1_5_1-on-rhel5-using-python2_5/</guid>
      <description>

&lt;h1 id=&#34;installing-mercurial-1-5-1-on-red-hat-enterprise-linux-5-rhel5-using-python-2-5:85607c8aea43dfeeae281913edf67191&#34;&gt;Installing Mercurial 1.5.1 on Red Hat Enterprise Linux 5 (RHEL5) using Python 2.5&lt;/h1&gt;

&lt;p&gt;My RHEL5 setup uses python2.5 which I compiled from source, since RHEL5
only comes with python2.4.&lt;/p&gt;

&lt;p&gt;Because I didn&amp;rsquo;t use the built in python 2.4 version I couldn&amp;rsquo;t do the
simple&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ yum install mercurial
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead I need to build mercurial from source, which isn&amp;rsquo;t too bad. Just
do the following.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;as Root&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ wget http://mercurial.selenic.com/release/mercurial-1.5.1.tar.gz
$ tar -xvzf mercurial-1.5.1.tar.gz
$ cd mercurial-1.5.1
$ make PYTHON=python2.5 install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you get the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ python2.5 setup.py build
$ Couldn&#39;t import standard bz2 (incomplete Python install).
     make:  [build] Error 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then when you installed python 2.5 you didn&amp;rsquo;t have the bzip2 libs
installed so it didn&amp;rsquo;t include them in the python2.5 install. No big
deal all you need to do is install those libs and then recomplile python
2.5&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;install bzip2 libs&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ yum install bzip2 bzip2-devel bzip2-libs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Download 2.5.4 from python.org&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ wget http://python.org/ftp/python/2.5.4/Python-2.5.4.tar.bz2
$ tar -xvjf Python-2.5.4.tar.bz2
$ cd Python-2.5.4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;switch to root:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ ./configure
$ make
$ make altinstall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once complete (this will take a few minutes) rerun the steps above and
then you should be good.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;go back to where you untared the mercurial bundle&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ cd mercurial-1.5.1
$ make PYTHON=python2.5 install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check to make sure you are running 1.5.1&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ hg --version
     Mercurial Distributed SCM (version 1.5.1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is all, now you are running Mercurial 1.5.1 on RHEL5 with
python2.5!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>