<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hosting on KenCochrane.net</title>
    <link>http://www.kencochrane.net/tags/hosting/</link>
    <description>Recent content in Hosting on KenCochrane.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Mar 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://www.kencochrane.net/tags/hosting/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Deploying my Django application to dotCloud: Part 2</title>
      <link>http://www.kencochrane.net/blog/2012/03/deploying-a-django-application-on-dotcloud/</link>
      <pubDate>Fri, 23 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2012/03/deploying-a-django-application-on-dotcloud/</guid>
      <description>

&lt;p&gt;As I mentioned in a &lt;a href=&#34;http://kencochrane.net/blog/2012/03/im-now-working-for-dotcloud/&#34;&gt;recent blog
post&lt;/a&gt;,
in the 11 months since I wrote my &lt;a href=&#34;http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/&#34;&gt;first post on
dotCloud&lt;/a&gt;,
I now work there. Besides me working there, there has been a lot of
other changes at &lt;a href=&#34;http://www.dotcloud.com&#34;&gt;dotCloud&lt;/a&gt;, and I wanted to
take the time to update my original post so that it was up to date and
had all the recent information. I&amp;rsquo;m going to completely rewrite the old
blog post here, with updated information, and leave the old one around
for posterity.&lt;/p&gt;

&lt;p&gt;dotCloud&amp;rsquo;s goal is to provide a bunch of different independent services
that you can use as building blocks to build your application. If you
need a database, take your pick from one of the many they support. Need
an application that uses Django or Rails on the front end, and Java in
the backend, that is fine, you can do that too. They realize that most
developers don&amp;rsquo;t stick to one standard technology stack for all of their
applications, so this allows you the flexibility to use the best tool
for the job. It also gives you a nice playground to try out new services
and see how they run without having to install, configure and maintain
the service just for testing.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m going to go over the steps that it took to install my blog onto
dotCloud, and hopefully answer some common questions along the way.&lt;/p&gt;

&lt;h1 id=&#34;documentation:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Documentation&lt;/h1&gt;

&lt;p&gt;Before I get started with any new service the first thing I usually do
is look at the documentation. DotCloud has a nice list of documents
along with some tutorials on how to get started. These 4 documents were
the ones that I used the most.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.dotcloud.com/firststeps/platform-overview/&#34;&gt;http://docs.dotcloud.com/firststeps/platform-overview/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.dotcloud.com/tutorials/python/django/&#34;&gt;http://docs.dotcloud.com/tutorials/python/django/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.dotcloud.com/services/mysql/&#34;&gt;http://docs.dotcloud.com/services/mysql/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.dotcloud.com/services/mysql-masterslave/&#34;&gt;http://docs.dotcloud.com/services/mysql-masterslave/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;first-steps:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;First Steps:&lt;/h1&gt;

&lt;p&gt;Like all cool services these days, dotCloud uses a python based CLI, so
before we can get started we need to install the dotCloud client and
configure it so that we can start using it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# create my dotcloud virtual environment.
$ mkvirtualenv dotcloud

# install dotcloud client using pip
$ pip install dotcloud

# create our application called blog
$ dotcloud create blog

#enter api key that we got from: http://www.dotcloud.com/account/settings when prompted
#&amp;lt;key goes here&amp;gt;

# if you were not prompted to enter your key you can run this command, and it will let you enter your API key again.
$ dotcloud register
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have the client all setup, and an application created, now
we can start building our service. I have forked my blog repository on
github so that I could make dotCloud specific changes to it and not
effect my original repo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# go into projects directory
cd ~/projects

# forked kencochranenet to kencochranenet_dotcloud, now clone that. locally
git clone git://github.com/kencochrane/kencochranenet_dotcloud.git kencochranenet_dotcloud

# go into the new directory.
cd kencochrane_dotcloud
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reading through the documentation tells me that I need to create a
wsgi.py file and put in the root of my project. Using
&lt;a href=&#34;http://docs.dotcloud.com/tutorials/python/django/#wsgi-py&#34;&gt;http://docs.dotcloud.com/tutorials/python/django/#wsgi-py&lt;/a&gt; as a
template, I created my wsgi.py file below. I had issues with the default
template and I needed to add a directory to the sys.path so that wsgi
could find my django apps correctly. Here is my finished file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;import os
import sys

# Ken added this, only thing that is different from the example template (not counting settings file name)
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__),&#39;mysite&#39;)))
os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;] = &#39;mysite.settings&#39;

import django.core.handlers.wsgi
djangoapplication = django.core.handlers.wsgi.WSGIHandler()
def application(environ, start_response):
    if &#39;SCRIPT_NAME&#39; in environ:
        del environ[&#39;SCRIPT_NAME&#39;]
    return djangoapplication(environ, start_response)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DotCloud uses &lt;a href=&#34;http://www.pip-installer.org/en/latest/#requirements-files&#34;&gt;PIP requirements
files&lt;/a&gt; to
manage your project dependencies. We already have our pip requirements
file where it needs to be and named correctly so we don&amp;rsquo;t need to do
anything, but if we didn&amp;rsquo;t have one, we would need to create one and put
it in the root, and call it requirements.txt&lt;/p&gt;

&lt;h2 id=&#34;services:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Services&lt;/h2&gt;

&lt;p&gt;When we add a service to our deployment stack, dotCloud gives us the
appropriate connection information in a file called
&amp;lsquo;/home/dotcloud/environment.json&amp;rsquo; that is available to us on our
deployment container. This allows us to not have to hard code
username/password and server urls in our settings.py file, and it also
makes it a little more secure for us since we don&amp;rsquo;t have to have that
info in our source repository.&lt;/p&gt;

&lt;p&gt;This is how we use it. At the top of your settings.py file you will need
to add the following. snippet.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;import json
with open(&#39;/home/dotcloud/environment.json&#39;) as f:
  env = json.load(f)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we have that added to the settings.py file, we now have a variable
env that has all of the env settings we need.&lt;/p&gt;

&lt;p&gt;You could go a little further add some custom code to check if the
environment.json file exists, and if it does, you know you are in
production, so use that setup, or if not, then you must be in local
mode, so use your local settings. If you want to get really cool, you
can have your own json file that has a similar setup for local
development, and if it doesn&amp;rsquo;t find the dotcloud one, it could look for
your own, and load your settings from that. This will allow you to use
the same settings file for both production and dev, with only a little
bit of code at the top to load the correct env file.&lt;/p&gt;

&lt;h2 id=&#34;database:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Database&lt;/h2&gt;

&lt;p&gt;Most applications need a database, and this blog is no different. This
is how we setup our database to work with our blog on dotcloud. We are
going to be using mysql for our database. With Django you need to set
your database settings in your settings.py. This is how we setup a mysql
database connection inside of our settings.py. Notice that the name of
the database doesn&amp;rsquo;t come from the env, you pick that yourself.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;DATABASES = {
    &#39;default&#39;: {
        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,
        &#39;NAME&#39;: &#39;blogdb&#39;,
        &#39;USER&#39;: env[&#39;DOTCLOUD_DB_MYSQL_LOGIN&#39;],
        &#39;PASSWORD&#39;: env[&#39;DOTCLOUD_DB_MYSQL_PASSWORD&#39;],
        &#39;HOST&#39;: env[&#39;DOTCLOUD_DB_MYSQL_HOST&#39;],
        &#39;PORT&#39;: int(env[&#39;DOTCLOUD_DB_MYSQL_PORT&#39;]),
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-the-database:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Create the Database&lt;/h2&gt;

&lt;p&gt;dotCloud gives you your own dedicated database, with full root access.
With great power comes great responsibilities. One of those
responsibilities is that you need to create your own database schemas,
and users yourself. Which means you normally need to do something like
this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# connect to dotcloud mysql server instance
$ dotcloud run blog.db -- mysql -u root -p

# mysql -u root -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 34
Server version: 5.1.41-3ubuntu12.10 (Ubuntu)

# create the user and database and give user permissions to database.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

mysql&amp;gt; create database blogdb;
Query OK, 1 row affected (0.00 sec)

mysql&amp;gt; create user &#39;blog_username&#39; identified by &#39;strong_password&#39;;
Query OK, 0 rows affected (0.05 sec)

mysql&amp;gt; grant all on blogdb.* to &#39;blog_user&#39;@&#39;%&#39;;
Query OK, 0 rows affected (0.04 sec)

mysql&amp;gt; flush privileges;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; exit;Bye
Shared connection to database closed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Does that look familiar? I have it here in case you want to do it the
long way.&lt;/p&gt;

&lt;p&gt;To make things easier, we are going to create a small python script that
will check to see if we have our database created, and if not, it will
create it for us. This will make it so that we don&amp;rsquo;t have to login into
our database and do it by hand before we deploy. The file is called
createdb.py and this is what it looks like. This script is for mysql. If
you want a postgreSQL database, you can use this as a template and
change it so that it will work with postgreSQL.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;import MySQLdb
import os
from wsgi import *

def create_dbs(names):
    print(&amp;quot;create_dbs: let&#39;s go.&amp;quot;)
    django_settings = __import__(os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;], fromlist=&#39;DATABASES&#39;)
    print(&amp;quot;create_dbs: got settings.&amp;quot;)
    databases = django_settings.DATABASES
    for name, db in databases.iteritems():
        if name in names and db[&#39;ENGINE&#39;].endswith(&#39;mysql&#39;):
            host = db[&#39;HOST&#39;]
            user = db[&#39;USER&#39;]
            password = db[&#39;PASSWORD&#39;]
            port = db[&#39;PORT&#39;]
            db_name = db[&#39;NAME&#39;]
            print &#39;creating database %s on %s&#39; % (db_name, host)
            db = MySQLdb.connect(user=user,
                                passwd=password,
                                host=host,
                                port=port)
            cur = db.cursor()
            print(&amp;quot;Check if database is already there.&amp;quot;)
            cur.execute(&amp;quot;&amp;quot;&amp;quot;SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA
                         WHERE SCHEMA_NAME = %s&amp;quot;&amp;quot;&amp;quot;, (db_name,))
            results = cur.fetchone()
            if not results:
                print(&amp;quot;Database %s doesn&#39;t exist, lets create it.&amp;quot; % db_name)
                sql = &amp;quot;&amp;quot;&amp;quot;CREATE DATABASE IF NOT EXISTS %s &amp;quot;&amp;quot;&amp;quot; % (db_name,)
                print(&amp;quot;&amp;gt; %s&amp;quot; % sql)
                cur.execute(sql)
                print(&amp;quot;.....&amp;quot;)
            else:
                print(&amp;quot;database already exists, moving on to next step.&amp;quot;)


if __name__ == &#39;__main__&#39;:
    import sys
    print(&amp;quot;create_dbs start&amp;quot;)
    create_dbs(sys.argv[1:])
    print(&amp;quot;create_dbs all done&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;adding-a-cache:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Adding a cache&lt;/h2&gt;

&lt;p&gt;Since most of the blog content doesn&amp;rsquo;t change much, it is a great
candidate for caching. So we are going to take advantage of Django&amp;rsquo;s
built in caching abilities and add some caching to our blog. Normally I
use &lt;a href=&#34;http://memcached.org&#34;&gt;memcached&lt;/a&gt; for my caching, but dotCloud&amp;rsquo;s
memcached support is limited right now. The reason why it is limited is
because memcached doesn&amp;rsquo;t have any built in authentication mechanism,
and in order to make sure it is secure, you need to run a special
version of memcached that supports
&lt;a href=&#34;http://code.google.com/p/memcached/wiki/SASLAuthProtocol&#34;&gt;SASL&lt;/a&gt;, and
most of the memcached clients don&amp;rsquo;t support this. So instead of
deploying an insecure service, they decided to not support it fully.
There are ways to use it, but it involves all kind of complicated
firewall rules and running something like stunnel. So it is possible,
but it isn&amp;rsquo;t very clean.&lt;/p&gt;

&lt;p&gt;Instead they recommend that you use &lt;a href=&#34;http://redis.io&#34;&gt;redis&lt;/a&gt; instead,
redis has the same caching abilities that memcached has, plus a lot
more, including authentication. So we are going to use redis for our
cache. In order to use redis, we will need to add the redis library
because redis caching support isn&amp;rsquo;t built into Django. In your
requirements.txt file you will need to add &lt;code&gt;django-redis==1.4.5&lt;/code&gt; so that
the libraries will be available for Django to use.&lt;/p&gt;

&lt;p&gt;Once you have the library installed, you will need to add these settings
to your settings.py file so that django knows which redis server and
password to use.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;CACHES = {
    &#39;default&#39;: {
        &#39;BACKEND&#39;: &#39;redis_cache.cache.RedisCache&#39;,
        &#39;LOCATION&#39;: env[&#39;DOTCLOUD_CACHE_REDIS_HOST&#39;]+&#39;:&#39;+env[&#39;DOTCLOUD_CACHE_REDIS_PORT&#39;],
        &#39;OPTIONS&#39;: {
            &#39;DB&#39;: 1,
            &#39;PASSWORD&#39;: env[&#39;DOTCLOUD_CACHE_REDIS_PASSWORD&#39;],
            &#39;PARSER_CLASS&#39;: &#39;redis.connection.HiredisParser&#39;
        },
    },
}

# we also are going to use redis for our session cache as well.
SESSION_ENGINE = &#39;django.contrib.sessions.backends.cached_db&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information about using redis as your cache for Django, check
out these links.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/niwibe/django-redis&#34;&gt;https://github.com/niwibe/django-redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pypi.python.org/pypi/django-redis/1.4.5&#34;&gt;http://pypi.python.org/pypi/django-redis/1.4.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/1.3/topics/cache/&#34;&gt;https://docs.djangoproject.com/en/1.3/topics/cache/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://answers.dotcloud.com/question/213/redis-cache-settings-for-django&#34;&gt;http://answers.dotcloud.com/question/213/redis-cache-settings-for-django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;django-admin:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Django Admin&lt;/h2&gt;

&lt;p&gt;We also need an easy way to create our django admin account for us. In
order to do that I have this mkadmin.py script. This will default the
password to &amp;lt;&amp;lsquo;P@s$w0rd1&amp;rsquo;&amp;gt;, once you have your code installed, you will
need to login to the admin account and change your password to something
more secure.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;#!/usr/bin/env python
from wsgi import *
from django.contrib.auth.models import User
u, created = User.objects.get_or_create(username=&#39;admin&#39;)
if created:
    u.set_password(&#39;P@s$w0rd1&#39;)
    u.is_superuser = True
    u.is_staff = True
    u.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;media:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Media&lt;/h2&gt;

&lt;p&gt;We need to put our static and media files in the following locations:
&lt;code&gt;static=/home/dotcloud/data/static/&lt;/code&gt; and
&lt;code&gt;media=/home/dotcloud/data/media/&lt;/code&gt;. Because of this we need to make sure
we change our settings.py file, and setup an nginx.conf file to map to
the correct locations. Here are the settings.py file changes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;# media settings
MEDIA_ROOT = &#39;/home/dotcloud/data/media/&#39;
MEDIA_URL = &#39;/media/&#39;

# static settings
STATIC_ROOT = &#39;/home/dotcloud/data/static/&#39;
STATIC_URL = &#39;/static/&#39;

# admin prefix
ADMIN_MEDIA_PREFIX = &#39;/static/admin/&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the nginx.conf&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode nginx&#34;&gt;location /media/ { root /home/dotcloud/data ; }
location /static/ { root /home/dotcloud/data ; }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;post-install:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Post Install&lt;/h2&gt;

&lt;p&gt;We are going to create a
&lt;a href=&#34;http://docs.dotcloud.com/guides/postinstall/&#34;&gt;postinstall&lt;/a&gt; script to
handle all of the tasks we need to do after we install our code on the
server. This is what will call our createdb.py, and mkadmin.py files
from above, as well as syncing our database, running migrations and
running collectstatic to move all static files into the right locations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;#!/bin/sh
python createdb.py default
python mysite/manage.py syncdb --noinput
python mysite/manage.py migrate
python mkadmin.py
mkdir -p /home/dotcloud/data/media /home/dotcloud/data/static
python mysite/manage.py collectstatic --noinput
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;rsquo;t forget to make sure your postinstall, createdb.py and mkadmin.py
scripts are executable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# make the script executable.
$ chmod +x postinstall createdb.py mkadmin.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dotcloud-yml:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;dotcloud.yml&lt;/h2&gt;

&lt;p&gt;Now that we have our application&amp;rsquo;s project structure all setup and
configured the way dotCloud wants it, we can configure our deployment
stack. This is done with a file called dotcloud.yml. For more
information about the dotcloud.yml file check out this link:
&lt;a href=&#34;http://docs.dotcloud.com/guides/build-file/&#34;&gt;http://docs.dotcloud.com/guides/build-file/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode yaml&#34;&gt;www:
  type: python
db:
  type: mysql
cache:
  type: redis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is telling us that we want 3 services, a python www service, a
mysql db service, and a redis cache service. This is a very basic setup,
and you can get a lot more complicated depending on what you want to
achieve. Notice that this isn&amp;rsquo;t setup for high availability because none
of the instances are scaled. See the section about scaling below for
more information. If you are running in a production app on dotCloud it
is recommended that you scale all of your services so that they can
withstand EC2 server crashes, and other unforeseen issues.&lt;/p&gt;

&lt;h2 id=&#34;deployment:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Deployment&lt;/h2&gt;

&lt;p&gt;Now we are ready to deploy our Django app, but before I go any further
it is important to know the following. Dotcloud will pay attention to
your .gitignore files. If you have a settings file in your .gitignore
file so that it doesn&amp;rsquo;t get saved in the repo, it will not push those
changes up to the cloud. You will need to remove it from the .gitignore
in order to get those files out there. It is also import to remember
that only changes that are committed are pushed, so don&amp;rsquo;t forget to
commit your changes. If you wanted to be tricky you could use a post
install script to pull down the file from a secure location and install
it that way, if you want to make things super secure.&lt;/p&gt;

&lt;p&gt;Everything is all setup, so all we have to do is push our application to
dotCloud.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# push out your changes to the server
$ dotcloud push blog .
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;service-info:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Service info&lt;/h2&gt;

&lt;p&gt;Once you push your code to dotCloud you can see what it looks like by
running the info command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# get the information about our new services
$ dotcloud info blog
cache:
    config:
        redis_password: &amp;lt;password&amp;gt;
        redis_replication: true
    instances: 1
    type: redis
db:
    config:
        mysql_masterslave: true
        mysql_password: &amp;lt;password&amp;gt;
    instances: 1
    type: mysql
www:
    config:
        static: static
        uwsgi_processes: 4
    instances: 1
    type: python
    url: &amp;lt;url was here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;scaling:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Scaling&lt;/h2&gt;

&lt;p&gt;Scaling is the ability to grow your application so that it can handle
more traffic, or possible failures that might occur. With a normal non
PaaS setup, scaling an application can be quite painful and time
consuming, but with a PaaS it can be as easy as running a few commands.
There are three types of scaling, Vertical, Horizontal, High
Availability.&lt;/p&gt;

&lt;p&gt;Vertical scaling, means growing the service you have now so that it can
get bigger. This is popular with databases, the bigger a database gets
the more space and memory it needs.&lt;/p&gt;

&lt;p&gt;Horizontal scaling means creating more then one instance of a service so
it spread the work between the different services, giving you greater
capacity.&lt;/p&gt;

&lt;p&gt;High Availability means that you have more then one service running at a
time, so that if one of the services has an issue, the other one will
pick up the slack. This will help avoid downtime, when failures occur
(EC2 instance crashes). Ideally when running in production, all of your
services should be scaled for High Availability.&lt;/p&gt;

&lt;p&gt;There are two kinds of services, stateful, and stateless. Stateful
services are services that holds persistent data. Examples of stateful
services are mysql, redis, postgresql, solr, MongoDB and RabbitMQ.&lt;/p&gt;

&lt;p&gt;Horizontally High availability scaling a stateful service on dotCloud
means creating a master/slave setup, which can switch the slave with the
master automatically if the master has any issues. dotCloud supports HA
scaling on MySQL, redis, and MongoDB.&lt;/p&gt;

&lt;p&gt;Stateful services scale like this&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;mysql : 2 (master/slave)&lt;/li&gt;
&lt;li&gt;redis : 2 (master/slave)&lt;/li&gt;
&lt;li&gt;mongodb : 3 or 5 (using replica sets)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Scaling a stateless and one of the supported stateful services is the
same. You would just run the scale command line command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ dotcloud scale app db=2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For stateless applications, you are limited to a set number of scaling
units, unless you are on the enterprise plan. If you need to have an
application with lots of scale units, you should contact dotCloud, and
let them know what you are planning to do, and they will advise you on
how best to accomplish your goals.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href=&#34;http://docs.dotcloud.com/guides/scaling/&#34;&gt;http://docs.dotcloud.com/guides/scaling/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;database-backups:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Database Backups&lt;/h2&gt;

&lt;p&gt;Just because you are hosting your application on dotCloud doesn&amp;rsquo;t mean
you shouldn&amp;rsquo;t backup your data. The most important data to backup is
your database. Luckily dotCloud makes it easy to back up your database.
There is a very helpful guide on how to setup your database backups
here: &lt;a href=&#34;http://docs.dotcloud.com/guides/backups/&#34;&gt;http://docs.dotcloud.com/guides/backups/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;email:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Email&lt;/h2&gt;

&lt;p&gt;If you need to send or receive email from your application, you can do
that to. Because dotCloud runs on EC2, and EC2 is a popular place where
SPAMMERS send SPAM from, it is best to use a 3rd party email provider to
send your emails for you. Popular ones are
&lt;a href=&#34;http://mailgun.net/&#34;&gt;MailGun&lt;/a&gt;, &lt;a href=&#34;http://sendgrid.com/&#34;&gt;SendGrid&lt;/a&gt;,
&lt;a href=&#34;http://www.critsend.com/&#34;&gt;CritSend&lt;/a&gt;, and &lt;a href=&#34;http://aws.amazon.com/ses/&#34;&gt;Amazon
SES&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can set this up a couple of different ways. The first way is the
easiest way possible, it allows you to configure the SMTP settings for
each service. You would do it like this (see below). You can manually
set the smtp settings for that service, and when your application needs
to send an email it will use those settings. This is the most simple
setup, but there are downsides to this approach. You would need to set
this for each service, if you have more then one that will be duplicated
everywhere. Also if you want to change your settings, you will need to
destroy your service and recreate it, since those configs can only be
set once when the service is created.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode yaml&#34;&gt;www:
  type: python
  config:
    smtp_server: smtp.mailgun.org
    smtp_port: 25
    smtp_username: postmaster@company.com
    smtp_password: YourMailGunPassword
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A better approach would be to use dotCloud&amp;rsquo;s SMTP service. The SMTP
service is built to receive emails from your services and forward them
to the appropriate location. It is best to use a 3rd party email
provider, but you can also use the typical poor mans solution, where you
use gmail to send your emails. Be careful when using gmail, because you
aren&amp;rsquo;t aloud to send a lot of emails via gmail, once you hit your daily
limit you will be blocked, so this is fine for a few emails a day, don&amp;rsquo;t
trust it for everyday stuff. Also, the emails will always be coming from
your gmail address, fine for system emails, but not if you are trying to
run a legit business.&lt;/p&gt;

&lt;p&gt;Here is an example using mailgun.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode yaml&#34;&gt;mailer:
  type: smtp
  config:
    smtp_relay_server: smtp.mailgun.org
    smtp_relay_port: 587
    smtp_relay_username: postmaster@yourmailgundomain.com
    smtp_relay_password: YourMailgunPassword
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example using gmail.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode yaml&#34;&gt;mailer:
  type: smtp
  config:
    smtp_relay_server: smtp.gmail.com
    smtp_relay_port: 587
    smtp_relay_username: your_gmail_username@gmail.com
    smtp_relay_password: Your_Gmail_Password
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have these all setup, they will be available in your
environment.json file.&lt;/p&gt;

&lt;p&gt;If you want to receive email, it is best to use a service like
&lt;a href=&#34;http://mailgun.net/&#34;&gt;MailGun&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.dotcloud.com/guides/emails/&#34;&gt;http://docs.dotcloud.com/guides/emails/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.dotcloud.com/services/smtp/&#34;&gt;http://docs.dotcloud.com/services/smtp/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cron-jobs:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Cron jobs&lt;/h2&gt;

&lt;p&gt;If your app needs to run cron jobs, follow the steps in this guide:
&lt;a href=&#34;http://docs.dotcloud.com/guides/periodic-tasks/&#34;&gt;http://docs.dotcloud.com/guides/periodic-tasks/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;celery:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Celery&lt;/h2&gt;

&lt;p&gt;This blog doesn&amp;rsquo;t really have a need for celery, but dotCloud does
support it. For more information follow this link:
&lt;a href=&#34;http://docs.dotcloud.com/tutorials/python/django-celery/&#34;&gt;http://docs.dotcloud.com/tutorials/python/django-celery/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;s3fs:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;S3FS&lt;/h2&gt;

&lt;p&gt;If you store data on s3 you can mount your s3 bucket so that you can
have access to s3 from your application, just like it was a local
directory on your container. This is helpful for storing files that are
uploaded by your visitors, or to share files between different web
processes. Follow these instructions to set it up:
&lt;a href=&#34;http://docs.dotcloud.com/guides/s3fs/&#34;&gt;http://docs.dotcloud.com/guides/s3fs/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;logs:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Logs&lt;/h2&gt;

&lt;p&gt;If you need to look at the logs to see how it is going you can do it two
ways. The first way will tail your logs for you to your console.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# look at logs of your service, it will tail them to your console. ctrl-c to stop.
$ dotcloud logs blog.www
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or login via ssh and look at your logs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# Open up a shell
$ dotcloud ssh blog.www
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are the ones you most likely care about.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# nginx access and error logs.
/var/log/nginx/&amp;lt;app_name&amp;gt;.{access,error}.log

# wsgi error logs
/var/log/supervisor/uswgi.log
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;restart-service:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Restart Service&lt;/h2&gt;

&lt;p&gt;If you need to restart your service just issue this command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# restart the service
dotcloud restart blog.www
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;links:8d0e410e0ddddb0ed1940349f9f087b6&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Read how this service stacks up against other services like it in my
&lt;a href=&#34;http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/&#34;&gt;Django hosting
roundup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dotCloud.com&#34;&gt;http://www.dotCloud.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>The Developers Guide to PCI Compliant Web applications</title>
      <link>http://www.kencochrane.net/blog/2012/01/developers-guide-to-pci-compliant-web-applications/</link>
      <pubDate>Wed, 25 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2012/01/developers-guide-to-pci-compliant-web-applications/</guid>
      <description>

&lt;p&gt;&lt;em&gt;last updated: 12-07-2012 by Ken Cochrane&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update: 12-07-2012&lt;/strong&gt; I have added the youtube video and slides from a
recent talk I did on Building PCI Complaint Django Applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update: 04-05-2012&lt;/strong&gt; This article has been &lt;a href=&#34;http://www.ituring.com.cn/article/1372&#34;&gt;translated into
chinese&lt;/a&gt; , by Wujun Shen
(吴峻申)&lt;/p&gt;

&lt;p&gt;When I first started working at &lt;a href=&#34;http://CashStar.com&#34;&gt;CashStar.com&lt;/a&gt;
three and a half years ago, I had heard about PCI before, but I didn&amp;rsquo;t
really know what that meant. Since we were building an ecommerce
platform that was going to be accepting credit cards over the internet,
I knew we needed to make sure we were fully PCI compliant. We were a
startup, we didn&amp;rsquo;t have much money, and any mistake could kill the
company. Since I didn&amp;rsquo;t want to be the one to make the mistake, I spent
a lot of time doing research on PCI, and what it took to make sure your
web application was secure.&lt;/p&gt;

&lt;p&gt;The first thing that I did was a simple web search, and I was surprised
to find out that there really wasn&amp;rsquo;t much information available. Most of
the information that was available, wasn&amp;rsquo;t easily understandable, and
was a little vague. There were companies that you could hire, that would
guide you through the process, but since we didn&amp;rsquo;t have much money, they
weren&amp;rsquo;t an option for us. So I did what any geek in my situation would
do, I spent a bunch of my time reading and researching as much as I
could on PCI, and figured my way through the PCI hell, until we were
fully PCI compliant.&lt;/p&gt;

&lt;p&gt;My goal with this blog post is write all of my information down, so that
I can hopefully help others through the process, and also to serve as a
reminder to me, so that when I need to do this again in the future, I
will remember every last detail. I hoping to keep this as a sort of live
document, and I&amp;rsquo;ll try to keep it up to date as time goes forward and
things change. If you notice something is incorrect or I&amp;rsquo;m missing
something, please leave a comment and I&amp;rsquo;ll do my best to update the post
as soon as I can.&lt;/p&gt;

&lt;h1 id=&#34;what-is-pci:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;What is PCI?&lt;/h1&gt;

&lt;p&gt;The first thing most people ask is &amp;ldquo;What is PCI?&amp;rdquo;. PCI is short for the
Payment Card Industry Security Standards Council. PCI consists of
American Express, Discover Financial Services, JCB, MasterCard, and
Visa, and was formed on Sept 7th, 2006.&lt;/p&gt;

&lt;p&gt;The main purpose of creating the PCI SSC, was to come up with a common
set of security standards that merchants could use to better protect
themselves against hackers. The PCI SSC came up with the Payment Card
Industry Data Security Standard (PCI DSS), which consists of 12
requirements, and many sub-requirements that merchants would need to
follow in order to accept debit, credit, prepaid, ATM or POS cards from
the PCI SSC members.&lt;/p&gt;

&lt;h1 id=&#34;why-was-pci-created:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Why was PCI created?&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;It was created in response to a spike in data security breaches.&lt;/li&gt;
&lt;li&gt;It gives merchants a guide to help them make sure they are following
best security practices when it comes to card holder data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;does-pci-affect-me:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Does PCI affect me?&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Do you accept payment online or over the phone with credit/debit
cards?&lt;/li&gt;
&lt;li&gt;Is the credit card information posted to YOUR server?&lt;/li&gt;
&lt;li&gt;Do you store credit card information, encrypted or not?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you said yes to any of those, then PCI affects you in one way or
another.&lt;/p&gt;

&lt;h1 id=&#34;pci-dss-requirements:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;PCI DSS Requirements&lt;/h1&gt;

&lt;p&gt;Here is the list of 12 requirements. As you look them over, you will
notice that most of them aren&amp;rsquo;t that complicated, and you might already
be doing thing already. Most of them are just common sense, but it is
amazing how many people still don&amp;rsquo;t do things, even if it is common
sense.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install and maintain a firewall configuration to protect cardholder
data&lt;/li&gt;
&lt;li&gt;Do not use vendor-supplied defaults for system passwords and other
security parameters&lt;/li&gt;
&lt;li&gt;Protect stored cardholder data&lt;/li&gt;
&lt;li&gt;Encrypt transmission of cardholder data across open, public networks&lt;/li&gt;
&lt;li&gt;Use and regularly update anti-virus software on all systems commonly
affected by malware&lt;/li&gt;
&lt;li&gt;Develop and maintain secure systems and applications&lt;/li&gt;
&lt;li&gt;Restrict access to cardholder data by business need-to-know&lt;/li&gt;
&lt;li&gt;Assign a unique ID to each person with computer access&lt;/li&gt;
&lt;li&gt;Restrict physical access to cardholder data&lt;/li&gt;
&lt;li&gt;Track and monitor all access to network resources and cardholder
data&lt;/li&gt;
&lt;li&gt;Regularly test security systems and processes&lt;/li&gt;
&lt;li&gt;Maintain a policy that addresses information security&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;pci-in-layman-s-terms:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;PCI in Layman&amp;rsquo;s Terms&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;All Merchants, regardless if credit card data is stored, must
achieve and maintain compliance at all times.&lt;/li&gt;
&lt;li&gt;Merchants cannot store certain credit card information including
CVV, track data, magnetic strip or PIN data&lt;/li&gt;
&lt;li&gt;If you store permitted credit card data, you need to store it in a
secure way following the PCI security standards.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;how-does-pci-certification-work:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;How does PCI Certification work?&lt;/h1&gt;

&lt;p&gt;PCI Certification works like this. If you want to accept credit or debit
cards you need to agree that you will maintain PCI certification at all
times. There are a couple of ways to confirm that you are certified. You
need to either fill out a Self-Assessment Questionnaire (SAQ) or a
Report on Compliance (RoC). I&amp;rsquo;ll go over the difference in a little bit,
but the important part to remember is that you need to fill out some
paper work, and then usually submit that paperwork to whomever requests
it, usually the company that processes your credit cards and handles
your merchant account.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Fill out a Self-Assessment Questionnaire (SAQ) and Find out what
level you are&lt;/li&gt;
&lt;li&gt;Make sure you follow all recommendations for that level&lt;/li&gt;
&lt;li&gt;Fix any issues&lt;/li&gt;
&lt;li&gt;Attestation of Compliance (if self assessing)&lt;/li&gt;
&lt;li&gt;External Auditor (if needed)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;how-to-get-started:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;How to get started?&lt;/h1&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Identify the individuals that will be responsible for PCI
compliance in your organization and assemble a team that includes
members from each area.&lt;/li&gt;
&lt;li&gt;Determine your merchant level (1-4).&lt;/li&gt;
&lt;li&gt;Determine which SAQ your organization will need to complete.&lt;/li&gt;
&lt;li&gt;Evaluate whether your organization will try to achieve compliance
internally or engage with aQualified Security Assessor (QSA).&lt;/li&gt;
&lt;li&gt;Engage with an Approved Scanning Vendor (ASV) to start the
required external IP vulnerability scans.&lt;/li&gt;
&lt;li&gt;Make sure that your organization has an Information Security
Policy and that it is being enforced.&lt;/li&gt;
&lt;li&gt;Immediately address any significant deficiencies discovered during
the assessment or scan.&lt;/li&gt;
&lt;li&gt;Retain record of self-assessments, scans, and
follow-up activities. Be prepared to provide these documents
upon request.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;what-pci-level-am-i:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;What PCI Level am I?&lt;/h1&gt;

&lt;p&gt;There are 4 PCI compliance level&amp;rsquo;s, and how many transactions you
process a year will determine which level you are in.&lt;/p&gt;

&lt;h2 id=&#34;merchant-level:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Merchant Level&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Level 1&lt;/strong&gt; : Merchants processing over 6 million Visa transactions
annually (all channels) or Global merchants identified as Level 1 by any
Visa region&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level 2&lt;/strong&gt; : Merchants processing 1 million to 6 million Visa
transactions annually (all channels)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level 3&lt;/strong&gt; : Merchants processing 20,000 to 1 million Visa e-commerce
transactions annually&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level 4&lt;/strong&gt; : Merchants processing less than 20,000 Visa e-commerce
transactions annually and all other merchants processing up to 1 million
Visa transactions annually&lt;/p&gt;

&lt;h2 id=&#34;requirements:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Level 1&lt;/strong&gt; : Onsite Security Assessment Required Annually, Network
Vulnerability Scan required Quarterly&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level 2&lt;/strong&gt; : Onsite Security Assessment at Merchants Discretion,
Self-Assessment Questionnaire Required Annually, Network Vulnerability
Scan Required Quarterly&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level 3&lt;/strong&gt; : Self-Assessment Questionnaire Required Annually, Network
Vulnerability Scan Required Quarterly&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level 4&lt;/strong&gt; : Self-Assessment Questionnaire Required Annually, Network
Vulnerability Scan Required Quarterly&lt;/p&gt;

&lt;h1 id=&#34;roc-or-saq:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;RoC or SAQ?&lt;/h1&gt;

&lt;p&gt;If you are a Level 1 then you need to fill out a RoC, if you are level
2, 3 or 4, then you can fill out an SAQ. There are some exceptions to
these rules, for example, if you have had a security breach in the past,
the credit card companies might require that you complete a RoC even if
you aren&amp;rsquo;t a level 1.&lt;/p&gt;

&lt;h1 id=&#34;report-on-compliance-roc:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Report on Compliance (RoC)&lt;/h1&gt;

&lt;p&gt;If you process more than six million credit cards per year (Level 1),
you are required to have an on-site PCI assessment and Report on
Compliance (RoC) issued by a Qualified Security Assessor (QSA). Other
Level 2 organizations may also be required to submit a RoC or choose to
do so in anticipation of becoming a Level 1 merchant.&lt;/p&gt;

&lt;p&gt;QSA’s can be engaged to provide this annual review. It includes a review
of established processes and procedures for networks, servers and
databases in scope for PCI compliance. The engagement involves
interviews with stakeholders in your organization, a review of
supporting documentation, validation of compliance initiatives and
completion of the report itself.&lt;/p&gt;

&lt;p&gt;QSA’s usually encourage their PCI Customers to use a PCI compliance
management solution throughout the year. This will assist them with
maintaining compliance and should make the on-site engagement and the
completion of the RoC faster and smoother.&lt;/p&gt;

&lt;h1 id=&#34;self-assement-questionnaire:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Self-Assement Questionnaire&lt;/h1&gt;

&lt;p&gt;There are 5 SAQ categories, depending on which category that you fall
into, the paper work might be real easy, it might take a lot longer.
Here are the 5 categories.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SAQ-A&lt;/strong&gt; : Card-not-present (e-commerce or mail/telephone-order)
merchants, all cardholder data functions outsourced. This would never
apply to face-to-face merchants.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SAQ-B&lt;/strong&gt; : Imprint-only merchants with no electronic cardholder data
storage, or standalone, dial- out terminal merchants with no electronic
cardholder data storage&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SAQ-C-VT&lt;/strong&gt; : Merchants using only web-based virtual terminals, no
electronic cardholder data storage&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SAQ-C&lt;/strong&gt; : Merchants with payment application systems connected to the
Internet, no electronic cardholder data storage&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SAQ-D&lt;/strong&gt; : All other merchants not included in descriptions for SAQ
types A through C above, and all service providers defined by a payment
brand as eligible to complete an SAQ.&lt;/p&gt;

&lt;p&gt;Since we are only talking about web applications here, you will most
likely only fall into either A, C, or D. Once you know your level you
will need to fill out the SAQ for that category. Once you are done you
need an Attestation of compliance as well.&lt;/p&gt;

&lt;p&gt;Here is a helpful guide to help you figure out what category you a fall
into.&lt;/p&gt;

&lt;h2 id=&#34;saq-a:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;SAQ-A&lt;/h2&gt;

&lt;p&gt;There are a lot of different parts to A, but the big one, is that the
credit card data never touches your servers. The easiest way to do this
is to redirect people to someone else&amp;rsquo;s servers when you want them to
enter credit card data. This is common with Paypal, google checkout and
Amazon payments.&lt;/p&gt;

&lt;p&gt;Another way around this is to have your payment page hosted by your
credit card gateway. An example of this is authorize.net&amp;rsquo;s &lt;a href=&#34;http://www.authorize.net/solutions/merchantsolutions/merchantservices/simplecheckout/&#34;&gt;Simple
Checkout&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A third way of doing this is what is called &amp;ldquo;transparent redirect&amp;rdquo; or
&amp;ldquo;Direct Post&amp;rdquo;,
&lt;a href=&#34;http://www.braintreepayments.com/services/pci-compliance&#34;&gt;BrainTreePayments&lt;/a&gt;
was the first to make this popular, but since then
&lt;a href=&#34;http://developer.authorize.net/api/dpm&#34;&gt;Authorize.net&lt;/a&gt; has also added
it.&lt;/p&gt;

&lt;p&gt;And finally the last way, is basically similar to the third way, but it
uses javascript to encrypt the credit card data, send it to the credit
card processor, and then populate the form with unique tokens, which
will be used later on. This approach is used by
&lt;a href=&#34;http://stripe.com&#34;&gt;stripe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;BrainTree + livingsocial talk about this new approach of &lt;a href=&#34;http://www.braintreepayments.com/devblog/end-to-end-encryption&#34;&gt;end to end
encryption of credit card
data&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;saq-c:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;SAQ-C&lt;/h2&gt;

&lt;p&gt;If you are hosting the payment form on your own server, and when you hit
submit on that form it goes to your server, where you parse the form,
get the credit card details out of the fields, build up your request and
then send it to the credit card processor yourself. Then you are at
least a C. Even if you aren&amp;rsquo;t storing the data, because it is available
in your computer memory, and you are touching it with your code, there
is risk that something could happen and you would be able to get access
to the credit card data.&lt;/p&gt;

&lt;h2 id=&#34;saq-d:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;SAQ-D&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t fall into the other categories then you are a D. SAQ D is
sometimes referred to as ROC light, because any organization that has to
fill out SAQ D is essentially going through all 12 PCI DSS requirements,
albeit on a reduced scale.&lt;/p&gt;

&lt;h1 id=&#34;how-much-does-pci-cost:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;How much does PCI Cost?&lt;/h1&gt;

&lt;p&gt;It is really hard to get an accurate value for this because it will be
different for everyone, but according to BrainTree here is a chart on
&lt;a href=&#34;http://www.braintreepayments.com/blog/what-does-it-cost-to-become-pci-compliant&#34;&gt;how much it costs to become PCI
Compliant&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Level   # of Trans   Scope    Compliance   Audit type&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;1       6M+           \$125K   \$586K       onsite
  2       1M-6M         \$105K   \$267K       SAQ
  3       20K-1M        \$44K    \$81K        SAQ
  4       &amp;lt; 20K      ?        ?            SAQ&lt;/p&gt;

&lt;h1 id=&#34;external-audits:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;External Audits&lt;/h1&gt;

&lt;p&gt;Level     Cost Per Year&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Low End   \$20K-\$30K
  Average   \$225K
  Top 10%   \$500K+&lt;/p&gt;

&lt;p&gt;If you are big enough or unlucky enough to require an external audit, it
isn&amp;rsquo;t going to be cheap. Audits last a few weeks or more onsite, and
cost anywhere from \$20K-\$30K on the low end. They average around
\$225K a year, and about 10% of the audits cost over \$500K. As you can
see this is a really expensive annual cost, and should be avoided if
possible.&lt;/p&gt;

&lt;p&gt;It is also important to point out that this is just the cost of the
audit itself, if they find anything wrong in the audit, you will need to
pay to fix any of the issues before they will certify you.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;Here are some links where I got my data.&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.networkworld.com/news/2010/030110-pci-compliance-audit-cost.html&#34;&gt;http://www.networkworld.com/news/2010/030110-pci-compliance-audit-cost.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.elementps.com/element_payment_solutions/2009/02/pci-compliance-costs.html&#34;&gt;http://blog.elementps.com/element_payment_solutions/2009/02/pci-compliance-costs.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infosecisland.com/blogview/12356-Five-Questions-to-Ask-Your-PCI-Auditor-Before-You-Hire-Them.html&#34;&gt;https://www.infosecisland.com/blogview/12356-Five-Questions-to-Ask-Your-PCI-Auditor-Before-You-Hire-Them.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;h1 id=&#34;pci-2-0:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;PCI 2.0&lt;/h1&gt;

&lt;p&gt;On October 26th 2010, PCI DSS version 2.0 was released. Here are some of
the highlights.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;132 changes, 2 new ones, the rest are clarifications or additional
guidelines&lt;/li&gt;
&lt;li&gt;Added more guidelines around virtualization, and how it affects PCI&lt;/li&gt;
&lt;li&gt;Amazon web services (AWS) is now a Level 1 PCI compliant
data center.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;nitty-gritty:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Nitty Gritty&lt;/h1&gt;

&lt;p&gt;Now that you know what PCI is all about, lets get down to the nitty
gritty. The most common questions I&amp;rsquo;m asked is what is the easiest way
to become PCI certified. Here is what I tell people.&lt;/p&gt;

&lt;p&gt;First off, avoid handling credit card data if you can help it. It has
become a lot easier lately with Braintree and stripe. Years ago before
these solutions were available, the only way to do it was to use an ugly
hosted payment page on your credit card gateway, and it wasn&amp;rsquo;t very
good, and hard to integrate, so most people didn&amp;rsquo;t use those solutions.&lt;/p&gt;

&lt;p&gt;Now you have no excuse, let the credit card processor handle all of the
credit card data, and it will make your life easier. If you want to see
how much easier, go to the &lt;a href=&#34;https://www.pcisecuritystandards.org&#34;&gt;PCI security
standards&lt;/a&gt; website and download
the &lt;a href=&#34;https://www.pcisecuritystandards.org/documents/pci_saq_a_v2.doc&#34;&gt;SAQ
A&lt;/a&gt; and
the &lt;a href=&#34;https://www.pcisecuritystandards.org/documents/pci_saq_c_v2.doc&#34;&gt;SAQ
C&lt;/a&gt;
docs. You will notice that the SAQ A is much easier, and a lot less of a
hassle.&lt;/p&gt;

&lt;p&gt;As great as the Briantree and stripe solutions are they can&amp;rsquo;t solve all
problems. One common problem is accepting credit card data over an API,
more and more common these days with mobile applications. If you can&amp;rsquo;t
use one of the other solutions for one reason or another, you can check
out &lt;a href=&#34;http://www.akamai.com/html/solutions/security/edge_tokenization.html&#34;&gt;Edge
Tokenization&lt;/a&gt;
from Akamai, it will work for both API and web based payment forms. It
is pretty expensive, but if you are already using some of akamai&amp;rsquo;s other
solutions then this might not be as big of an issue.&lt;/p&gt;

&lt;p&gt;If you still need/want to accept credit card data on your own server
after everything that I said above, then you are going to need to know
about some other things. For example, here are a list of common mistakes
that most people make.&lt;/p&gt;

&lt;h1 id=&#34;common-pci-mistakes:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Common PCI Mistakes&lt;/h1&gt;

&lt;p&gt;Here is a list of common mistakes most people make. I&amp;rsquo;m listing them
here so that you can catch these mistakes before it is too late. If I
missed any, let me know.&lt;/p&gt;

&lt;h2 id=&#34;storing-credit-card-information-in-plain-text:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Storing credit card information in plain text&lt;/h2&gt;

&lt;p&gt;Ideally, you should never store credit card information, but if you have
to, you should always encrypt the data, so that if someone gets ahold of
your data, they won&amp;rsquo;t be able to see it unless they put in a lot of
effort.&lt;/p&gt;

&lt;h2 id=&#34;default-passwords-not-changed:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Default passwords not changed&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m always surprised to here how weak peoples passwords are, and how
most of the time they are still using the first one that was given to
them when they started. That is why if you are the one generating a
password, make it a secure one, so that if the people don&amp;rsquo;t change the
password like you told them too, it will at least be a secure one to
begin with.&lt;/p&gt;

&lt;p&gt;There are really good password management tools on the market today, I
recommend using one of them. One of my favorites is
&lt;a href=&#34;https://agilebits.com/onepassword&#34;&gt;1password&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;remove-all-programs-not-needed-from-your-servers:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Remove all programs not needed from your servers&lt;/h2&gt;

&lt;p&gt;There are a couple reasons why you would want to remove any
programs/software from your computer if you are not using it. The first
one, it will take up less space, and if it isn&amp;rsquo;t running it will free up
processor and RAM, a faster system is always good. The second reason is
so that you don&amp;rsquo;t have to maintain the security patches for something
you aren&amp;rsquo;t using. So, the first step you should do when you bring a new
server online is to remove all of the stuff you aren&amp;rsquo;t using. You can
always add it back later.&lt;/p&gt;

&lt;h2 id=&#34;use-a-firewall:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Use a Firewall&lt;/h2&gt;

&lt;p&gt;You should always use a firewall, it doesn&amp;rsquo;t matter if it is a hardware
firewall or a software firewall, use it, and never turn it off. In some
of my production systems I run both a hardware firewall coming into my
private network and then a software firewall on each system. Some people
think this is overkill, but I would rather be safer then sorry.&lt;/p&gt;

&lt;p&gt;Just running the firewall is only part of it, you need to know how the
firewall is setup, and why. You should always have a document around
with a list of which ports are open and why. This will be very helpful
later on, when you get audited and they want to know what ports are
open, and the reasons for it.&lt;/p&gt;

&lt;p&gt;You should do a quarterly review of your firewalls to make sure they
match your documentation, and to see if any of the ports that were
previously open still need to be open. Systems change over time, and
sometimes you will remove a service that isn&amp;rsquo;t needed anymore, and when
that happens you should also block the port.&lt;/p&gt;

&lt;p&gt;You could also use a service like &lt;a href=&#34;http://cloudflare.com&#34;&gt;CloudFlare&lt;/a&gt;
that protect your website from a range of online threats from spammers
to SQL injection to DDOS. It is easy to setup, and your code changes
should be minimal at most.&lt;/p&gt;

&lt;h2 id=&#34;poorly-coded-websites:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Poorly coded websites&lt;/h2&gt;

&lt;p&gt;If the programmers who are writing your web application aren&amp;rsquo;t careful,
and don&amp;rsquo;t know what they are doing, they could write bad code which
could result in SQL injection and other vulnerabilities.&lt;/p&gt;

&lt;p&gt;Cross Site Scripting (XSS) is becoming a more and more common way of
attacking websites these days, so make sure you are careful of that as
well.&lt;/p&gt;

&lt;p&gt;Make sure you always conduct code reviews, and use application
penetration testing before you put your code into production.&lt;/p&gt;

&lt;h2 id=&#34;lack-of-monitoring-and-logging:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Lack of monitoring and logging&lt;/h2&gt;

&lt;p&gt;It is amazing how many companies have no system or application
monitoring, it is like they are running blind, they have no idea when
something is going wrong until their customers tell them. You should
have as much monitoring and logging as possible, so that you know what
is happening with your system at all times. If you don&amp;rsquo;t log when things
are going well, then when stuff starts going bad you will have no idea
what things are suppose to look like when things are good.&lt;/p&gt;

&lt;p&gt;Here is a list of tools that will help you with your logging and
monitoring.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://pingdom.com&#34;&gt;Pingdom&lt;/a&gt; Is a website monitoring tool, they
will tell you when your site is down.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nagios.org/&#34;&gt;Nagios&lt;/a&gt; offers complete monitoring and
alerting for servers, switches, applications, and services.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cacti.net/&#34;&gt;Cacti&lt;/a&gt; is a complete network graphing
solution designed to harness the power of RRDTool&amp;rsquo;s data storage and
graphing functionality.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dcramer/sentry&#34;&gt;Sentry&lt;/a&gt; Open Source realtime
event logging and aggregation platform&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://loggly.com/&#34;&gt;Loggly&lt;/a&gt; Log management cloud service for
centralized log search and analysis, time series data.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;graphite&lt;/a&gt; Scalable Realtime Graphing
server&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://collectd.org/&#34;&gt;collectd&lt;/a&gt; is a daemon which collects system
performance statistics periodically and provides mechanisms to store
the values in a variety of ways, for example in RRD files.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mmonit.com/&#34;&gt;monit&lt;/a&gt; Easy, proactive monitoring of Linux/Unix
systems, network and cloud services.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://munin-monitoring.org/&#34;&gt;munin&lt;/a&gt; Munin is a networked resource
monitoring tool that can help analyze resource trends.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://NewRelic.com&#34;&gt;New Relic&lt;/a&gt; is the only tool you need to
pinpoint and solve performance issues in your Ruby, Java, .NET, PHP
and Python apps.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://PagerDuty.com&#34;&gt;Pager Duty&lt;/a&gt; Phone &amp;amp; SMS alerting and on-call
scheduling for Nagios, Zenoss, Munin, Monit, and most other IT
monitoring tools.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;missing-security-patches:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Missing security patches&lt;/h2&gt;

&lt;p&gt;It is important that you regularly schedule applying all security
patches on all of your systems. This is a no brainer but it is amazing
how much this doesn&amp;rsquo;t happen.&lt;/p&gt;

&lt;p&gt;You should also subscribe to all of the security alert email lists for
any of the products that you are using, as well as paying attention the
following list of websites below. The sooner you get notified of a
potential problem the sooner you can fix it before it effects you.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.us-cert.gov/cas/&#34;&gt;http://www.us-cert.gov/cas/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://seclists.org/&#34;&gt;http://seclists.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sans.org/newsletters/&#34;&gt;http://www.sans.org/newsletters/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;not-using-ssl-for-payment-page:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Not using SSL for payment page&lt;/h2&gt;

&lt;p&gt;Another no brainer, but sometimes it happens. You should add code to
your web applications that check to make sure that the payment pages are
served over SSL, if not, do a redirect to the SSL version of the page.&lt;/p&gt;

&lt;p&gt;An easy way to do this is to serve the whole site over SSL all of the
time, and then do a simple redirect with your web server from port 80
(http) over to port 443(https). This will guarantee that all traffic is
served over SSL all of the time.&lt;/p&gt;

&lt;h2 id=&#34;logging-payment-information:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Logging payment information&lt;/h2&gt;

&lt;p&gt;One of the most common mistakes that I see is when someone has their
logging setup to print out data from the payment form to the logs. This
is great for debugging purposes but bad for PCI. You should always strip
out the important information out of the request before logging it. You
can replace the credit card number with **last4 and get the same
result.&lt;/p&gt;

&lt;p&gt;Another common mistake that is similar is dumping all of the data when
there is an error and emailing it to the developers. If you do this as
well, make sure you strip out the credit card info first or else that
person&amp;rsquo;s credit card information is now emailed all over the place,
which isn&amp;rsquo;t good at all.&lt;/p&gt;

&lt;h1 id=&#34;credit-card-data-that-can-be-stored:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Credit card data that can be stored&lt;/h1&gt;

&lt;p&gt;It is important that you NEVER EVER store credit card information in the
database, even if it is encrypted. It isn&amp;rsquo;t worth the hassle, risk and
the cost of handling an external audit. But if you absolutely insist,
here is something you need to know.&lt;/p&gt;

&lt;p&gt;If for some reason you ignore my advice and decide to store credit card
data anyway, here is a little chart that will show you which data is
allowed to be stored, and If it needs to be encrypted or not.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;According to 3.3 Mask PAN when displayed (the first six and last
four digits are the maximum number of digits to be displayed). That
means, you need to do something like this *****1234 Visa instead
of the actual credit card number. This is pretty common these days.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;According to 3.4 : Render PAN unreadable anywhere it is stored
(including on portable digital media, backup media, and in logs) by
using any of the following approaches:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;One-way hashes based on strong cryptography (hash must be of
the entire PAN) [ One-way hash functions such as the Secure
Hash Algorithm (SHA) based on strong cryptography can be used
to render cardholder data unreadable. Hash functions are
appropriate when there is no need to retrieve the original
number (one-way hashes are irreversible) To complicate the
creation of rainbow tables it is recommended, but not a
requirement, that a salt value be input to the hash function
in addition to the PAN.]&lt;/li&gt;
&lt;li&gt;Truncation (hashing cannot be used to replace the truncated
segment of PAN)&lt;/li&gt;
&lt;li&gt;Index tokens and pads (pads must be securely stored)&lt;/li&gt;
&lt;li&gt;Strong cryptography with associated key-management processes
and procedures&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+
|                     | Storage Permitted    | Protection Required      |
+=====================+======================+==========================+
|                     | &lt;strong&gt;Cardholder Data&lt;/strong&gt;  |                          |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+
| Account Number      | &amp;gt; Y                  | &amp;gt; Y                      |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+
| Cardholder data     | &amp;gt; Y                  | &amp;gt; N                      |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+
| Expiration Date     | &amp;gt; Y                  | &amp;gt; N                      |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+
| Service Code        | &amp;gt; Y                  | &amp;gt; N                      |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+
|                     | **Authentication   | ta**                   |
|                     | Da                   |                          |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+
| Magnetic Strip      | &amp;gt; N                  | &amp;gt; n/a                    |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+
| CVV                 | &amp;gt; N                  | &amp;gt; n/a                    |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+
| Pin Data            | &amp;gt; N                  | &amp;gt; n/a                    |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&lt;/p&gt;

&lt;h1 id=&#34;tokenization:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Tokenization&lt;/h1&gt;

&lt;p&gt;If you need to store credit card information, it is best to use a
&lt;a href=&#34;http://en.wikipedia.org/wiki/Tokenization_(data_security&#34;&gt;tokenization&lt;/a&gt;)
service instead of storing it yourself. You store the credit card
information in their system. They give you a unique token that you use
for all future transactions against that credit card. These types of
service are pretty common these days, just ask your credit card
processor if they have such a service. Here are a couple of credit card
processors that provide this sort of service.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.authorize.net/solutions/merchantsolutions/merchantservices/cim/&#34;&gt;Authorize.net
CIM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.braintreepayments.com/services/payment-gateway&#34;&gt;BrainTree
Vault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stripe.com/docs/stripe.js&#34;&gt;Stripe.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://recurly.com&#34;&gt;Recurly.com subscription based billing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;data-centers:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Data Centers&lt;/h1&gt;

&lt;p&gt;When you are dealing with PCI compliance you need to worry about the
full stack, not just your application, but also the server the
application lives on, the network your server is connected to, and the
data center your server lives in. The first thing you will want to do is
contact your your hosting provider to see if they are PCI compliant, and
if so, you might want to request a copy of their PCI documents for your
records (you might need them later). Usually hosting providers that are
PCI compliant brag about it on their web pages, so that is usually a
good place to start.&lt;/p&gt;

&lt;p&gt;The smaller the hosting company that you deal with the smaller the
chance you will be PCI compliant. If you are just using a shared hosting
plan, and paying \$20/month, most likely you are not compliant. You
might get lucky, but I doubt it. If you are using a PAAS or a cloud
provider, you will also most likely be out of luck.&lt;/p&gt;

&lt;h1 id=&#34;hosting-in-the-cloud:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Hosting in the Cloud&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://aws.amazon.com&#34;&gt;Amazon Web Services&lt;/a&gt; (AWS) has recently had
their data centers meet PCI compliance, but what is important to note is
that just because the data center in compliant, doesn&amp;rsquo;t mean that your
application is going to be. If you put your application on EC2, and you
accept credit card data that is getting processed on those EC2
instances, you will need to make sure that you also have an Intrusion
Detection System (IDS) amongst other things in place or else you aren&amp;rsquo;t
PCI compliant. All of the good IDS&amp;rsquo;s are hardware based, and have
someone monitoring the traffic at all times. You can&amp;rsquo;t install those
systems in AWS, so you will need to rely on a software based solution,
which isn&amp;rsquo;t as good, and adds another layer of complexity to your
network stack.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://Rackspace.com&#34;&gt;RackSpace&lt;/a&gt; offers a &lt;a href=&#34;http://www.rackspace.com/hosting_solutions/hybrid_hosting/&#34;&gt;hybrid cloud
hosting&lt;/a&gt;
setup, which allows you to have hardware firewall, IDS, Load balancers,
cloud web servers and hardware database servers. But even in this setup,
it isn&amp;rsquo;t PCI compliant, at least I haven&amp;rsquo;t been able to get RackSpace to
tell me it is yet.&lt;/p&gt;

&lt;p&gt;There are other cloud providers that might be able to offer you a
complete PCI compliant solution, but I&amp;rsquo;m guessing they are going to cost
more money. If you know of one, please let me know and I&amp;rsquo;ll update this.
&lt;a href=&#34;http://www.terremark.com/services/security-services/governance-risk-compliance-management/pci-compliance.aspx&#34;&gt;Terremark&lt;/a&gt;
might have something.&lt;/p&gt;

&lt;h1 id=&#34;security-scanners:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Security Scanners&lt;/h1&gt;

&lt;p&gt;A key part of the PCI certification is the 3rd party security scanning
requirement. Basically you have to pay one of the certified and approved
security scanning companies to scan you network, server, application
every so often, and if it finds any issues, you will need to fix those,
and scan again until you pass their tests. Once you pass the scans they
will give you a certificate that you can attach to the rest of your PCI
documentation.&lt;/p&gt;

&lt;p&gt;I have used a company called &lt;a href=&#34;http://www.controlscan.com&#34;&gt;ControlScan&lt;/a&gt;
in the past, and I have also used &lt;a href=&#34;http://www.qualys.com&#34;&gt;Qualys&lt;/a&gt;, but
I&amp;rsquo;m sure there are a ton of others out there. Pick the one that looks
the best for you. Here is a link to a list of &lt;a href=&#34;https://www.pcisecuritystandards.org/approved_companies_providers/approved_scanning_vendors.php&#34;&gt;PCI approved scanning
vendors&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;intrusion-detection-systems:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Intrusion Detection Systems&lt;/h1&gt;

&lt;p&gt;Intrusion Detection Systems (IDS) basically sit in front of your network
and watch all of the network traffic coming into your network. It looks
to see if it notices anything out of the ordinary, of if people are
trying to use known attacks, and if it finds something it will let you
know. They have hard ware and software based solutions. They range in
price from free to thousands of dollars a month. They all have different
features and abilities, it is best to pick one that has what you need,
that you are comfortable maintaining.&lt;/p&gt;

&lt;p&gt;I have used &lt;a href=&#34;http://www.alertlogic.com&#34;&gt;AlertLogic&amp;rsquo;s&lt;/a&gt; hardware based
IDS, and it works well. They have a pool of on call people who monitor
the devices and if something gets triggered they look it over, and act
accordingly.&lt;/p&gt;

&lt;h1 id=&#34;hashing-credit-card-numbers:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Hashing credit card numbers&lt;/h1&gt;

&lt;p&gt;Here is a great example on why hashing credit card numbers isn&amp;rsquo;t a good
idea. I&amp;rsquo;m borrowing some of this from these two links.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://en.oreilly.com/rails2011/public/schedule/detail/19466&#34;&gt;http://en.oreilly.com/rails2011/public/schedule/detail/19466&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.integrigy.com/security-resources/whitepapers/Integrigy_Hashing_Credit_Card_Numbers_Unsafe_Practices.pdf&#34;&gt;http://www.integrigy.com/security-resources/whitepapers/Integrigy_Hashing_Credit_Card_Numbers_Unsafe_Practices.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just because you are following PCI rules doesn’t mean you are
invincible, you still have to use your common sense.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PCI DSS section 3.4
&lt;a href=&#34;http://www.pcisecuritystandards.org/pdfs/pci_audit_procedures_v1-1.pdf&#34;&gt;[pdf]&lt;/a&gt;:
Render PAN, at minimum, unreadable anywhere it is stored .. by using
any of the following approaches: Strong one-way hash functions (hashed
indexes)&lt;/p&gt;

&lt;p&gt;Verify that data is rendered unreadable using one of the following
methods: one-way hashes (hashed indexes) such as SHA-1&lt;/p&gt;

&lt;p&gt;Basically what this is saying is that you are allowed to store the
first 6 digits of a credit card (BIN) as well as the last 4 digits of
the credit card. Credit cards are between 13-16 digits in length and
the last digit is the check digit (&lt;a href=&#34;http://en.wikipedia.org/wiki/Luhn_algorithm&#34;&gt;Luhn
algorithm&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s see how hard it would be to figure out this credit card number.
4012888888881881&lt;/p&gt;

&lt;p&gt;If we start with a full 16 digits that means that we have ￼10\^16 or
10,000,000,000,000,000 (10 Quadrillion) Possible Card Numbers, if we
didn&amp;rsquo;t know anything about the card.&lt;/p&gt;

&lt;p&gt;Since we are storing the credit card type, we know this is a visa, visa
credit cards all start with a 4 so that means that is could be
4XXXXXXXXXXXXXXX or ￼4,000,000,000,000,000 (4 Quadrillion) Possible Card
Numbers, we just cut the number of possible cards in more then half.&lt;/p&gt;

&lt;p&gt;If we also store the bin (first 6 digits) and the last 4 digits, then it
would look like this. 401288*&lt;em&gt;*&lt;/em&gt;**1881 or 1,000,000 (1 million)
possible card numbers.&lt;/p&gt;

&lt;p&gt;Starting with that lets try to write a simple cracker (Ruby)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode ruby&#34;&gt;hashed_card_number = &#39;62163a017b168ad4a229c64ae1bed6ffd5e8fb2d&#39;
masked_card_number = &#39;401288******1881&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode ruby&#34;&gt;require &#39;digest/sha1&#39;

def reverse_hashed_card_number( hashed_card_number, first_six, last_four)
    0.upto(999_999) do |i|
        card_number_to_test = &amp;quot;#{first_six}%06d#{last_four}&amp;quot; % i
        hashed_to_test = Digest::SHA1.hexdigest(card_number_to_test)
        if hashed_card_number == hashed_card_number_to_test
          return card_number_to_test
        end
    end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s run it&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode ruby&#34;&gt;Benchmark.measure do
  puts reverse_hashed_card_number(
    &#39;62163a017b168ad4a229c64ae1bed6ffd5e8fb2d&#39;,
    &#39;401288&#39;,
    &#39;1881&#39;
) end.real
4012888888881881
=&amp;gt; 5.33522081375122
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In 5.3 seconds it was able to crack the hash, if you use only a SHA-1
hash. We could possibly make it even faster if we did a luhn check on
the number before we ran the hash, and if the luhn check fails then we
know the number isn&amp;rsquo;t valid and there is no need to run the hash. Since
the hash function is going to be slower then the luhn check it should
speed things up.&lt;/p&gt;

&lt;h1 id=&#34;rainbow-tables-salts:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Rainbow Tables + Salts&lt;/h1&gt;

&lt;p&gt;Since we know that there is a finite number of credit cards, we could
pre-calculate the hash code for every single one of the 10 Quadrillion
possible card values, and store those in a lookup table. Then when ever
I wanted to crack a credit card hash, all i would need is the credit
card hash, and I would be able to figure out the value of that card,
very quickly. Storing all of the known values in a table like this is
called a &lt;a href=&#34;http://en.wikipedia.org/wiki/Rainbow_tables&#34;&gt;Rainbow table&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ideally if you are going to hash a credit card, don&amp;rsquo;t use SHA-1, or MD5,
use one of the newer SHA versions, SHA-256 or above, and also use a
&lt;a href=&#34;http://en.wikipedia.org/wiki/Salt_(cryptography&#34;&gt;salt&lt;/a&gt;). A salt is
basically a second unique value that you always use when hashing, to
generate a different salt then you would normally get with just the
credit card number.&lt;/p&gt;

&lt;p&gt;Since I won&amp;rsquo;t have your salt when I generate my rainbow table, my
rainbow table will be no good. It adds yet another layer of security.
Make sure you don&amp;rsquo;t lose your SALT or else you will have to start over
from scratch. Treat your salt like a password, and keep it safe.&lt;/p&gt;

&lt;h1 id=&#34;do-i-really-have-to-worry-about-being-hacked:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Do I really have to worry about being hacked?&lt;/h1&gt;

&lt;p&gt;Here is a short list of companies that have been hacked recently. If
they can get hacked, so could you.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/T.K._Maxx#2007_credit_card_fraud&#34;&gt;TJ
Maxx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bank of America&lt;/li&gt;
&lt;li&gt;Citigroup&lt;/li&gt;
&lt;li&gt;BJ&amp;rsquo;s wholesale club&lt;/li&gt;
&lt;li&gt;Hotels.com&lt;/li&gt;
&lt;li&gt;LexisNexis&lt;/li&gt;
&lt;li&gt;Polo Ralph Lauren&lt;/li&gt;
&lt;li&gt;Wachovoa&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Heartland_Payment_Systems#Security_breach&#34;&gt;Heartland Payment
Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hannaford&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;what-could-happen-if-you-were-hacked:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;What could happen if you were Hacked?&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Banned from accepting credit cards&lt;/li&gt;
&lt;li&gt;Loss of reputation and customers&lt;/li&gt;
&lt;li&gt;Fines up to \$500,000 per incident&lt;/li&gt;
&lt;li&gt;Litigation (you could be sued)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;what-if-i-was-breached:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;What if I was breached?&lt;/h1&gt;

&lt;p&gt;In the event of a security incident, merchants must take immediate
action to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Contain and limit the exposure. Conduct a thorough investigation of
the suspected or confirmed loss or theft of account information
within 24 hours of the compromise&lt;/li&gt;
&lt;li&gt;Alert all necessary parties. Be sure to notify: * Merchant Account
Provider * Visa Fraud Control Group at (650) 432-2978 * Local FBI
Office * U.S. Secret Service (if Visa payment data is compromised)&lt;/li&gt;
&lt;li&gt;Provide the compromised Visa accounts to Visa Fraud Control Group
within 24 hours.&lt;/li&gt;
&lt;li&gt;Within four business days of the reported compromise, provide Visa
with an incident report.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;build-pci-complaint-django-applications:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Build PCI Complaint Django Applications&lt;/h1&gt;

&lt;p&gt;I recently gave a talk on Build PCI Complaint Django Applications, at
DjangoCon US 2012 in Washington D.C. Here are my slides and the video of
my talk.&lt;/p&gt;

&lt;h2 id=&#34;slides:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Slides&lt;/h2&gt;

&lt;h2 id=&#34;video:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Video&lt;/h2&gt;

&lt;h1 id=&#34;links:4cd0f426c80b0e9aa5a827b6b948214b&#34;&gt;Links:&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.akamai.com/html/solutions/security/edge_tokenization.html&#34;&gt;Akamai edge
tokenization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pcisecuritystandards.org&#34;&gt;PCI Security Standards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.americanexpress.com/datasecurity&#34;&gt;American Express PCI
pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.discovernetwork.com/fraudsecurity/disc.html&#34;&gt;Discover Financial Services PCI
pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jcb-global.com/english/pci/index.html&#34;&gt;JCB International PCI
pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mastercard.com/sdp&#34;&gt;MasterCard Worldwide PCI pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.visa.com/cisp&#34;&gt;Visa Inc PCI pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.visaeurope.com/ais&#34;&gt;Visa Europe PCI pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Getting DjangoCMS up and running on ActiveState&#39;s Stackato</title>
      <link>http://www.kencochrane.net/blog/2012/01/getting-djangocms-up-and-running-on-stackato/</link>
      <pubDate>Sun, 15 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2012/01/getting-djangocms-up-and-running-on-stackato/</guid>
      <description>

&lt;p&gt;ActiveState has recently started their own PAAS based on
&lt;a href=&#34;http://cloudfoundry.org/&#34;&gt;CloudFoundry&lt;/a&gt; this blog post is to help you
get up and running quickly with a Django CMS installation, and hopefully
give you enough information to get your own applications on there as
well.&lt;/p&gt;

&lt;p&gt;To keep things simple, I&amp;rsquo;ll just go through the steps that are required
in order to get this up and running and add some comments along the way.
If I missed anything or if you have any questions, please ask in the
comments.&lt;/p&gt;

&lt;h1 id=&#34;running-on-stackato:55e1c02ded8c9fbb4411836cd601d2c4&#34;&gt;Running on Stackato&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Register for an account
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Go to &lt;a href=&#34;http://community.activestate.com/stackato&#34;&gt;http://community.activestate.com/stackato&lt;/a&gt; and register for your
account. They are currently in beta, and you need to be approved before
they will give you access.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install the client
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are a few different options, follow the steps outlined here.
&lt;a href=&#34;http://docs.stackato.com/quick-start.html#stackato-client-setup&#34;&gt;http://docs.stackato.com/quick-start.html#stackato-client-setup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I tried the option where you download the file, and rename it and put it
in your path. It wasn&amp;rsquo;t complicated, but it wasn&amp;rsquo;t clean either. I chose
this option because I didn&amp;rsquo;t want to install
&lt;a href=&#34;http://code.activestate.com/pypm/&#34;&gt;pypm&lt;/a&gt;, so I&amp;rsquo;m not sure if that way
is easier or not.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Register your client to the cloud
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that you have the client installed you need to tell it which cloud
to deploy too. With Stackato, you can run your own local cloud as well
as using the sandbox that ActiveState provided. To make things simple,
I&amp;rsquo;m going to use the sandbox. If you want to use the local cloud you
will need to &lt;a href=&#34;http://docs.stackato.com/quick-start.html#accesssing-the-micro-cloud&#34;&gt;read the
directions&lt;/a&gt;
on how to use the local cloud option.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ stackato target api.sandbox.activestate.com
&amp;gt; Successfully targeted to [https://api.sandbox.activestate.com]
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Login to stackato
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you point your client in the correct location, you will need to
login to the cloud. You can find your login information on your
&lt;a href=&#34;https://account.activestate.com/&#34;&gt;activestate account page&lt;/a&gt;. Type the
following and answer the questions when prompted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ stackato login
&amp;gt; Successfully logged into [https://api.sandbox.activestate.com]
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Download this github repo
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To make things easier, I have made a simple django project that has all
of the configuration information setup so that you don&amp;rsquo;t need to do
anything if you want to use djangoCMS. Look at my &lt;a href=&#34;https://github.com/kencochrane/django-cms-stackato&#34;&gt;github
repo&lt;/a&gt;, and see how I
did things if you want to get your own application up and running. If
you want to use djangoCMS, then all you have to do is follow these
steps.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ cd ~/projects
$ git clone git://github.com/kencochrane/django-cms-stackato.git
$ cd django-cms-stackato
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Deploy the project to stackato
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you have your application ready, you can push the application to
the cloud. When you do this it will prompt you for a bunch of questions,
answer them and keep track of what you picked for a website url, because
you will need that later. My application is called myblog, but you can
put whatever you want, just change myblog with your name.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ stackato push myblog
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Initialize the database (optional)
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I have set this up so that it should happen automatically at deployment
see the stackato.yml file for more details. If you want to run the
commands outside of deployments this is what you can do.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ stackato run myblog python mycms/manage.py syncdb --noinput
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Run south migrations (optional)
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I have set this up so that it should happen automatically at deployment
see the stackato.yml file for more details. If you want to run the
commands outside of deployments this is what you can do. It is important
to note &lt;em&gt;I had to run more then once since it was killed the first time.
Maybe it took too long?&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ stackato run myblog python mycms/manage.py migrate --noinput
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Collect the static files (optional)
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I have set this up so that it should happen automatically at deployment
see the stackato.yml file for more details. If you want to run the
commands outside of deployments this is what you can do.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ stackato run myblog python mycms/manage.py collectstatic --noinput
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Create the django admin account
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that you have your application installed and you have your database
setup, you need to create the django admin, you can do that with ths
django management command. Make sure you replace the variables with your
values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ stackato run myblog python mycms/manage.py createsuperuser --username=admin --email=admin@example.com --noinput
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Change the password for the admin user
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You need to set a password for the admin account so that you can login.
Pick a more secure password then the example I have here. &lt;em&gt;(notice it is
changepassword2 not changepassword)&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ stackato run myblog python mycms/manage.py changepassword2 admin secret123P@ssw0rd!
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Open up the url in your browser
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When you open up the URL that you picked when you deployed in your
browser you should find the DjangoCMS pony welcome page. If not, try
debugging using some of the tips below.&lt;/p&gt;

&lt;h1 id=&#34;conclusion:55e1c02ded8c9fbb4411836cd601d2c4&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;That is it, I did all the hard work, so you should be able to follow
those simple steps and get djangoCMS up and running in no time. Once you
get that working, play around with it, and let me know what you think.
Have you tried the other PAAS options yet, if not check those out as
well, and then let me know which ones you like better and why. I have
written blog posts about most of them at this point, so feel free to
check those out (links below), and have fun playing around.&lt;/p&gt;

&lt;h2 id=&#34;other-useful-information:55e1c02ded8c9fbb4411836cd601d2c4&#34;&gt;Other Useful Information&lt;/h2&gt;

&lt;h3 id=&#34;starting-an-application-if-it-isn-t-running:55e1c02ded8c9fbb4411836cd601d2c4&#34;&gt;Starting an application if it isn&amp;rsquo;t running&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ stackato start myblog
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;restarting-an-application:55e1c02ded8c9fbb4411836cd601d2c4&#34;&gt;Restarting an application&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ stackato restart myblog
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;stopping-an-application:55e1c02ded8c9fbb4411836cd601d2c4&#34;&gt;Stopping an application&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ stackato stop myblog
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;updating-application-after-it-is-already-deployed:55e1c02ded8c9fbb4411836cd601d2c4&#34;&gt;Updating application after it is already deployed&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ stackato update myblog
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;find-out-how-many-instances-you-have-running:55e1c02ded8c9fbb4411836cd601d2c4&#34;&gt;Find out how many instances you have running&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$  stackato stats myblog
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;find-out-which-apps-you-have-installed-and-their-status:55e1c02ded8c9fbb4411836cd601d2c4&#34;&gt;Find out which apps you have installed, and their status&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ stackato apps
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;find-out-what-logs-you-have-for-your-applications:55e1c02ded8c9fbb4411836cd601d2c4&#34;&gt;Find out what logs you have for your applications&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ stackato files myblog logs
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;viewing-logs-for-your-app:55e1c02ded8c9fbb4411836cd601d2c4&#34;&gt;Viewing logs for your app&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ stackato logs myblog --all
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;running-cat-on-a-particular-log-file:55e1c02ded8c9fbb4411836cd601d2c4&#34;&gt;Running cat on a particular log file&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ stackato run myblog cat ../logs/myapp-err.log
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;links:55e1c02ded8c9fbb4411836cd601d2c4&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;My github repo for this blog post:
&lt;a href=&#34;https://github.com/kencochrane/django-cms-stackato&#34;&gt;https://github.com/kencochrane/django-cms-stackato&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stackato Client command reference:
&lt;a href=&#34;http://docs.stackato.com/commands.html#command-ref-client&#34;&gt;http://docs.stackato.com/commands.html#command-ref-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;stackato.yml reference:
&lt;a href=&#34;http://docs.stackato.com/client.html#configure-stackato-yml&#34;&gt;http://docs.stackato.com/client.html#configure-stackato-yml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stackato quick start guide:
&lt;a href=&#34;http://docs.stackato.com/quick-start.html&#34;&gt;http://docs.stackato.com/quick-start.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Stackato Sandbox Ground Rules, Content Policy and Quotas:
&lt;a href=&#34;http://docs.stackato.com/sandbox.html&#34;&gt;http://docs.stackato.com/sandbox.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ActiveState Account page: &lt;a href=&#34;https://account.activestate.com/&#34;&gt;https://account.activestate.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;pip : &lt;a href=&#34;http://www.pip-installer.org/&#34;&gt;http://www.pip-installer.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;git : &lt;a href=&#34;http://git-scm.com/&#34;&gt;http://git-scm.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;my-other-articles-related-to-paas:55e1c02ded8c9fbb4411836cd601d2c4&#34;&gt;My other articles related to PAAS:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-experiences-with-epio/&#34;&gt;My Experiences with
ep.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/&#34;&gt;AppHosted.com Django Hosting Service
Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-day-gondorio/&#34;&gt;My Day in
Gondor.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/&#34;&gt;Deploying my Django application to
DotCloud.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://DjangoZoom.com&#34;&gt;DjangoZoom.com Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/&#34;&gt;Django hosting
roundup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kencochrane.net/blog/2011/12/installing-djangocms-on-heroku-in-13-easy-steps/&#34;&gt;Installing DjangoCMS on Heroku in 13 easy
steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kencochrane.net/blog/2011/12/installing-djangocms-dotcloud-12-easy-steps/&#34;&gt;Installing DjangoCMS on dotCloud in 12 easy
steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kencochrane.net/blog/2011/11/developers-guide-for-running-django-apps-on-heroku/&#34;&gt;Developers guide to Running Django Applications on
Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kencochrane.net/blog/2012/01/installing-django-application-on-openshift/&#34;&gt;Installing a Django application on Red Hat&amp;rsquo;s OpenShift
PAAS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;update:55e1c02ded8c9fbb4411836cd601d2c4&#34;&gt;Update&lt;/h2&gt;

&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with
dotCloud a competitor to Stackato. I plan on keeping this blog post up
to date and impartial. If you think there are any errors, please let me
know in the comments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing a Django application on Red Hat&#39;s OpenShift PAAS</title>
      <link>http://www.kencochrane.net/blog/2012/01/installing-django-application-on-openshift/</link>
      <pubDate>Sat, 14 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2012/01/installing-django-application-on-openshift/</guid>
      <description>

&lt;p&gt;It seems like everyone has their own
&lt;a href=&#34;http://en.wikipedia.org/wiki/Platform_as_a_service&#34;&gt;PAAS&lt;/a&gt; solution
these days, and if they don&amp;rsquo;t have one yet, it is just a matter of time
before they will. Red Hat has recently joined in on the fun with their
&lt;a href=&#34;https://openshift.redhat.com&#34;&gt;OpenShift&lt;/a&gt; platform.&lt;/p&gt;

&lt;p&gt;I decided to take it for a test drive, and share my results with you.
This service is still in beta and things are changing all of the time,
so these notes might not work in the future, take that into
consideration when using it as a guide.&lt;/p&gt;

&lt;p&gt;There really isn&amp;rsquo;t much python documentation for this platform, and what
documentation there is, is either a little out of date, or missing some
important steps. Hopefully this guide will help you get your application
up and running.&lt;/p&gt;

&lt;p&gt;OpenShift is divided into two parts, Flex and Express.&lt;/p&gt;

&lt;h1 id=&#34;flex-https-openshift-redhat-com-app-flex:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;&lt;a href=&#34;https://openshift.redhat.com/app/flex&#34;&gt;Flex&lt;/a&gt;:&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Dedicated cloud solution. Get more control over your apps, or move
your existing applications to the cloud with ease! Flex is a dedicated
cloud solution that provides everything you need to easily scale,
provision, deploy, and monitor your applications.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Flex runs on top of your amazon EC2 account, and currently only supports
Java and PHP. It is targeting the enterprise crowd and has more features
compared to Express.&lt;/p&gt;

&lt;h1 id=&#34;express-https-openshift-redhat-com-app-express:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;&lt;a href=&#34;https://openshift.redhat.com/app/express&#34;&gt;Express&lt;/a&gt;:&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Shared cloud solution. Express is a free, cloud-based application
platform for Java, Perl, PHP, Python, and Ruby applications. It&amp;rsquo;s
super-simple—your development environment is also your deployment
environment: git push, and you&amp;rsquo;re in the cloud!&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Express runs on Red Hat&amp;rsquo;s servers, and currently supports Java, Ruby,
PHP, Perl and Python apps. It doesn&amp;rsquo;t have the same features of Flex,
but if you don&amp;rsquo;t need those advanced features, then express might be
fine for you. Since I&amp;rsquo;m interested in deploying python apps, and Express
is the only one that supports python apps, that is the one I&amp;rsquo;ll show you
today.&lt;/p&gt;

&lt;p&gt;To make things easier to show you how things work, I&amp;rsquo;ll create a simple
django application and walk you through the steps to deploying it. I&amp;rsquo;m
going to deploy a djangoCMS to express that will connect to a mysql
database.&lt;/p&gt;

&lt;h2 id=&#34;steps:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;Steps:&lt;/h2&gt;

&lt;h3 id=&#34;1-create-an-account:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;1. Create an account&lt;/h3&gt;

&lt;p&gt;Create an account by filling out the form at
&lt;a href=&#34;http://openshift.redhat.com/&#34;&gt;http://openshift.redhat.com/&lt;/a&gt; and don&amp;rsquo;t forget your username and
password, you will need that later.&lt;/p&gt;

&lt;h3 id=&#34;2-install-perquisites:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;2. Install Perquisites:&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://git-scm.com/&#34;&gt;git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://python.org&#34;&gt;python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;openshift client&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;**&lt;a href=&#34;Git:**&#34;&gt;Git:**&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going to go over the steps to install git, for more info, you
can get it from the git website. &lt;a href=&#34;http://git-scm.com/download&#34;&gt;http://git-scm.com/download&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are using a Mac or linux, it most likely already has python
installed, if you are using windows, you you don&amp;rsquo;t have python
installed. Goto the python website and you will find instructions on
how to install python on your system. &lt;a href=&#34;http://python.org/download/&#34;&gt;http://python.org/download/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenShift client:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For instructions on how to Install the client go to this page.
&lt;a href=&#34;https://openshift.redhat.com/app/express#mac&#34;&gt;https://openshift.redhat.com/app/express#mac&lt;/a&gt; Here are my steps for
Mac OSX&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ sudo gem install json_pure
$ sudo gem install rhc
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-create-a-domain:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;3. Create a domain.&lt;/h3&gt;

&lt;p&gt;Now that you have everything installed, your first step is to create a
domain. Run the following command and replace \$mydoman and \$loginemail
with your own domain and the login email you used when creating an
account.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ rhc-create-domain -n $mydomain -l $loginemail
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;4-create-an-application:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;4. Create an application&lt;/h3&gt;

&lt;p&gt;Now that you have a domain, you need to create an application that you
can deploy to that domain. Running the following command will create a
new wsgi application called &amp;lsquo;blog&amp;rsquo;. You can name your application
anything you want, within reason. We pick wsgi, because our python
application will be wsgi compatible.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ rhc-create-app -a blog -t wsgi-3.2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;5-add-mysql-to-your-app:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;5. Add mysql to your app&lt;/h3&gt;

&lt;p&gt;We want to use mysql as our database backend for this blog, so we need
to add mysql to our application using the command below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ rhc-ctl-app -a blog -e add-mysql-5.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;6-add-phpmyadmin-to-help-you-manage-your-database:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;6. Add phpmyadmin to help you manage your database&lt;/h3&gt;

&lt;p&gt;OpenShift doesn&amp;rsquo;t give you direct access to your database, so you will
need a way to manage your database a different way. They provide the
ability to add PHPMyAdmin to your app so that you can get to your data.
This step is optional, but recommended.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ rhc-ctl-app -a blog -e add-phpmyadmin-3.4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;7-add-this-upstream-repo-from-github:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;7. Add this upstream repo from github&lt;/h3&gt;

&lt;p&gt;When you create your application, it will create a directory with a
bunch of other files and directories in it. If you were starting from
scratch and building up your application you would start from here. To
make things easier I created a project on github that will allow you to
get up and running with DjangoCMS much faster. In order to use my
project you will need to run the following commands so that it will pull
down the code into your project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ cd blog
$ git remote add upstream -m master git://github.com/kencochrane/django-cms-openshift.git
$ git pull -s recursive -X theirs upstream master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the code is downloaded, you can take a look at the code, change
anything you want and when you are ready you can deploy the app.&lt;/p&gt;

&lt;h3 id=&#34;8-deploying-the-app:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;8. Deploying the app&lt;/h3&gt;

&lt;p&gt;To deploy all you need to do is push the repo upstream into open shift.
To this, you just need to run the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ git push
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When it pushes you application into open shift it will do the following.
(without jenkins add-on installed)&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;stop app&lt;/li&gt;
&lt;li&gt;*pre_build&lt;/li&gt;
&lt;li&gt;*build&lt;/li&gt;
&lt;li&gt;start_dbs&lt;/li&gt;
&lt;li&gt;*deploy&lt;/li&gt;
&lt;li&gt;start_app&lt;/li&gt;
&lt;li&gt;*post_deploy&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;The steps marked with a * are scripts that are located in
&lt;em&gt;.openshift/action_hooks/&amp;lt;script_name&amp;gt;&lt;/em&gt; if you have something in
those files it will run them, and if not, it will pass right by. These
are very helpful if you want something to happen at points of the
deployment process. For example, in the deploy script you will notice
that I have some code to kick off the django syncdb, migrate, and
collect static commands. These will run every time I deploy the app.&lt;/p&gt;

&lt;p&gt;I have also created a django management command that will check to see
if there is a django admin account created and if not, it will create
one and set the default password. I had to do this because there is
currently no way that I know of where you can kick off django management
commands after the deployment is finished. It will only create the admin
account once, and every other time it will just get ignored.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; It is important to note that if you want to do anything
related to the database, you can&amp;rsquo;t do it in the &lt;em&gt;pre_build&lt;/em&gt; or &lt;em&gt;build&lt;/em&gt;
scripts, because the database isn&amp;rsquo;t available yet. This one thing caused
me lots of pain, because I couldn&amp;rsquo;t figure out by my migrations were not
working. If you do make the mistake of trying to do something database
related in the &lt;em&gt;build&lt;/em&gt; script you will see an error like this.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;remote: ERROR 2003 (HY000): Can&amp;rsquo;t connect to MySQL server on
&amp;lsquo;xxx.x.xx.x&amp;rsquo; (111)&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s it, you can now checkout your application at (default admin
account is admin/&amp;lt;password given at deploy time&amp;gt;):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://blog-$yourdomain.rhcloud.com&#34;&gt;http://blog-$yourdomain.rhcloud.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you visit the page you should see the djangoCMS default page. First
things first, login to the django admin, and change the password from
the default password to something secure. Then get started building your
own app.&lt;/p&gt;

&lt;h2 id=&#34;helpful-tips:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;Helpful tips:&lt;/h2&gt;

&lt;h3 id=&#34;viewing-logs:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;Viewing logs:&lt;/h3&gt;

&lt;p&gt;If you would like to view your logs to see what is going on with your
application you just need to run this command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ rhc-tail-files -a blog
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;application-information:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;Application information:&lt;/h3&gt;

&lt;p&gt;If you would like more information about your application you can run
this command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ rhc-user-info
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also checkout the README file they add when you create an application,
it is pretty helpful, and might answer some common questions.&lt;/p&gt;

&lt;h3 id=&#34;application-dependencies:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;Application dependencies:&lt;/h3&gt;

&lt;p&gt;OpenShift uses virtualenv but it doesn&amp;rsquo;t use pip, it depends on the
dependencies be listed in the setup.py file. During the deploy process I
did notice that it installed pip, so it might be possible to add a
requirements.txt file, and then in your build action_hook script call
pip install -r &amp;lt;path&amp;gt;/requirements.txt but I&amp;rsquo;m not sure if this is
supported, or if it will cause problems, so it might be best to stick
with what they have for now.&lt;/p&gt;

&lt;h3 id=&#34;static-media:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;Static media:&lt;/h3&gt;

&lt;p&gt;If you look in wsgi/static/.htaccess there a rewrite rule to get the
media to work correctly, you can use this trick for other apache tricks
if you want. For more information on this checkout the README file.&lt;/p&gt;

&lt;h3 id=&#34;what-is-it-open-shift-running:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;What is it open shift running:&lt;/h3&gt;

&lt;p&gt;Red Hat linux with Apache / mod_wsgi, and mysql 5.1&lt;/p&gt;

&lt;h3 id=&#34;what-type-of-apps-do-they-support:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;What type of apps do they support?&lt;/h3&gt;

&lt;p&gt;Here is the current link which can be found if you run this commands and
look at the types.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ rhc-create-app -h

raw-0.1, php-5.3, jbossas-7.0, rack-1.1, jenkins-1.4, perl-5.10, wsgi-3.2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;what-else-does-it-support:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;What else does it support?&lt;/h3&gt;

&lt;p&gt;Things are changing all of the time, but if you run this command you
will get a list of the current supported addons.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ rhc-ctl-app -L

List of supported embedded cartridges:

Obtaining list of cartridges (please excuse the delay)...

    - metrics-0.1
    - mysql-5.1
    - jenkins-client-1.4
    - 10gen-mms-agent-0.1
    - phpmyadmin-3.4
    - rockmongo-1.1
    - mongodb-2.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;web-based-control-panel:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;Web based control panel:&lt;/h3&gt;

&lt;p&gt;They offer a web based control panel to do some of the things you can do
with the command line, which will be nice, but it doesn&amp;rsquo;t work right
now. It doesn&amp;rsquo;t display the correct information, and it doesn&amp;rsquo;t even
show the applications I have created, so I don&amp;rsquo;t trust it. Hopefully
these issues will get fixed in the future, and this tool will make it
easier for less technical people to get started.&lt;/p&gt;

&lt;h3 id=&#34;conclusion:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;Conclusion:&lt;/h3&gt;

&lt;p&gt;It is nice to see another platform on the market, it is still pretty
rough, and there isn&amp;rsquo;t much documentation, but I found it usable. I&amp;rsquo;m
sure once they stabilize things, they will spend more time on the
documentation side of things.&lt;/p&gt;

&lt;h3 id=&#34;other-helpful-openshift-links:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;Other Helpful OpenShift links:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kencochrane/django-cms-openshift&#34;&gt;My GitHub repo for this
article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openshift/django-example&#34;&gt;https://github.com/openshift/django-example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.ianweller.org/2011/05/12/openshift-express-first-thoughts/&#34;&gt;http://blog.ianweller.org/2011/05/12/openshift-express-first-thoughts/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;my-other-articles-related-to-paas:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;My other articles related to PAAS:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-experiences-with-epio/&#34;&gt;My Experiences with
ep.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/&#34;&gt;AppHosted.com Django Hosting Service
Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-day-gondorio/&#34;&gt;My Day in
Gondor.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/&#34;&gt;Deploying my Django application to
DotCloud.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://DjangoZoom.com&#34;&gt;DjangoZoom.com Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/&#34;&gt;Django hosting
roundup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kencochrane.net/blog/2011/12/installing-djangocms-on-heroku-in-13-easy-steps/&#34;&gt;Installing DjangoCMS on Heroku in 13 easy
steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kencochrane.net/blog/2011/12/installing-djangocms-dotcloud-12-easy-steps/&#34;&gt;Installing DjangoCMS on dotCloud in 12 easy
steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kencochrane.net/blog/2011/11/developers-guide-for-running-django-apps-on-heroku/&#34;&gt;Developers guide to Running Django Applications on
Heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;update:7691e8103b37fb8a7e415dbcd78d4931&#34;&gt;Update&lt;/h3&gt;

&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with
dotCloud a competitor to openShift. I plan on keeping this blog post up
to date and impartial. If you think there are any errors, please let me
know in the comments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing DjangoCMS on Heroku in 13 easy steps</title>
      <link>http://www.kencochrane.net/blog/2011/12/installing-djangocms-on-heroku-in-13-easy-steps/</link>
      <pubDate>Sat, 31 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2011/12/installing-djangocms-on-heroku-in-13-easy-steps/</guid>
      <description>&lt;p&gt;Do you want to use Django-cms on Heroku but don&amp;rsquo;t know where to start?
All you need to do is follow these 13 easy steps, and they will get you
on your way.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a place to store your project&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ mkdir -p ~/projects&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go into the projects directory&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ cd ~/projects&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clone git repo from github, requires git client.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ git clone &lt;a href=&#34;git://github.com/kencochrane/django-cms-heroku.git&#34;&gt;git://github.com/kencochrane/django-cms-heroku.git&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go into the new project directory&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ cd django-cms-heroku&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Creating the virtualenv (using virtualenvwrapper, virtualenv,
and pip)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ mkvirtualenv &amp;ndash;no-site-packages &amp;ndash;distribute django-cms-heroku&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sign-Up for a Heroku account. &lt;a href=&#34;https://api.heroku.com/signup&#34;&gt;https://api.heroku.com/signup&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install the Heroku client.
&lt;a href=&#34;http://devcenter.heroku.com/articles/quickstart&#34;&gt;http://devcenter.heroku.com/articles/quickstart&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The first time you use the Heroku client you will need to login
using the same information you used when you signed up. Follow the
prompts, and it will finish your install.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ heroku login&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create your heroku application&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ heroku create &amp;ndash;stack cedar&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push your code into heroku&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ git push heroku master&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sync your database and create your admin account.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ heroku run python mycms/manage.py syncdb &amp;ndash;all&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run your database migrations.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ heroku run python mycms/manage.py migrate &amp;ndash;fake&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open application in your browser and start using djangoCMS
on heroku.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ heroku open&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you get comfortable with how things work, you could add more
plug-ins, create your own custom templates and then change your DEBUG
setting to False. So go ahead &lt;a href=&#34;https://github.com/kencochrane/django-cms-heroku/fork&#34;&gt;fork my project on
github&lt;/a&gt; and get
started.&lt;/p&gt;

&lt;p&gt;After you make changes to your local project directory, you can test it
on the server by running the git push command again.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;For more info about Heroku and django-cms and what you can do with with it. check out their docs&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://devcenter.heroku.com/categories/platform-basics&#34;&gt;http://devcenter.heroku.com/categories/platform-basics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.django-cms.org/en/documentation/&#34;&gt;https://www.django-cms.org/en/documentation/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/dd&gt;
&lt;dt&gt;Links:&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Virtualenv&lt;/strong&gt; : &lt;a href=&#34;http://pypi.python.org/pypi/virtualenv&#34;&gt;http://pypi.python.org/pypi/virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pip&lt;/strong&gt; : &lt;a href=&#34;http://www.pip-installer.org/&#34;&gt;http://www.pip-installer.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;virtualenvwrapper&lt;/strong&gt; :
&lt;a href=&#34;http://www.doughellmann.com/projects/virtualenvwrapper/&#34;&gt;http://www.doughellmann.com/projects/virtualenvwrapper/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git&lt;/strong&gt; : &lt;a href=&#34;http://git-scm.com/&#34;&gt;http://git-scm.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/dd&gt;
&lt;/dl&gt;
</description>
    </item>
    
    <item>
      <title>Installing DjangoCMS on dotCloud in 12 easy steps</title>
      <link>http://www.kencochrane.net/blog/2011/12/installing-djangocms-dotcloud-12-easy-steps/</link>
      <pubDate>Sat, 31 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2011/12/installing-djangocms-dotcloud-12-easy-steps/</guid>
      <description>&lt;p&gt;Do you want to use Django-cms on dotcloud but don&amp;rsquo;t know where to start?
All you need to do is follow these 12 easy steps, they will get you on
your way.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create a place to store your project&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ mkdir -p ~/projects&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go into the projects directory&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ cd ~/projects&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clone git repo from github, requires git client.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ git clone
&lt;a href=&#34;git://github.com/kencochrane/django-cms-dotcloud.git&#34;&gt;git://github.com/kencochrane/django-cms-dotcloud.git&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go into the new project directory&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ cd django-cms-dotcloud&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Creating the virtualenv (using virtualenvwrapper, virtualenv,
and pip)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ mkvirtualenv &amp;ndash;no-site-packages &amp;ndash;distribute
django-cms-dotcloud&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Installing the dotCloud client
&lt;a href=&#34;http://docs.dotcloud.com/firststeps/install/&#34;&gt;http://docs.dotcloud.com/firststeps/install/&lt;/a&gt; (here are the steps
for Linux and Mac OSX)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ sudo pip install -U dotcloud&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Sign up for a dotcloud account
&lt;a href=&#34;https://www.dotcloud.com/accounts/register/&#34;&gt;https://www.dotcloud.com/accounts/register/&lt;/a&gt; if you
haven&amp;rsquo;t already.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The first time you use the dotcloud account you will need to add
your api key. So type dotcloud and follow the steps. You can find
your API key at &lt;a href=&#34;http://www.dotcloud.com/account/settings&#34;&gt;http://www.dotcloud.com/account/settings&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ dotcloud&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create your dotcloud application&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ dotcloud create mycmsapp&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Push your code into dotcloud&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ dotcloud push mycmsapp .&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Find out your application url.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ dotcloud url mycmsapp&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open url in your browser and start using djangoCMS on dotcloud.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Optional: If you don&amp;rsquo;t like the URL they gave you, you can use your
custom domain. Assuming your application was ramen.www and your
domain was www.example.com you would do the following.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;\$ dotcloud alias add ramen.www www.example.com&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you get comfortable with how things work, you could add more
plug-ins, create your own custom templates and then change your DEBUG
setting to False. So go ahead &lt;a href=&#34;https://github.com/kencochrane/django-cms-dotcloud/fork&#34;&gt;fork my project on
github&lt;/a&gt; and get
started.&lt;/p&gt;

&lt;p&gt;After you make changes to your local project directory, you can test it
on the server by running the dotcloud push command again.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;For more info about dotcloud and django-cms and what you can do with with it. check out their docs&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.dotcloud.com/firststeps/platform-overview/&#34;&gt;http://docs.dotcloud.com/firststeps/platform-overview/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.django-cms.org/en/documentation/&#34;&gt;https://www.django-cms.org/en/documentation/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;Links:&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dotcloud&lt;/strong&gt; : &lt;a href=&#34;http://dotcloud.com&#34;&gt;http://dotcloud.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Virtualenv&lt;/strong&gt; : &lt;a href=&#34;http://pypi.python.org/pypi/virtualenv&#34;&gt;http://pypi.python.org/pypi/virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pip&lt;/strong&gt; : &lt;a href=&#34;http://www.pip-installer.org/&#34;&gt;http://www.pip-installer.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;virtualenvwrapper&lt;/strong&gt; :
&lt;a href=&#34;http://www.doughellmann.com/projects/virtualenvwrapper/&#34;&gt;http://www.doughellmann.com/projects/virtualenvwrapper/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;git&lt;/strong&gt; : &lt;a href=&#34;http://git-scm.com/&#34;&gt;http://git-scm.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/dd&gt;
&lt;/dl&gt;
</description>
    </item>
    
    <item>
      <title>Standardizing Python WSGI deployment</title>
      <link>http://www.kencochrane.net/blog/2011/12/standardizing-python-wsgi-deployment/</link>
      <pubDate>Fri, 30 Dec 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2011/12/standardizing-python-wsgi-deployment/</guid>
      <description>&lt;p&gt;Over the past year I have been testing all of the new python platform as
a service companies that have popped up, and I have posted my notes on
my blog so that everyone can learn from my experiences.
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-experiences-with-epio/&#34;&gt;ep.io&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/&#34;&gt;apphosted.com&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-day-gondorio/&#34;&gt;gondor.io&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/&#34;&gt;dotcloud.com&lt;/a&gt;,
&lt;a href=&#34;http://DjangoZoom.com&#34;&gt;DjangoZoom.com&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/11/developers-guide-for-running-django-apps-on-heroku/&#34;&gt;Heroku&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/&#34;&gt;Django hosting
roundup&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;All and all, the platforms were very similar, they allowed you to easily
host your python/django project without having to worry about managing a
server or other typical system administration duties. Some of the
services were more advanced and had more features then others, but since
it was still early in the game, that was expected.&lt;/p&gt;

&lt;p&gt;The one thing that was different between each service was the way that
you have your python project setup. This might not seem like a big deal,
but because of the little differences between providers it required me
to change my test project every time I wanted to test out a new
providers service. These little changes weren&amp;rsquo;t a big deal for me, but
it could be a barrier of entry for less technical people. It also makes
it harder for someone to change services if they wanted. This probably
sounds like a good idea to the platform providers because it makes it a
little harder for people to leave their service, but I don&amp;rsquo;t think that
was their intention. Looking at the different platforms, and their
implementations, you can see they all make sense, and it was just their
own way of solving a problem because there was no standard available.&lt;/p&gt;

&lt;p&gt;Before I started programmed in python, I came from a Java background. In
Java they have already solved the deployment problem with their WAR
files. For those of you that aren&amp;rsquo;t familiar with Java or WAR files,
basically WAR files are just java projects that are laid out in a common
directory structure, with a few required configuration files (web.xml,
etc) that the application server uses when deploying the application.
This directory structure is then zipped up for easy portability. All of
the different Java application servers know how to read these files and
deploy the applications. It makes installing applications really easy,
and if you ever need to change application servers, it shouldn&amp;rsquo;t require
any changes at all, assuming you stuck with the standard format. &lt;a href=&#34;http://en.wikipedia.org/wiki/WAR_file_format_(Sun&#34;&gt;Java
WAR files on
Wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I was lucky enough to attend DjangoCon US 2011 in Portland Oregon this
year. At the conference there was a Django Hosting Panel moderated by
Sean O&amp;rsquo;Connor where the different hosting providers were asked questions
about their platforms. If you didn&amp;rsquo;t get a chance to see it, it is
available on blip.tv here.
&lt;a href=&#34;http://blip.tv/djangocon/django-hosting-panel-5572201&#34;&gt;http://blip.tv/djangocon/django-hosting-panel-5572201&lt;/a&gt; &lt;em&gt;Fun Fact: That
is me in the front row with the blue shirt and green hat.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;During the panel, Sean asked if there was any plans for working on
interoperability between the different platforms. Andrew Godwin
referenced Java&amp;rsquo;s WAR format and also talked about how he has already
started to talk to others about this idea at DjangoCon EU and would like
to see it move forward. The others in the panel seemed to agree that
something could be done, but it didn&amp;rsquo;t seem like it was urgent to them,
or if they really cared/wanted to do it. I can understand their
reluctance, because I&amp;rsquo;m sure they have more important things to work on,
and this would be very low on their list of things to do. After all
whatever comes from this, is going to require changes to their platform
in order to support it.&lt;/p&gt;

&lt;p&gt;That is why I think we (the developer community), need to come up with a
standard, propose it to the rest o the python community, with input from
the different platform providers, and then leave it up to the different
providers to decide if they are going to support it or not. It would be
great if everyone supported it, but because this isn&amp;rsquo;t going to make
anyone money in the short term, it will be hard to force anyone to do
it.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m willing to help to create the standard, but where do we start, and
whom do we submit the proposal too, the PSF?&lt;/p&gt;

&lt;p&gt;I think the easiest place to start would be to look at the different
platforms and find out what they have in common, and go from there. Off
the top of my head, I&amp;rsquo;m pretty sure they all support virtualenv and pip
for requirements. They are also all wsgi based, but I think that is
where the commonality stops.&lt;/p&gt;

&lt;p&gt;For example they all have a different way for specifying application
settings. ep.io has an ini file, dotcloud has a yml file, and gondor has
a .gondor/config file. It shouldn&amp;rsquo;t be too hard to come up with a
standard format with sane attributes.&lt;/p&gt;

&lt;p&gt;We could probably all agree on a common project structure, and where to
put the common files (requirements.txt for pip requirements and put it
in the root of the project, etc.).&lt;/p&gt;

&lt;p&gt;Something that will be important is to make the standard solid but
flexible. Since all of these platforms are a little different we will
need to allow some way for them to have a custom section or file that
will be platform dependent, so that they can extend the standard without
breaking it. These extensions won&amp;rsquo;t be supported by everyone, but it
will allow the platform providers the flexibility to move forward
without getting held back with a standard process which is normally a
slow process.&lt;/p&gt;

&lt;p&gt;That is also why versioning is important, make sure it is obvious which
version of the standard the application is using, so that it doesn&amp;rsquo;t
break as changes in the standard are made in the future.&lt;/p&gt;

&lt;p&gt;As you can see, with a little bit of effort I have a nice start, but
where do we go from here? What do you think, is this a good idea? Do you
want to help move it forward? Post some comments below, and lets
continue this discussion into 2012.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developers guide to Running Django Applications on Heroku</title>
      <link>http://www.kencochrane.net/blog/2011/11/developers-guide-for-running-django-apps-on-heroku/</link>
      <pubDate>Wed, 30 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2011/11/developers-guide-for-running-django-apps-on-heroku/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://Heroku.com&#34;&gt;Heroku&lt;/a&gt; the platform as a service (PAAS) company,
very popular in the Ruby on Rails community, has now started opening up
their platform to languages besides Ruby. They now offer support for
Python, Java, Clojure, Node.js, and Scala on their new Cedar stack.
Heroku&amp;rsquo;s Cedar stack is still in beta, but that shouldn&amp;rsquo;t stop you from
trying it out, and that is just what I&amp;rsquo;m going to do.&lt;/p&gt;

&lt;p&gt;6 months ago I wrote a series of blog posts that reviewed all of the
cool new django hosting services that were popping up. My goal was to
look at them all, and compare them to find out what they had to offer,
and to see if I could use them on my future projects. I&amp;rsquo;m going to
review Heroku using the same process that I used to review those other
services, so that I can we can compare apples to apples.&lt;/p&gt;

&lt;p&gt;For those of you who are not familiar with my other blog posts, feel
free to check them out now
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-experiences-with-epio/&#34;&gt;ep.io&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/&#34;&gt;apphosted.com&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-day-gondorio/&#34;&gt;gondor.io&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/&#34;&gt;dotcloud.com&lt;/a&gt;,
&lt;a href=&#34;http://DjangoZoom.com&#34;&gt;DjangoZoom.com&lt;/a&gt;, &lt;a href=&#34;http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/&#34;&gt;Django hosting
roundup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For those of you that are lazy, I&amp;rsquo;ll sum it up pretty quickly. What I&amp;rsquo;m
trying to do is pretty simple, I sign up for the service, and just
looking at the documentation available, can I get my blog application up
and running, and what did I have to do, in order for it to work. I&amp;rsquo;ll
describe each step along the way, as a helpful guide for others who
might be trying to do the same with their application. If I come across
an error, I will tell you what the error was, and how I fixed it, so
that if you get the same error, hopefully what I did to fix my problem,
will also fix yours.&lt;/p&gt;

&lt;h1 id=&#34;heroku-django-documentation:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Heroku Django Documentation&lt;/h1&gt;

&lt;p&gt;Before you start using any new platform, you should take the time to
read the documentation. I know it doesn&amp;rsquo;t sound like fun,but trust me,
it will save you a lot of pain and frustration later on. Here are some
links that I found helpful.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Quickstart guide&lt;/strong&gt;:
&lt;a href=&#34;http://devcenter.heroku.com/articles/quickstart&#34;&gt;http://devcenter.heroku.com/articles/quickstart&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python articles&lt;/strong&gt;: &lt;a href=&#34;http://devcenter.heroku.com/articles/python&#34;&gt;http://devcenter.heroku.com/articles/python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Django article&lt;/strong&gt;: &lt;a href=&#34;http://devcenter.heroku.com/articles/django&#34;&gt;http://devcenter.heroku.com/articles/django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dev Center&lt;/strong&gt;: &lt;a href=&#34;http://devcenter.heroku.com/&#34;&gt;http://devcenter.heroku.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;prerequisites:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Prerequisites&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Heroku account&lt;/li&gt;
&lt;li&gt;Heroku command line client&lt;/li&gt;
&lt;li&gt;Python 2.7, virtualenv, pip, git&lt;/li&gt;
&lt;li&gt;Must use pip to manage dependencies with a requirements.txt file&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;signing-up-for-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Signing up for Heroku&lt;/h1&gt;

&lt;p&gt;Signing up was as simple as can be, all I needed to do was follow this
link: &lt;a href=&#34;https://api.heroku.com/signup&#34;&gt;https://api.heroku.com/signup&lt;/a&gt; and fill out my email address. Go
into my email and click on the link they sent, which took me to a page
that had me pick my password, and I was done. The whole process took
less then 1 minute. Can&amp;rsquo;t beat that.&lt;/p&gt;

&lt;h1 id=&#34;verifying-you-heroku-account:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Verifying you Heroku account&lt;/h1&gt;

&lt;p&gt;When you sign up for an account, you have limited access to some
features (add-ons, etc.) until you verify your account. Verifing your
account is easy all you have to do is enter your credit card
information. This proves to them you are real, and also allows you to
use some of the paid features. I recommend that you verify your account
so that you can get access to some of the nice free add-ons that are
available.&lt;/p&gt;

&lt;h1 id=&#34;installing-the-heroku-command-line-client:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Installing the heroku command line client&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m using a mac so I&amp;rsquo;m going to install the following version of the
heroku command line client (toolbelt).
&lt;a href=&#34;http://toolbelt.herokuapp.com/osx/download&#34;&gt;http://toolbelt.herokuapp.com/osx/download&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click on link, download the file.&lt;/li&gt;
&lt;li&gt;Find the file that was downloaded (heroku-toolbelt.pkg) and double
click it.&lt;/li&gt;
&lt;li&gt;Follow prompts; enter password when prompted, and click close.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;test-heroku-command-line-client:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Test heroku command line client&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Open terminial&lt;/li&gt;
&lt;li&gt;Type &amp;ldquo;heroku version&amp;rdquo; you should see something like this
&amp;ldquo;heroku-gem/2.14.0&amp;rdquo; if so, it worked. if not, you did
something wrong.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;login-to-heroku-from-command-line-client:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Login to heroku from command line client&lt;/h1&gt;

&lt;p&gt;Logging into the client will try to find your ssh key, and upload it to
heroku for pushing code later on. If you don&amp;rsquo;t have a key it will prompt
you to create one. If you have more then one it will ask you which one
you want to use.&lt;/p&gt;

&lt;h2 id=&#34;no-key-found-example:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;No key found example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku login
Enter your Heroku credentials.
Email: adam@example.comPassword:
Could not find an existing public key.
Would you like to generate one? [Yn]
Generating new SSH public key.
Uploading ssh public key /Users/adam/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;found-more-then-one-key-example:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Found more then one key example&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku login
Enter your Heroku credentials.
Email: &amp;lt;my email&amp;gt;
Password:
Found the following SSH public keys:
1) apphosted.key.pub
2) id_rsa.pub
Which would you like to use with your Heroku account? 2
Uploading ssh public key /Users/ken/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;getting-your-django-application-ready:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Getting your Django application ready&lt;/h1&gt;

&lt;p&gt;Now that you have an account and the client installed, you are ready to
get started. If you are starting from scratch I recommend following the
steps in this tutorial. &lt;a href=&#34;http://devcenter.heroku.com/articles/django&#34;&gt;http://devcenter.heroku.com/articles/django&lt;/a&gt; .
If you are like me and already have an application that you want to
install on to Heroku, keep reading.&lt;/p&gt;

&lt;p&gt;Since I already have a project, I&amp;rsquo;m going to tell you what I needed to
do in order to get my blog application up and running on heroku. I
followed the instructions from the heroku tutorial and went from there.
Heroku depends on git, so I&amp;rsquo;m using a copy of my blog app that is hosted
on github: &lt;a href=&#34;https://github.com/kencochrane/kencochrane_blog_heroku&#34;&gt;https://github.com/kencochrane/kencochrane_blog_heroku&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ cd /Users/ken/projects/github

$ git clone https://kencochrane@github.com/kencochrane/kencochrane_blog_heroku.git kencochrane_heroku
$ cd kencochrane_heroku

# making a new virtual environment using virtualenvwrapper.
$ mkvirtualenv --no-site-packages --distribute kencochrane_heroku
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should automatically activate the environment for you. If it doesn&amp;rsquo;t,
run this command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ workon kencochrane_heroku
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that I have my virtualenv, I need to install my requirements using
pip.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;creating-django-application-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Creating django application on heroku&lt;/h1&gt;

&lt;p&gt;Creating an application on heroku is easy, you just need to run the
following command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku create --stack cedar
Creating some-name-4741... done, stack is cedar
http://some-name-4741.herokuapp.com/ | git@heroku.com:some-name-4741.git
Git remote heroku added
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;deploying-django-application-to-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Deploying django application to Heroku&lt;/h1&gt;

&lt;p&gt;Once you are ready you can deploy your django application to Heroku.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything went well, it should look something like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ git push heroku master
Counting objects: 209, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (176/176), done.
Writing objects: 100% (209/209), 271.89 KiB, done.
Total 209 (delta 28), reused 192 (delta 23)

-----&amp;gt; Heroku receiving push
-----&amp;gt; Python/Django app detected
-----&amp;gt; Preparing virtualenv version 1.6.4
       New python executable in ./bin/python
       Installing setuptools............done.
       Installing pip...............done.
-----&amp;gt; Django settings injection
       Injecting code into blog/settings.py to read from DATABASE_URL

&amp;lt;removed a lot of output that doesn&#39;t need to be shown&amp;gt;

       Successfully installed South django-activitysync django-debug-toolbar django-disqus django-memcache-status django-tagging django-xmlrpc feedparser httplib2 oauth2 python-memcached python-twitter simplejson yolk docutils Pygments psycopg2 Django
       Cleaning up...
-----&amp;gt; Discovering process types
       Procfile declares types         -&amp;gt; (none)
       Default types for Python/Django -&amp;gt; web
-----&amp;gt; Compiled slug size is 10.3MB
-----&amp;gt; Launching... done, v5
       http://some-name-4741.herokuapp.com deployed to Heroku
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;deploying-application-to-heroku-failed-now-what:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Deploying application to Heroku failed, now what?&lt;/h1&gt;

&lt;p&gt;The very first time you push to master you will get something like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ git push heroku master

The authenticity of host &#39;heroku.com (50.19.85.132)&#39; can&#39;t be established.
RSA key fingerprint is 8b:48:5e:67:0e:c9:16:47:32:f2:87:0c:1f:c8:60:ad.
Are you sure you want to continue connecting (yes/no)? yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is normal, just type &amp;lsquo;yes&amp;rsquo;, and you will never be prompted for this
again.&lt;/p&gt;

&lt;h2 id=&#34;django-app-must-be-in-a-package-subdirectory:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Django app must be in a package subdirectory&lt;/h2&gt;

&lt;p&gt;If you django project isn&amp;rsquo;t setup correctly, you will get an error like
this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ git push heroku master
Counting objects: 199, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (167/167), done.
Writing objects: 100% (199/199), 270.86 KiB, done.
Total 199 (delta 26), reused 192 (delta 23)


-----&amp;gt; Heroku receiving push
-----&amp;gt; Python app detected
 !     Django app must be in a package subdirectory
 !     Heroku push rejected, failed to compile Python app


To git@heroku.com:some-name-4741.git
 ! [remote rejected] master -&amp;gt; master (pre-receive hook declined)
error: failed to push some refs to &#39;git@heroku.com:some-name-4741.git&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This failed, because django app must be in a package subdirectory.. So
you need to change the way my django app is setup. Move all of the files
under a django project directory except the .git directory and
.gitignore and requirements.txt files. For an example of what this looks
like, check out the project directory structure on my repo in github.&lt;/p&gt;

&lt;h2 id=&#34;heroku-push-rejected-no-cedar-supported-app-detected:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Heroku push rejected, no Cedar-supported app detected&lt;/h2&gt;

&lt;p&gt;Another error you can get is this one. &amp;ldquo;Heroku push rejected, no
Cedar-supported app detected&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ git push heroku master
Counting objects: 204, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (171/171), done.
Writing objects: 100% (204/204), 271.34 KiB, done.
Total 204 (delta 27), reused 192 (delta 23)

-----&amp;gt; Heroku receiving push
 !     Heroku push rejected, no Cedar-supported app detected

To git@heroku.com:cold-summer-4741.git
 ! [remote rejected] master -&amp;gt; master (pre-receive hook declined)
error: failed to push some refs to &#39;git@heroku.com:cold-summer-4741.git&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I had this error and I couldn&amp;rsquo;t figure it out. After searching through
all of the heroku python docs (all 2 of them), I didn&amp;rsquo;t find anything,
so I started doing some trial and error testing, and I finally figure
out what was wrong. My django project directory was kencochrane_blog,
and this had an underscore, and when I changed it to just kenblog (no
more underscore), it worked. I couldn&amp;rsquo;t find anything anywhere that said
you can&amp;rsquo;t use underscores for your django app name, so they might want
to update their documentation, or possibly fix the bug. I&amp;rsquo;m not sure if
this is by design or not, maybe someone can let me know.&lt;/p&gt;

&lt;h1 id=&#34;check-django-application-status-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Check Django application status on heroku&lt;/h1&gt;

&lt;p&gt;Now that you have pushed your application out onto Heroku how do you
know if it is actually running? The Heroku client has a command called
ps, which will tell you what your processes are doing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku ps

Process       State               Command
------------  ------------------  ------------------------------
web.1         crashed for 2m      python kenblog/manage.py runserver 0...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My django application looks like it crashed. Most likely because I
didn&amp;rsquo;t setup the database yet, lets look at the logs to see what is
causing the problems to be sure.&lt;/p&gt;

&lt;h1 id=&#34;checking-django-application-logs-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Checking Django application logs on Heroku&lt;/h1&gt;

&lt;p&gt;The Heroku client has a nifty logs command that you can use to view the
last chunk of logs for your application. It will combine all of your
logs into one view, so that you don&amp;rsquo;t have to have more then one log
process running. You can call it directly and get an output similar to
the shell command &amp;lsquo;tail&amp;rsquo; and you can all use the &amp;lsquo;&amp;ndash;tail&amp;rsquo; option to
follow the logs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku logs --tail
2011-11-27T18:40:00+00:00 heroku[api]: Deploy 5f194d2 by kencochrane@2011-11-27T18:40:00+00:00 heroku[api]: Release v7 created by kencochrane@
2011-11-27T18:40:00+00:00 heroku[web.1]: State changed from crashed to created
2011-11-27T18:40:00+00:00 heroku[web.1]: State changed from created to starting
2011-11-27T18:40:00+00:00 heroku[slugc]: Slug compilation finished
2011-11-27T18:40:03+00:00 heroku[web.1]: Starting process with command `python kenblog/manage.py runserver 0.0.0.0:12033 --noreload`
2011-11-27T18:40:04+00:00 app[web.1]: Unexpected error: (&amp;lt;type &#39;exceptions.NameError&#39;&amp;gt;, NameError(&amp;quot;name &#39;DATABASES&#39; is not defined&amp;quot;,), &amp;lt;traceback object at 0x1a7b128&amp;gt;)
2011-11-27T18:40:05+00:00 app[web.1]: There is no South database module &#39;south.db.None&#39; for your database. Please either choose a supported database, check for SOUTH_DATABASE_ADAPTER[S] settings, or remove South from INSTALLED_APPS.
2011-11-27T18:40:06+00:00 heroku[web.1]: State changed from starting to crashed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks like it is an issue with the settings file. If you wanted to take
a look at the settings file to see if we can find out what is wrong you
can run the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# (your path will be different)
$ heroku run cat kenblog/settings.py

&amp;lt;normal settings file stuff with the following added at the end.&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;import os, sys, urlparse
urlparse.uses_netloc.append(&#39;postgres&#39;)
urlparse.uses_netloc.append(&#39;mysql&#39;)
try:
    if os.environ.has_key(&#39;DATABASE_URL&#39;):
        url = urlparse.urlparse(os.environ[&#39;DATABASE_URL&#39;])
        DATABASES[&#39;default&#39;] = {
            &#39;NAME&#39;:     url.path[1:],
            &#39;USER&#39;:     url.username,
            &#39;PASSWORD&#39;: url.password,
            &#39;HOST&#39;:     url.hostname,
            &#39;PORT&#39;:     url.port,
        }
        if url.scheme == &#39;postgres&#39;:
            DATABASES[&#39;default&#39;][&#39;ENGINE&#39;] = &#39;django.db.backends.postgresql_psycopg2&#39;
        if url.scheme == &#39;mysql&#39;:
            DATABASES[&#39;default&#39;][&#39;ENGINE&#39;] = &#39;django.db.backends.mysql&#39;
except:
    print &amp;quot;Unexpected error:&amp;quot;, sys.exc_info()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is odd, not sure why this is like this since I&amp;rsquo;m seeing the
DATABASES variable above. Let&amp;rsquo;s check to see if the environment
variables are there. (the output has been changed to protect the
innocent, but you still get the picture). You can also use the command
&amp;lsquo;heroku config&amp;rsquo; if you just want to see your application configuration
options.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku run env
Running env attached to terminal... up, run.6
DATABASE_URL=postgres://blah:somethingelse@ec2-555-55-555-555.compute-1.amazonaws.com/morestuff
PORT=37265
HOME=/app
PYTHONUNBUFFERED=true
TERM=xterm
COLUMNS=153

PATH=bin:/usr/local/bin:/usr/bin:/bin
PWD=/app
SHARED_DATABASE_URL=postgres://blah:evenmorestuff@ec2-555-55-555-555.compute-1.amazonaws.com/morestuff
LINES=32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This output looks good the DATABASE_URL env variable is there, so that
is OK. Looking more closely at my settings.py file I didn&amp;rsquo;t have a
DATABASES variable because the last time I used this project, the other
hosting provider didn&amp;rsquo;t require that I have one. So I have added a blank
DATABASES variable, and that seems to have fixed my issue. Heroku,
should make the error message a little nicer, add more notes to their
documentation, or even better make their code handle the case when there
is no DATABASES variable in the settings file. I have submitted a patch
to fix this, so hopefully that will get rolled out in the near future.
(&lt;a href=&#34;https://github.com/heroku/heroku-buildpack-python/pull/8&#34;&gt;https://github.com/heroku/heroku-buildpack-python/pull/8&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Now if we redeploy the app and look at the logs, they look much better.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku logs
2011-11-27T18:59:25+00:00 heroku[api]: Deploy 96be00f by kencochrane@
2011-11-27T18:59:25+00:00 heroku[api]: Release v8 created by kencochrane@
2011-11-27T18:59:25+00:00 heroku[web.1]: State changed from crashed to created
2011-11-27T18:59:26+00:00 heroku[web.1]: State changed from created to starting
2011-11-27T18:59:26+00:00 heroku[slugc]: Slug compilation finished
2011-11-27T18:59:31+00:00 app[web.1]: 0 errors found
2011-11-27T18:59:31+00:00 heroku[web.1]: State changed from starting to up
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;running-django-management-commands-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Running django management commands on Heroku&lt;/h1&gt;

&lt;p&gt;Running django management commands are easy you just need to run the
following command and replace &amp;lt;command&amp;gt; with the management
command you want to run. There are a few examples below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku run python kenblog/manage.py &amp;lt;command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;running-django-shell-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Running django shell on Heroku&lt;/h2&gt;

&lt;p&gt;If you need to use the interactive python shell with django, you still
can, you just need to run the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku run python kenblog/manage.py shell
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;syncing-django-database-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Syncing Django Database on Heroku&lt;/h2&gt;

&lt;p&gt;Now that our application is starting like it should let&amp;rsquo;s sync the db.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku run python kenblog/manage.py syncdb
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;running-django-south-migrations-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Running Django South Migrations on Heroku&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku run python kenblog/manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now lets look at our processes now&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku ps
Process       State               Command
------------  ------------------  ------------------------------
run.5         complete for 21m    cat kenblog/settings.py
run.6         complete for 18m    env
run.7         complete for 1m     python kenblog/manage.py syncdb
run.8         complete for 1m     python kenblog/manage.py migrate
web.1         up for 4m           python kenblog/manage.py runserver..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Things are looking better, we are up, and it also shows our old commands
that we ran.&lt;/p&gt;

&lt;p&gt;if you need to work with the processes you have the following options.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;ps:dynos [QTY]                 # scale to QTY web processes
ps:restart [PROCESS]           # restart an app process
ps:scale PROCESS1=AMOUNT1 ...  # scale processes by the given amount
ps:stop PROCESS                # stop an app process
ps:workers [QTY]               # scale to QTY background processes
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;opening-your-django-application-in-a-web-browser:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Opening your django application in a web browser&lt;/h1&gt;

&lt;p&gt;If you run this command it will open a web browser and hopefully your
site is running as it should&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku open
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;running-django-and-gunicorn-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Running django and gunicorn on heroku&lt;/h1&gt;

&lt;p&gt;By default heroku deploys with the built in django runserver, which
isn&amp;rsquo;t recommended for production. If you are playing around it is ok,
but once you get past that, the first thing you should do is switch to
something better like guincorn. Switching is quick and painless, and you
will be glad that you did.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add gunicorn==0.13.4 to your requirements file.&lt;/li&gt;
&lt;li&gt;create a new file called Procfile at the same level as your
requirements.txt file with the following in it.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;web: python kenblog/manage.py run_gunicorn -b &amp;quot;0.0.0.0:$PORT&amp;quot; -w 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add gunicorn to the installed_apps in settings.py&lt;/p&gt;

&lt;p&gt;then&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ git commit -am &amp;quot;use gunicorn&amp;quot;
$ git push heroku master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looking at your logs you will see it up and running&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku logs
2011-11-27T21:06:24+00:00 heroku[slugc]: Slug compilation started
2011-11-27T21:06:32+00:00 heroku[api]: Deploy 7b2eec1 by kencochrane@
2011-11-27T21:06:32+00:00 heroku[api]: Release v8 created by kencochrane@
2011-11-27T21:06:32+00:00 heroku[web.1]: State changed from created to starting
2011-11-27T21:06:35+00:00 heroku[web.1]: Starting process with command `python kenblog/manage.py run_gunicorn -b &amp;quot;0.0.0.0:4075&amp;quot; -w 3`
2011-11-27T21:06:36+00:00 app[web.1]: Validating models...
2011-11-27T21:06:37+00:00 heroku[web.1]: State changed from starting to up
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;running-django-celery-background-tasks-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Running django/celery background tasks on Heroku&lt;/h1&gt;

&lt;p&gt;Heroku offers you two types of processes, a web process and a worker
process. Web processes are used for serving web pages, etc. Worker
processes are used for items that run in the background. The heroku
tutorial goes over how to setup background task using celery and kombu
(&lt;a href=&#34;http://devcenter.heroku.com/articles/django&#34;&gt;http://devcenter.heroku.com/articles/django&lt;/a&gt;) if you want more info I
would check that out.&lt;/p&gt;

&lt;h1 id=&#34;serving-django-static-media-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Serving Django Static media on Heroku&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m not sure how to serve up static media on heroku, to get my app
working I just used the built in &amp;ldquo;django.views.static.serve&amp;rdquo; views for
now, this isn&amp;rsquo;t ideal and you would want a more permanent solution. A
more long term solution would be to push all static media into Amazon s3
and then use Amazon cloudfront to serve everything.&lt;/p&gt;

&lt;h1 id=&#34;uploading-files-to-heroku-with-django:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Uploading files to Heroku with Django&lt;/h1&gt;

&lt;p&gt;Heroku allows you to upload files to their app&amp;rsquo;s &amp;ldquo;Emphemeral
Filesystem&amp;rdquo;:
&lt;a href=&#34;http://devcenter.heroku.com/articles/dyno-isolation#ephemeral_filesystem&#34;&gt;http://devcenter.heroku.com/articles/dyno-isolation#ephemeral_filesystem&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Which the app can use as a temporary scratchpad, but no files it
writes are visible to any other &amp;ldquo;Each dyno gets its own ephemeral
filesystem, with a fresh copy of the most recently deployed code.
During its lifetime the dyno can use the filesystem as a temporary
scratchpad, but no files it writes are visible to any other dyno
(including other dynos in the application) and any files written will
be discarded the moment the dyno is stopped or restarted.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means you can&amp;rsquo;t use this space to store uploaded files, but it
should allow you to upload it there for a minute, and then send it over
to Amazon S3 for a more permant storage solution. You could use a tool
like Django Queued storage for this:
&lt;a href=&#34;https://github.com/jezdez/django-queued-storage&#34;&gt;https://github.com/jezdez/django-queued-storage&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;databases:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Databases&lt;/h1&gt;

&lt;p&gt;Heroku gives each app a 5MB shared postgresql database for FREE. If you
pay \$15/month you get upgraded to 20GB of space. They also offer
dedicated database instances if you need that. See this page for more
details. &lt;a href=&#34;http://www.heroku.com/pricing#0-0&#34;&gt;http://www.heroku.com/pricing#0-0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They also have a bunch of other addons (redis, mongodb, couchdb, amazon
RDS) that you should be able to tie into, see the addons page for a
complete list. &lt;a href=&#34;http://addons.heroku.com/&#34;&gt;http://addons.heroku.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;setting-up-django-caching-on-herku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Setting up Django Caching on Herku&lt;/h1&gt;

&lt;p&gt;To use memcache on Heroku, I went to the add-on page and installed the
free memcache addon. Once I did this I can run the heroku config command
to find out my config settings. I then use that information in my django
settings file so that I can have access to caching in my app.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ heroku config
...
MEMCACHE_PASSWORD    =&amp;gt; xxxxxxxxxxxx
MEMCACHE_SERVERS     =&amp;gt; instance.hostname.net
MEMCACHE_USERNAME    =&amp;gt; xxxxxxxxxxxx
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;They also offer redis if you prefer that.&lt;/p&gt;

&lt;h1 id=&#34;sending-email-from-django-on-heroku:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Sending Email from django on Heroku&lt;/h1&gt;

&lt;p&gt;If you need to send or receive email in your application there are a few
email add-ons that you can use. Pick the one you want and then run the
&amp;lsquo;heroku config&amp;rsquo; command described above to get your settings, and update
your django settings accordingly.&lt;/p&gt;

&lt;h1 id=&#34;application-size:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Application size&lt;/h1&gt;

&lt;p&gt;You application and all of it&amp;rsquo;s dependencies can&amp;rsquo;t be more then 100MB in
size.&lt;/p&gt;

&lt;h1 id=&#34;heroku-pricing:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Heroku Pricing&lt;/h1&gt;

&lt;p&gt;Directly from this page:
&lt;a href=&#34;http://devcenter.heroku.com/articles/how-much-does-a-dyno-cost&#34;&gt;http://devcenter.heroku.com/articles/how-much-does-a-dyno-cost&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dynos cost \$0.05 per hour, prorated to the second. For example, an app
with four dynos is charged \$0.20 per hour for each hour that the four
dynos are running.&lt;/p&gt;

&lt;p&gt;Pricing is based on calendar time. If you set your app to four dynos,
you will be charged \$0.20 per hour regardless of the traffic your site
serves during that time.&lt;/p&gt;

&lt;p&gt;Each application receives 750 free dyno hours per month. For example if
you have 1 web dyno running for all of April, and a worker dyno running
half the time you would have 330 dyno-hours billed that month or \$16.50
(720 web dyno hours + 360 worker dyno hours - 750 free dyno hours).&lt;/p&gt;

&lt;p&gt;See this page for more details: &lt;a href=&#34;http://www.heroku.com/pricing#0-0&#34;&gt;http://www.heroku.com/pricing#0-0&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;conclusion:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I haven&amp;rsquo;t really had much time to really play with Heroku, and stress
test it at all, but I have to say it is pretty impressive to begin with.
There are still some rough edges, but I&amp;rsquo;m sure they will have those
smoothed out before they remove the beta tag. The thing that impresses
me the most is all of the addons that you have access to out of the box.
I&amp;rsquo;m not sure how many of these work with the new platform, or with
django right now, but I&amp;rsquo;m sure it is only a matter of time before they
are available.&lt;/p&gt;

&lt;p&gt;I would highly recommend signing up and trying out their service, it is
free so what do you have to lose?&lt;/p&gt;

&lt;h2 id=&#34;update:cee93c979b55038b1b1ec8056ba75fc3&#34;&gt;Update&lt;/h2&gt;

&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with
dotCloud a competitor to Heroku. I plan on keeping this blog post up to
date and impartial. If you think there are any errors, please let me
know in the comments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Django Hosting Roundup: (Ep.io vs Gondor.io vs DotCloud vs Heroku vs AppHosted vs DjangoZoom) Who wins?</title>
      <link>http://www.kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/</link>
      <pubDate>Mon, 06 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/</guid>
      <description>

&lt;h1 id=&#34;updates:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Updates&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Updated 2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a
job with dotCloud. I plan on keeping this blog post up to date
and impartial. If you think there are any errors, please let me know
in the comments below.&lt;/li&gt;
&lt;li&gt;Updated 1/26/2012: Updated Gondor.io with info from Donald Stufft.&lt;/li&gt;
&lt;li&gt;Updated 01/24/2012: changed gondor.io to include SSL support&lt;/li&gt;
&lt;li&gt;Updated 01/01/2012: Added Heroku and updated ep.io, gondor.io,
and dotcloud.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;intro:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;For the past 6 weeks I have been trying out all of the new django/python
hosting services that are currently available today, and I have been
writing about my experiences along the way. It only makes sense to
conclude this series of articles with one last article comparing all of
the services against each other. It is important to note that many of
these services are still in development and aren&amp;rsquo;t even available to the
general public, so I&amp;rsquo;ll try to keep this article up to date as these
services change over time. With that said, don&amp;rsquo;t take my word for it, go
out and try all of these services on your own and find out which one you
like the best, you won&amp;rsquo;t be disappointed.&lt;/p&gt;

&lt;h1 id=&#34;quick-recap:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Quick Recap&lt;/h1&gt;

&lt;h2 id=&#34;ep-io:bcec1efcbef3921a30bfadad97f88500&#34;&gt;ep.io&lt;/h2&gt;

&lt;p&gt;Blog post: &lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-experiences-with-epio/&#34;&gt;My Experiences with
ep.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty solid offering, with a nice set of features and a decent price.
Good set of documentation.&lt;/p&gt;

&lt;p&gt;[&lt;strong&gt;Update&lt;/strong&gt;: Epio closed down on May 31st 2012 ]&lt;/p&gt;

&lt;h2 id=&#34;gondor-io:bcec1efcbef3921a30bfadad97f88500&#34;&gt;gondor.io&lt;/h2&gt;

&lt;p&gt;Blog post: &lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-day-gondorio/&#34;&gt;My day in
gondor.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Their website has a nice list of features that they expect to have once
they officially launch, but most of those features aren&amp;rsquo;t available yet.
The documentation is a little light, but the service has a lot of
potential.&lt;/p&gt;

&lt;h2 id=&#34;dotcloud-com:bcec1efcbef3921a30bfadad97f88500&#34;&gt;dotCloud.com&lt;/h2&gt;

&lt;p&gt;Blog post: &lt;a href=&#34;http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/&#34;&gt;Deploying my Django application to
dotcloud.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They have a ton of money ($10M), and with it, a ton of features. They
are very developer friendly, but you need to be pretty technical, it
isn&amp;rsquo;t quite ready for beginners. Good set of documentation.&lt;/p&gt;

&lt;p&gt;[&lt;strong&gt;Full disclosure&lt;/strong&gt;: I now work for dotCloud]&lt;/p&gt;

&lt;h2 id=&#34;apphosted-com:bcec1efcbef3921a30bfadad97f88500&#34;&gt;AppHosted.com&lt;/h2&gt;

&lt;p&gt;Blog post: &lt;a href=&#34;http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/&#34;&gt;apphosted.com Django Hosting
Review&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Built with security, stability and scalability on their mind from the
beginning. They have a solid offering, and they look to be targeting
enterprise customers who will pay more for that peace of mind. They are
currently lacking some key features, which I&amp;rsquo;m sure they will be adding
soon. Good set of documentation.&lt;/p&gt;

&lt;h2 id=&#34;djangozoom-com:bcec1efcbef3921a30bfadad97f88500&#34;&gt;DjangoZoom.com&lt;/h2&gt;

&lt;p&gt;Blog post: &lt;a href=&#34;http://kencochrane.net/blog/2011/06/djangozoom-com-review/&#34;&gt;DjangoZoom.com
Review&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Built to be fast and easy to use, still missing some key features, but
I&amp;rsquo;m sure they will be available by the time they go live. Decent amount
of documentation.&lt;/p&gt;

&lt;h2 id=&#34;heroku-com:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Heroku.com&lt;/h2&gt;

&lt;p&gt;Blog post: &lt;a href=&#34;http://kencochrane.net/blog/2011/11/developers-guide-for-running-django-apps-on-heroku/&#34;&gt;Developers guide for running django apps on
Heroku&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Originally built as a Ruby on Rails service, they have now added support
for python. The service is still in beta, but it has a lot of potential.
It looks a lot like what dotCloud is offering, with the ability to run
code from almost any language, and a ton of different add-ons for lots
of different services.&lt;/p&gt;

&lt;h1 id=&#34;awards:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Awards&lt;/h1&gt;

&lt;h2 id=&#34;fastest-deployments:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Fastest Deployments:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://DjangoZoom.com&#34;&gt;DjangoZoom.com&lt;/a&gt; - Zoom is right, it doesn&amp;rsquo;t take
long to configure your application and have it up and running on their
servers.&lt;/p&gt;

&lt;h2 id=&#34;easiest-to-use:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Easiest To Use:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://DjangoZoom.com&#34;&gt;DjangoZoom.com&lt;/a&gt; - No command line interface
needed, just a web browser, a project in a git repo that it has access
too, and a few questions answered and your app is up and running.&lt;/p&gt;

&lt;h2 id=&#34;most-features:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Most Features:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://dotcloud.com&#34;&gt;dotCloud.com&lt;/a&gt; - They raised \$10 Million, and they
are spending it on hiring people, buying companies, and building
services. They have a bunch of services currently and they don&amp;rsquo;t plan on
stopping, their roadmap has everything on it, and I think if you give
them enough time they will eventually have a service for everything.&lt;/p&gt;

&lt;h2 id=&#34;most-developer-friendly:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Most Developer Friendly:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://dotcloud.com&#34;&gt;dotCloud.com&lt;/a&gt; - They give lots of features without
handcuffing the developer. They are the only company with full database
and shell access. They do a good job of offering the same type of
service a developer could get if they built it themselves.&lt;/p&gt;

&lt;h2 id=&#34;best-overall-value:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Best Overall Value:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ep.io&#34;&gt;ep.io&lt;/a&gt; - This one is hard since most of the services
don&amp;rsquo;t have any pricing listed, but currently ep.io is in the lead, they
offer reasonable prices with a nice Free tier. This allows developers to
try out the service for FREE, as well as run smaller pet projects that
they might not have tried before because they didn&amp;rsquo;t want to pay for
hosting. They have the second most features available, second to only
dotCloud, and there service is pretty solid.&lt;/p&gt;

&lt;h2 id=&#34;easiest-project-setup:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Easiest Project Setup:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://apphosted.com&#34;&gt;apphosted.com&lt;/a&gt; - Their goal was to make it real
easy to get your project up onto their servers without having to change
your project, and they did that, there was very little if any changes I
needed to make in order to get my application up on their servers.&lt;/p&gt;

&lt;h1 id=&#34;django-feature-hosting-matrix:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Django Feature Hosting Matrix&lt;/h1&gt;

&lt;p&gt;To make things easier when comparing all of the different services I
have built this matrix with all of the information I compiled from each
of the services. I don&amp;rsquo;t know the answers for all services, but I&amp;rsquo;ll
update it when I find out those answers. If you know the answers feel
free to post a comment to let me know.&lt;/p&gt;

&lt;p&gt;I have included all of the new django services as well as google app
engine and webfaction.com, a tradition hosting service. This should make
it a little easier to see how these new services compare to other
hosting options.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[Chart removed since it was out of date]&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;who-wins:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Who wins?&lt;/h1&gt;

&lt;p&gt;It is really hard to pick just one winner, mainly because most of these
services are still in beta and not quite finished yet. Also because each
service is a little different, and it will depend on what you are trying
to do. So, go out try them out, and let me know which one you picked.&lt;/p&gt;

&lt;p&gt;The real winner is us, the developers, and the python community in
general. We now have a bunch of really cool services that will make our
lives better, and that is awesome.&lt;/p&gt;

&lt;h1 id=&#34;thank-you:bcec1efcbef3921a30bfadad97f88500&#34;&gt;Thank you!&lt;/h1&gt;

&lt;p&gt;I want to thank all of the people who made these services, and gave me
early access to their systems so that I could play around with them. I
wish them the best of luck, and hope they all are really successful, and
they are around for a long time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DjangoZoom.com Review</title>
      <link>http://www.kencochrane.net/blog/2011/06/djangozoom-com-review/</link>
      <pubDate>Sun, 05 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2011/06/djangozoom-com-review/</guid>
      <description>

&lt;p&gt;This is part five in my series on django hosting services. Previously, I
looked at
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-experiences-with-epio/&#34;&gt;ep.io&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/&#34;&gt;apphosted.com&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-day-gondorio/&#34;&gt;gondor.io&lt;/a&gt;,
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/&#34;&gt;dotcloud.com&lt;/a&gt;
and now I&amp;rsquo;m looking at &lt;a href=&#34;http://DjangoZoom.com&#34;&gt;DjangoZoom.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;DjangoZoom.com is the brain child of Nate Aune and Shimon Rura and is
based in Boston, Massachusetts. It was founded in 2010 at
&lt;a href=&#34;http://startupweekend.org/&#34;&gt;StartupWeekend Boston&lt;/a&gt; and was a finalist
in the &lt;a href=&#34;http://www.masschallenge.org/&#34;&gt;MassChallenge&lt;/a&gt;. Their office is
in the &lt;a href=&#34;http://dogpatchlabs.com/&#34;&gt;Dogpatch Labs&lt;/a&gt; space for startups in
Cambridge, Massachusetts. They are currently still in a closed beta, but
they were nice enough to send me an invite to check it out.&lt;/p&gt;

&lt;p&gt;Normally when I check out a service for the first time, I look over the
documentation to see what it can do, and what it can&amp;rsquo;t do, and what I
need to do in order to get my app up and running. DjangoZoom has a nice
collection of documents that help guide you through the process of
getting your application up and running on their platform. You need to
be logged in, in order to read the documents, so I won&amp;rsquo;t be able to link
to any documents here, but if you are lucky enough to get an invite to
DjangoZoom, I would check out the documents first, they will make the
process much easier. They answer most of the common questions that you
will have, and if you can&amp;rsquo;t find your answer you can send them a message
and they are very fast to respond.&lt;/p&gt;

&lt;p&gt;After reading the documents I learned a few things. First off,
DjangoZoom is a little different then the other services, all of the
previous services that I have reviewed ep.io, dotcloud, apphosted,
gondor.io, had a command line client that you use to push your
application up onto their servers.&lt;/p&gt;

&lt;p&gt;DjangoZoom doesn&amp;rsquo;t have a command line client at all, they only have a
web based control panel that you use to install and configure your
application. Also, instead of pushing your application code up on to
their servers, they pull the code down from your code repository at
build time. Most of the other services try and make it so that you can
run any python/wsgi based application, where as DjangoZoom, is only
supporting Django applications.&lt;/p&gt;

&lt;p&gt;Not having a command line client has it&amp;rsquo;s pros and cons. The main
advantage of not having a command line client is simplicity. No need to
install anything on your machine in order to deploy your code, all you
need is a web browser. You can deploy your code from anywhere you have
an internet connection. Making the application deployment as easy as
possible will open up their service to people that are less technical,
and might not be comfortable installing a command line client and
running commands. The disadvantages of using just a web based console is
that you are limited to what you can do in a browser. This is going to
be less and less of an issue going forward as web browsers are getting
more and more powerful all of the time. Also, just because they only
offer a web based console now, doesn&amp;rsquo;t mean they can&amp;rsquo;t add a command
line client later.&lt;/p&gt;

&lt;p&gt;Just like all of the other reviews I&amp;rsquo;m going to test out the system by
deploying my blog onto their system and see how it goes. My blog is
currently hosted on bitbucket.org which uses mercurial, and currently
djangozoom.com only offers support for git. In order to use
djangozoom.com I needed to make a fork of my blog and put it on github.
You can find my fork here:
&lt;a href=&#34;https://github.com/kencochrane/kencochrane_blog&#34;&gt;https://github.com/kencochrane/kencochrane_blog&lt;/a&gt; . They recommend
github for git hosting, but you can use just about any git repo that is
publicly accessible. If you have a private git repo, and you are on
github just add the user djangozoom as a collaborator on your project.
If you aren&amp;rsquo;t on github and you have a private repo, you can add their
public key to your repo, and it will give them permission to access your
git repository from their servers.&lt;/p&gt;

&lt;h1 id=&#34;install-process:927af003b7c8858a42469bacd2525b8a&#34;&gt;Install Process&lt;/h1&gt;

&lt;p&gt;Once I had my code up on github I needed to make a few changes in order
for it to work correctly, nothing major just needed to make my
settings.py file a little more standard, which was pretty typical for
the other services as well. Now that I had that done, I was ready to
login to DjangoZoom and setup my application. Registering and logging
into DjangoZoom was pretty straight forward, it was the same process as
most online services, so just about anyone could do it with their eyes
closed.&lt;/p&gt;

&lt;p&gt;After I logged in, I was able to add my application, here are the steps
that I took to get my application up and running.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Clicked on &amp;ldquo;add a new project&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Put in repo url: &lt;a href=&#34;git://github.com/kencochrane/kencochrane_blog.git&#34;&gt;git://github.com/kencochrane/kencochrane_blog.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Only SSH authentication is supported, so use either an
unauthenticated public URL, or an SSH url (e.g.
&lt;a href=&#34;mailto:git@github.com&#34;&gt;git@github.com&lt;/a&gt;:yourname/project.git. On github.org, use the Git
Read-Only URL if your repo is public, or the SSH URL if private.)&lt;/p&gt;

&lt;p&gt;Hit Next.&lt;/p&gt;

&lt;p&gt;Entered my title &amp;ldquo;kencochrane_blog&amp;rdquo;&lt;/p&gt;

&lt;p&gt;selected django 1.3&lt;/p&gt;

&lt;p&gt;settings module : mysite.settings&lt;/p&gt;

&lt;p&gt;static media location : &amp;ldquo;static /site-media&amp;rdquo;&lt;/p&gt;

&lt;p&gt;no additional directories to add to python path&lt;/p&gt;

&lt;p&gt;put in my requirements.txt file, so that it knows where to find my pip
requirements. You don&amp;rsquo;t need to do this, djangozoom will scan your
projects and find this out for you, but it didn&amp;rsquo;t work for me, I have
an issue with my application that I wasn&amp;rsquo;t able to find, and it was
causing issues with their autoscanner. I think this is more my fault
then theirs.&lt;/p&gt;

&lt;p&gt;not putting in any extra requirements.&lt;/p&gt;

&lt;p&gt;base(repo) python package: put mysite.settings because my settings.py
and root urls.py are at the top level of your repository. normally I
don&amp;rsquo;t do this, but I was following the example of this repo
&lt;a href=&#34;https://github.com/natea/mezzanine-site&#34;&gt;https://github.com/natea/mezzanine-site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Checked the &amp;ldquo;ready to roll, deploy my project now&amp;rdquo; check box and hit
next&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At first I had some errors with my requirements, I needed to remove
django and mysql and update the python-twitter lib. Once I did that, it
worked like a charm. The whole deploy process only took 2 minutes and 45
seconds.&lt;/p&gt;

&lt;p&gt;Wow that was fast, pretty impressive considering it needed to pull down
all of the code from github, and download a ton of dependencies, and
then do what ever it needs to do to set it up on to their servers. After
talking with them about this, they said they hope to get it even faster,
which would be pretty impressive.&lt;/p&gt;

&lt;p&gt;Now that I have my app deployed I can change some of the settings.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I created an alias to for my app to
&lt;a href=&#34;http://kencochrane.djangozoom.net&#34;&gt;http://kencochrane.djangozoom.net&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also add a hostname like kencochrane.net.&lt;/p&gt;

&lt;p&gt;you can add a wildcard hostname as well. *.kencochrane.net.&lt;/p&gt;

&lt;p&gt;You can create a django superuser.&lt;/p&gt;

&lt;p&gt;You can also run any of your manage.py commands right from the web
console.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This whole process was pretty straight forward and didn&amp;rsquo;t take long to
complete. Now that I have done it with one application, it will be much
easier for the next one.&lt;/p&gt;

&lt;h1 id=&#34;cool-feature-request:927af003b7c8858a42469bacd2525b8a&#34;&gt;Cool Feature Request&lt;/h1&gt;

&lt;p&gt;Currently DjangoZoom makes it really easy to deploy your application to
their servers. What would be cool is if they would make it easy to
deploy common django applications to their service. For example on their
blog they have a video to show how easy it is to &lt;a href=&#34;http://djangozoom.com/blog/2011/03/15/deploying-django-cms-45-seconds-djangozoom/&#34;&gt;deploy django-cms to
DjangoZoom&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the video it shows them going out to github, forking and copying the
link to the project, and then making some minor changes on the
djangozoom settings page to get it to work correctly, and then it
deploys. These steps weren&amp;rsquo;t complicated but you needed to know what to
do in order to get it to work. What if they made this a one step
process?&lt;/p&gt;

&lt;p&gt;Click on a &amp;ldquo;install django-cms&amp;rdquo; link, and then their service would do
what it needs to do to get it up and running on their service, and then
returns you to a page where you can configure the app, add a django
admin user, change the url, etc. That would allow someone who doesn&amp;rsquo;t
know anything about django an easy way to get a django-cms based website
in no time. They could add one click installs for all kinds of common
django projects, and expand outside of the developer community, which
would expand their customer base. Those customers are the ones that
really don&amp;rsquo;t want to worry about server deploys and server management,
and they are the ones that will pay more for those features.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m sure this feature isn&amp;rsquo;t on their roadmap, but I just thought I would
throw it out there and see what people have to say about it.&lt;/p&gt;

&lt;h1 id=&#34;djangozoom-com-status:927af003b7c8858a42469bacd2525b8a&#34;&gt;DjangoZoom.com status&lt;/h1&gt;

&lt;p&gt;DjangoZoom is still in closed beta, which means they are not done with
it yet, and there may be some occasional bugs that pop up here and
there, but that is expected. Another thing about a beta is that not all
of the features are finished yet. So before you jump in and try and get
your application up and running, check and make sure that your
application can run correctly on the service with the features they have
available so far. Here is a run down of all the different features your
application might need and where they stand in DjangoZoom today.&lt;/p&gt;

&lt;h2 id=&#34;logging:927af003b7c8858a42469bacd2525b8a&#34;&gt;Logging&lt;/h2&gt;

&lt;p&gt;You currently can&amp;rsquo;t view your django or nginx logs at this time, they
are working on this feature and hope to have it so that you can view
your logs in the web based console in the future. In the meantime you
can use a tool like django-sentry to view your django-logs.&lt;/p&gt;

&lt;h2 id=&#34;ssl:927af003b7c8858a42469bacd2525b8a&#34;&gt;SSL&lt;/h2&gt;

&lt;p&gt;Not available yet.&lt;/p&gt;

&lt;h2 id=&#34;caching:927af003b7c8858a42469bacd2525b8a&#34;&gt;Caching&lt;/h2&gt;

&lt;p&gt;They currently don&amp;rsquo;t support a caching server, they want to make sure
they set it up correctly so that it is reliable and so that it is
secure. In the meantime you can use django local memory caching.&lt;/p&gt;

&lt;h2 id=&#34;database:927af003b7c8858a42469bacd2525b8a&#34;&gt;Database&lt;/h2&gt;

&lt;p&gt;They support PostgreSQL 8.4, if you are using mysql you will need to
convert your app to support PostgreSQL. Since the Django ORM handles
this by default, this shouldn&amp;rsquo;t be a big deal unless you did something
custom. No direct database access available. Loading data into system
only supported by using django dumpdata/loaddata&lt;/p&gt;

&lt;h2 id=&#34;background-tasks:927af003b7c8858a42469bacd2525b8a&#34;&gt;Background tasks&lt;/h2&gt;

&lt;p&gt;Not available yet, celery support possible in the future.&lt;/p&gt;

&lt;h2 id=&#34;cronjobs:927af003b7c8858a42469bacd2525b8a&#34;&gt;Cronjobs&lt;/h2&gt;

&lt;p&gt;Not supported, they recommend &lt;a href=&#34;http://packages.python.org/APScheduler/&#34;&gt;Advanced Python
Scheduler&lt;/a&gt; or
&lt;a href=&#34;https://github.com/reavis/django-cron&#34;&gt;django-cron&lt;/a&gt; which should run on
their system.&lt;/p&gt;

&lt;h2 id=&#34;shell-access:927af003b7c8858a42469bacd2525b8a&#34;&gt;Shell Access&lt;/h2&gt;

&lt;p&gt;Not supported&lt;/p&gt;

&lt;h2 id=&#34;api:927af003b7c8858a42469bacd2525b8a&#34;&gt;API&lt;/h2&gt;

&lt;p&gt;Not available yet, one planned for the future.&lt;/p&gt;

&lt;h2 id=&#34;command-line-client:927af003b7c8858a42469bacd2525b8a&#34;&gt;Command line client&lt;/h2&gt;

&lt;p&gt;Not available yet, one planned for the future. Use the web base control
panel.&lt;/p&gt;

&lt;h2 id=&#34;version-control:927af003b7c8858a42469bacd2525b8a&#34;&gt;Version control&lt;/h2&gt;

&lt;p&gt;Currently only supports git.&lt;/p&gt;

&lt;h2 id=&#34;videos:927af003b7c8858a42469bacd2525b8a&#34;&gt;Videos&lt;/h2&gt;

&lt;p&gt;Here are some videos of the DjangoZoom.com deployment process.&lt;/p&gt;

&lt;p&gt;&lt;p&gt;&lt;iframe title=&#34;YouTube video player&#34; width=&#34;480&#34; height=&#34;390&#34; src=&#34;http://www.youtube.com/embed/NCQxqw94Cgs&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;&lt;iframe title=&#34;YouTube video player&#34; src=&#34;http://www.youtube.com/embed/DSe6R1ByS5k&#34; width=&#34;480&#34; frameborder=&#34;0&#34; height=&#34;390&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion:927af003b7c8858a42469bacd2525b8a&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I really enjoyed playing with DjangoZoom, it is quick and easy to use,
it is still missing some key features that some people will need, but
I&amp;rsquo;m sure they will add those soon enough. I wish them luck, and I can&amp;rsquo;t
wait to see them go live to the general public.&lt;/p&gt;

&lt;h1 id=&#34;update:927af003b7c8858a42469bacd2525b8a&#34;&gt;Update:&lt;/h1&gt;

&lt;p&gt;Read how this service stacks up against other services like it in my
&lt;a href=&#34;http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/&#34;&gt;Django hosting
roundup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with
dotCloud a competitor to DjangoZoom. I plan on keeping this blog post up
to date and impartial. If you think there are any errors, please let me
know in the comments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AppHosted.com Django Hosting Service Review</title>
      <link>http://www.kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/</link>
      <pubDate>Wed, 18 May 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2011/05/apphosted-com-django-hosting-review/</guid>
      <description>

&lt;p&gt;This post is the fourth in my series about the new Django hosting
services that just recently hit the market. Previously I have reviewed
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-experiences-with-epio/&#34;&gt;ep.io&lt;/a&gt; ,
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-day-gondorio/&#34;&gt;gondor.io&lt;/a&gt; , and
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/&#34;&gt;dotCloud.com&lt;/a&gt;
.This post reviews &lt;a href=&#34;http://AppHosted.com&#34;&gt;AppHosted.com&lt;/a&gt; , another
similar service that is currently in beta. I was lucky enough to get a
sneak peak of this service before it was released to the general public,
and here are my notes and impressions for the short time I had to play
with the new service.&lt;/p&gt;

&lt;h1 id=&#34;overview:fd2d20709a7d24937bf602503a235c47&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://AppHosted.com&#34;&gt;AppHosted.com&lt;/a&gt; uses a similar concept as the
other django hosting services, they provide you with a command line
client called metro that you use to interact with the service. Like the
other command line clients, it is pretty much just a nice wrapper around
their API, so anything you can do with the metro client you can do with
their API. The client is used to configure your service and push your
files up into their servers. Once the application is created and your
code has been uploaded to their server, you can use their web based
control panel to configure or manage your application.&lt;/p&gt;

&lt;p&gt;So that we can compare apples to apples I will go through the process of
installing my blog onto the service so that we can see how it works with
apphosted compared to the other services. It will also hopefully provide
a very simple how to guide on how to install your application onto
AppHosted.com.&lt;/p&gt;

&lt;h1 id=&#34;first-steps:fd2d20709a7d24937bf602503a235c47&#34;&gt;First Steps&lt;/h1&gt;

&lt;p&gt;Like all new projects the first thing that I like to do is create a new
project directory and a new virtual environment for the project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# move into my projects directory
$ cd ~projects/

# make my virtual environment apphosted
$ mkvirtualenv apphosted

# clone my blog
$ hg clone https://bitbucket.org/kencochrane/kencochranenet kencochrane_apphosted

# move into the new project directory
$ cd kencochrane_apphosted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that I have a local working copy of my blog code and a new virtual
environment I&amp;rsquo;m ready to go.&lt;/p&gt;

&lt;h1 id=&#34;command-line-interface:fd2d20709a7d24937bf602503a235c47&#34;&gt;Command Line Interface&lt;/h1&gt;

&lt;p&gt;AppHosted has a command line client called Metro, it uses this client to
configure and upload your application onto the apphosted servers. Metro
only has three dependencies: httplib2, paramiko, and pycrypto, if you
don&amp;rsquo;t have them installed pip should handle that for you.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# install the metro client
$ pip install metroclient

Downloading/unpacking metroclient
Running setup.py egg_info for package metroclient
Requirement already satisfied (use --upgrade to upgrade): httplib2 in /Users/ken/.virtualenvs/apphosted/lib/python2.6/site-packages (from metroclient)
Requirement already satisfied (use --upgrade to upgrade): paramiko in /Library/Python/2.6/site-packages (from metroclient)
Requirement already satisfied (use --upgrade to upgrade): pycrypto&amp;gt;=1.9 in /Library/Python/2.6/site-packages (from paramiko-&amp;gt;metroclient)
Installing collected packages: metroclient
Running setup.py install for metroclient
changing mode of build/scripts-2.6/metro from 644 to 755
changing mode of /Users/ken/.virtualenvs/apphosted/bin/metro to 755
Successfully installed metroclient
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;initial-data-django-admin-user:fd2d20709a7d24937bf602503a235c47&#34;&gt;Initial Data &amp;amp; Django admin user&lt;/h1&gt;

&lt;p&gt;At the moment Apphosted.com doesn&amp;rsquo;t provide an easy way to create a
django admin user, in order to create this user in your appHosted.com
database you need to create it on a local database and then export that
data into a fixture called initial_data.json.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# locally I run this command to dump the data, so that I can load on app hosted.
$ python manage.py dumpdata &amp;gt; initial_data.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is another way to create the django admin user, which I&amp;rsquo;ll
describe a little later. This would also be the same way that you would
import any application data that you need in order for your application
to run correctly.&lt;/p&gt;

&lt;h1 id=&#34;metro-client:fd2d20709a7d24937bf602503a235c47&#34;&gt;Metro Client&lt;/h1&gt;

&lt;p&gt;One of the goals for appHosted.com was that they didn&amp;rsquo;t want to require
that you make lots of changes to your project directory structure in
order to use their service. In order to do this they need to do a lot
more work to figure out what it is you want to do, and if they can&amp;rsquo;t
figure it out, they will ask you some questions.&lt;/p&gt;

&lt;p&gt;Now that we have our project directory and our initial_data.json file
all ready, lets go ahead and deploy the application. Activate the
virtual environment and go into your project directory. Kick off the
metro client and answer the questions that pop up.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# run the metro client.
$ metro

Metro Application Manager 1.21
Copyright (c) Lumentica,  http://www.lumentica.com

Application directory (i.e. path to project): ./
Application name: kencochraneblog
Application version: 0.1
Application description: Ken&#39;s AppHosted Blog
Application modules (extra; comma-separated): South==0.7.3, django-activitysync==0.2.2, django-debug-toolbar==0.8.4, django-disqus==0.3.4, django-memcache-status==1.0.1, django-tagging==0.3.1, django-xmlrpc==0.1.2, feedparser==4.1, httplib2==0.6.0, oauth2==1.2.0, python-memcached==1.47, python-twitter==0.8.1, simplejson==2.1.2, wsgiref==0.1.2, yolk==0.4.1, docutils==0.6, Pygments==1.3.1
WSGI module (optional):
Paste config (optional):
Fixtures (optional; comma-separated):
Sync database and load fixtures? (y/n): y
Use SSL? (y/n): n
Force SSL: (y/n): n
Build complete.
Upload to AppHosted? (y/n): y
AppHosted Username: kencochrane
AppHosted Password:
Deploying...
:: Configuring application environment...
:: Configuring application permissions...
:: Configuring application server...
:: Application deployed to server successfully...
:: Application deployment complete...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What did this do for us? It takes our application, and uploads it to
their server, and then it installs all of our dependencies that we
listed above. Then it configures it according to our answers, and tries
to start it up, if we told it to, it will sync our database and load our
fixtures. It also takes all of this information and stores it in a file
called metro.config, so that we don&amp;rsquo;t need to type that in every time if
nothing has changed.&lt;/p&gt;

&lt;p&gt;You might have noticed that I needed to manually enter in all of my
dependencies when prompted, when I asked about this, I was told that if
I didn&amp;rsquo;t enter all of the dependencies it would scan the project for a
pip style requirements.txt file, and use that to load all of your
dependencies. I haven&amp;rsquo;t had a chance to test that out yet, since I
already entered my requirements by hand, and once you do it, you don&amp;rsquo;t
need to do it again.&lt;/p&gt;

&lt;p&gt;My blog uses south for migration management, and at the time of this
writing there is a bug, and it isn&amp;rsquo;t correctly kicking off the migrate
command during the database sync process. They are aware of the issue
and they are working on a fix, but there is a work around in the
meantime. I&amp;rsquo;ll describe the work around shortly.&lt;/p&gt;

&lt;p&gt;Once your application is deployed it will almost immediately be
available at &lt;a href=&#34;http://&#34;&gt;http://&lt;/a&gt;&amp;lt;your-app-name&amp;gt;.apphosted.com.&lt;/p&gt;

&lt;h1 id=&#34;log-files:fd2d20709a7d24937bf602503a235c47&#34;&gt;Log Files&lt;/h1&gt;

&lt;p&gt;In order to view the log files, you need to log into the web control
panel and from there you can download the logs that you are interested
in. At the moment they only support downloading the log files, which is
a little inconvenient, it would be nice to have the ability to tail the
logs, or see the last 50 or 100 lines in the control panel. I asked
about this, and they agreed and said it is on their list of things to
work on.&lt;/p&gt;

&lt;h1 id=&#34;shell-access:fd2d20709a7d24937bf602503a235c47&#34;&gt;Shell Access&lt;/h1&gt;

&lt;p&gt;Metro gives you the ability to shell into your application directory, so
that you can kick off django management commands, and other cool things.
One important thing to note is that when you login to the shell, it is a
jailed shell, and you only have access to your own project, and with
limited command access. This is done for security reasons. It is nice to
know that your application runs in it&amp;rsquo;s own jailed area, and no one
else&amp;rsquo;s applications can access your information.&lt;/p&gt;

&lt;p&gt;Setting up the shell access requires a few steps. Follow these
directions to get the full details:
&lt;a href=&#34;http://docs.apphosted.com/apphosted/apphosted_shell.html&#34;&gt;http://docs.apphosted.com/apphosted/apphosted_shell.html&lt;/a&gt; , but
basically it requires the following.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;create a ssh key if you don&amp;rsquo;t already have one.&lt;/li&gt;
&lt;li&gt;Login to the web console and add your public key.&lt;/li&gt;
&lt;li&gt;In the web console browse over to your application
Settings-&amp;gt;Tools page and click on the “Update Public
Keys” button. (Don&amp;rsquo;t forget about this step, or you won&amp;rsquo;t be able
to login.&lt;/li&gt;
&lt;li&gt;Use the metro client to open the shell.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: It would be real cool if we didn&amp;rsquo;t have to do step 3, why can&amp;rsquo;t
it automatically update the public keys for all apps? I&amp;rsquo;m guessing it is
a security reason. The first time, I didn&amp;rsquo;t hit the update public keys
button and I couldn&amp;rsquo;t figure out why it wasn&amp;rsquo;t working, and luckily one
quick email to the support line, and they let me know what I did wrong,
and I was up and running in no time.&lt;/p&gt;

&lt;p&gt;This is how you can kick off the shell, there are a bunch of command
line args that you can pass as well, just do metro &amp;ndash;help and it will
show them all to you.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ metro -s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: There is currently a bug that is preventing me from logging into
the shell from my MacBook Pro OS X 10.6.7 using Python 2.6.1 . When I do
it gives me this error. I have informed appHosted, and they said it
looks like an issue with paramiko and python 2.6.1 on the Mac, not sure
if it affects other python versions on other operating systems. They are
working on the issue.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ metro -s
Metro Application Manager 1.21
Copyright (c) Lumentica,  http://www.lumentica.com

Application name: kencochraneblog
AppHosted Username: kencochrane
AppHosted Password:
Traceback (most recent call last):
File &amp;quot;/Users/ken/.virtualenvs/apphosted/bin/metro&amp;quot;, line 75, in run_shell
ssh.connect(host, username=app_name, port=port)
File &amp;quot;/Library/Python/2.6/site-packages/paramiko/client.py&amp;quot;, line 278, in connect
for (family, socktype, proto, canonname, sockaddr) in socket.getaddrinfo(hostname, port, socket.AF_UNSPEC, socket.SOCK_STREAM):
gaierror: [Errno 8] nodename nor servname provided, or not known
Error: [Errno 8] nodename nor servname provided, or not known
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;work-arounds:fd2d20709a7d24937bf602503a235c47&#34;&gt;Work Arounds&lt;/h1&gt;

&lt;p&gt;Now that you know how to shell into your application, you can also kick
off django management commands. I mentioned earlier that there was
another way to create the django admin user, well here is how you do it.
Login to the metro shell and then kick off the createsuperuser django
management command. Logging into the shell and finding things isn&amp;rsquo;t easy
do to the added security so to save you some trouble this is what I did.
Python isn&amp;rsquo;t in your path so you need to put the fully qualified path to
the virtual env&amp;rsquo;s python. Not sure if the jailed shell allows you to
edit your .profile if so, it might be nice to configure this so that you
don&amp;rsquo;t always have to do the full path.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# Create superuser (django admin)
$ /ve/kencochraneblog/bin/python /app/kencochraneblog/mysite/manage.py createsuperuser

# kicking off south migrations by hand.
$ /ve/kencochraneblog/bin/python /app/kencochraneblog/mysite/manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My application&amp;rsquo;s name is kencochraneblog, so make sure you replace my
application name with yours, it should be something like this. replace
app_name,django_project_dir and command with your variables.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ /ve/&amp;lt;app_name&amp;gt;/bin/python /app/&amp;lt;app_name&amp;gt;/&amp;lt;django_project_dir&amp;gt;/manage.py &amp;lt;command&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;background-tasks:fd2d20709a7d24937bf602503a235c47&#34;&gt;Background Tasks&lt;/h1&gt;

&lt;p&gt;AppHosted also supports background tasks via celery, they don&amp;rsquo;t have the
documentation created yet, but it should be available soon. They are
also planning on supporting a cron like service, not sure if it will be
cron, or something similar, but it should do, what you need it to do.&lt;/p&gt;

&lt;h1 id=&#34;api:fd2d20709a7d24937bf602503a235c47&#34;&gt;API&lt;/h1&gt;

&lt;p&gt;AppHosted provides a pretty nice API that allows you to do anything that
the metro client does. This will allow you to write your own automation
and management scripts to interact with your application. If you
practice continuous deployment, it will allow you to automatically
deploy the latest version of code on a post commit hook, if all of your
tests pass.&lt;/p&gt;

&lt;h1 id=&#34;services:fd2d20709a7d24937bf602503a235c47&#34;&gt;Services&lt;/h1&gt;

&lt;p&gt;Right now they only support memcache for caching, and PostgreSQL for
databases, but they plan on adding more services as they move forward.&lt;/p&gt;

&lt;h1 id=&#34;conclusion:fd2d20709a7d24937bf602503a235c47&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I have been playing with AppHosted for a few weeks now, and I&amp;rsquo;m pretty
happy with what they have so far. They still have a few issues to work
out and they are still a work in progress, but I have been seeing
improvements all of the time, so it will only be a matter of time before
they are ready for the general public. Every time I came across an
issue, they were quick to reply to my emails and solve my issues, or
tell me where I was going wrong. If you have any more questions I
recommend checking out their documentation @
&lt;a href=&#34;http://docs.apphosted.com/index.html&#34;&gt;http://docs.apphosted.com/index.html&lt;/a&gt; . Check them out, and make sure
you let me know what you think.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;They are now open to the general public.&lt;/p&gt;

&lt;h2 id=&#34;update:fd2d20709a7d24937bf602503a235c47&#34;&gt;Update:&lt;/h2&gt;

&lt;p&gt;Read how this service stacks up against other services like it in my
&lt;a href=&#34;http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/&#34;&gt;Django hosting
roundup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with
dotCloud a competitor to apphosted. I plan on keeping this blog post up
to date and impartial. If you think there are any errors, please let me
know in the comments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploying my Django application to dotCloud</title>
      <link>http://www.kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/</link>
      <pubDate>Tue, 26 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2011/04/deploying-my-django-application-to-dotcloud/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;warning&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This post is out of date, please read the new updated one:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kencochrane.net/blog/2012/03/deploying-a-django-application-on-dotcloud/&#34;&gt;Deploying my Django application to dotCloud Part
2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I have recently wrote about
&lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-experiences-with-epio/&#34;&gt;ep.io&lt;/a&gt;
and &lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-day-gondorio/&#34;&gt;gondor.io&lt;/a&gt;,
two new python/django hosting services that are currently in beta.
Another new service that has just recently hit the scene and is causing
a lot of waves is &lt;a href=&#34;http://dotcloud.com&#34;&gt;DotCloud.com&lt;/a&gt;. DotCloud is a
little different for a number of reasons. Their service isn&amp;rsquo;t targeting
any one technology stack like ep.io and gondor.io with
Python/Django/wsgi.&lt;/p&gt;

&lt;p&gt;DotCloud&amp;rsquo;s goal is to provide a bunch of different independent services
that you can use as building blocks to build your application. If you
need a database, take your pick from one of the many they support. Need
an application that uses Django or Rails on the front end, and Java in
the backend, that is fine, you can do that too. They realize that most
developers don&amp;rsquo;t stick to one standard technology stack for all of their
applications, so this allows you the flexibility to use the best tool
for the job. It also gives you a nice playground to try out new services
and see how they run without having to install, configure and maintain
the service just for testing.&lt;/p&gt;

&lt;p&gt;DotCloud was part of the Y Combinator summer class of 2010, and they
just recently &lt;a href=&#34;http://techcrunch.com/2011/03/22/paas-dotcloud-raises-10m-from-jerry-yang-benchmark-and-others/&#34;&gt;raised $10
Million&lt;/a&gt;.
With access to that much money, I&amp;rsquo;m guessing they will be hiring a bunch
of people pretty quickly, and I&amp;rsquo;m sure we will be seeing their services
expand as well.&lt;/p&gt;

&lt;p&gt;Like all new technologies, I want to play with them, and see if they
live up to all of the hype. I was lucky enough to get a beta invite a
few weeks ago, and I have been playing with it since. I decided that the
best way to test it out would be to deploy my blog, and see how hard it
would be. Here are the steps that I took to get my django based blog up
and running on DotCloud. I ran into a few issues and I made sure that I
put those in as well, so that if you get the same issue you can see how
I solved it.&lt;/p&gt;

&lt;h1 id=&#34;documentation:d61e2efe99db168c8115d51b1877dded&#34;&gt;Documentation&lt;/h1&gt;

&lt;p&gt;Before I get started with any new service the first thing I usually do
is look at the documentation. DotCloud has a nice list of documents
along with some tutorials on how to get started. These 3 documents were
the ones that I used the most.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.dotcloud.com/tutorials/django/&#34;&gt;http://docs.dotcloud.com/tutorials/django/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.dotcloud.com/components/mysql/&#34;&gt;http://docs.dotcloud.com/components/mysql/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.dotcloud.com/tutorials/firststeps/&#34;&gt;http://docs.dotcloud.com/tutorials/firststeps/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;first-steps:d61e2efe99db168c8115d51b1877dded&#34;&gt;First Steps:&lt;/h1&gt;

&lt;p&gt;Like all cool services these days, dotcloud uses a python based CLI, so
before we can get started we need to install the dotcloud client and
configure it so that we can start using it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# create my dotcloud virtual environment.
$ mkvirtualenv dotcloud

# install dotcloud client using pip
$ pip install dotcloud

# create our application namespace called kencochrane
$ dotcloud create kencochrane

#enter api key that we got from: http://www.dotcloud.com/account/settings when prompted
#&amp;lt;key goes here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have the client all setup, and an application namespace, now
we can start building our service. I have forked my blog repository on
bitbucket so that I could make dotcloud specific changes to it and not
effect my original repo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# go into projects directory
cd ~/projects

# forked kencochranenet to kencochranenet_dotcloud, now clone that. locally
hg clone https://bitbucket.org/kencochrane/kencochranenet_dotcloud kencochrane_dotcloud

# go into the new directory.
cd kencochrane_dotcloud
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reading through the documentation tells me that I need to create a
wsgi.py file and put in the root of my project. Using
&lt;a href=&#34;http://docs.dotcloud.com/tutorials/django/#djangowsgipy&#34;&gt;http://docs.dotcloud.com/tutorials/django/#djangowsgipy&lt;/a&gt; as a template,
I created my wsgi.py file below. I had issues with the default template
and I needed to add a directory to the sys.path so that wsgi could find
my django apps correctly. Here is my finished file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;import os
import sys

# Ken added this, only thing that is different from the example template (not counting settings file name)
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__),&#39;mysite&#39;)))
os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;] = &#39;mysite.settings&#39;

import django.core.handlers.wsgi
djangoapplication = django.core.handlers.wsgi.WSGIHandler()
def application(environ, start_response):
    if &#39;SCRIPT_NAME&#39; in environ:
        del environ[&#39;SCRIPT_NAME&#39;]
    return djangoapplication(environ, start_response)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DotCloud uses &lt;a href=&#34;http://www.pip-installer.org/en/latest/#requirements-files&#34;&gt;PIP requirements
files&lt;/a&gt; to
manage your project dependencies. We already have our pip requirements
file where it needs to be and named correctly so we don&amp;rsquo;t need to do
anything, but if we didn&amp;rsquo;t have one, we would need to create one and put
it in the root, and call it requirements.txt&lt;/p&gt;

&lt;p&gt;DotCloud requires that we put all of our static media in a directory
called &amp;lsquo;static&amp;rsquo; in the root of our project. Because my static media is
already found elsewhere, I need to create a directory called static and
move all of my files into it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# we need to create a static directory to serve static media from (/static) .
mkdir -p static
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you use the django admin then you will need to create a postinstall
script that will create a symlink under static for your django admin
media files. Here is what mine looks like. If you use this as a
template, don&amp;rsquo;t forget to change the DJANGO_SETTINGS_MODULE variable
to match your project.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;#!/usr/bin/env python
import os
# To import anything under django.*, we must set this variable.
os.environ[&#39;DJANGO_SETTINGS_MODULE&#39;] = &#39;mysite.settings&#39;
# Import the admin module. The media directory is right under it!
import django.contrib.admin
# Retrieve the absolute path of the admin module.
admindir = os.path.dirname(django.contrib.admin.__file__)
# Add /media behind it.
mediadir = os.path.join(admindir, &#39;media&#39;)
# Compute the path of the symlink under the static directory.
staticlink = os.path.join(&#39;static&#39;, &#39;admin_media&#39;)
# If the link already exists, delete it.
if os.path.islink(staticlink):
    os.unlink(staticlink)
# Install the correct link.

os.symlink(mediadir, staticlink)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# make the script executable.
chmod +x postinstall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because we changed our location of our static media, we need to remember
to update our settings.py file with the new settings. Here are my
changes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;# edit settings.py file to the following.
ADMIN_MEDIA_PREFIX = &#39;/static/admin_media/&#39;

# change MEDIA_URL
MEDIA_URL = &#39;/static/&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Deployment&lt;/p&gt;

&lt;p&gt;Now that we have our application&amp;rsquo;s project structure all setup and
configured the way dotcloud wants it, we can start up some services and
then deploy our app. If you want to find out what services they have
available, you can run the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# find out which services that are available.
dotcloud deploy -h

You can chose among the following services:  
  java          host any Java servlet (also Clojure, Play!, and much more)
  mysql         the worlds most popular open source database             
  nodejs        run JavaScript processes (including web apps)             
  php           host any PHP web app: Drupal, WordPress...                
  php-worker    run background PHP processes                              
  postgresql    the worlds most advanced open source database            
  python        host any Python/WSGI web app: Django, Pylons, Web2py...   
  python-worker run background Python processes                           
  rabbitmq      AMQP message queue server                                 
  redis         advanced key-value store                                  
  ruby          host any Ruby/Rack web app: Rails, Sinatra...             
  ruby-worker   run background Ruby processes                             
  smtp          authenticated SMTP relay to send e-mails reliably         
  static        host static HTTP content    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need a database for our blog, since it was originally setup to use
mysql, lets use that one here. Start up a new mysql service called
&amp;lsquo;kencochrane.mysql&amp;rsquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# start up the database service.
$ dotcloud deploy -t mysql kencochrane.mysql
Created &amp;quot;kencochrane.mysql&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s make sure that it was created, and find out some more about our
new database instance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# get the information about our new service
$ dotcloud info kencochrane.mysqlcluster: wolverine
config:
    mysql_password: password_was_changed
created_at: 1303671517.96066
name: kencochrane.mysql
namespace: kencochrane
ports:
-   name: ssh
    url: ssh://dotcloud@mysql.kencochrane.dotcloud.com:3912
-   name: mysql
    url: mysql://root:password_was_changed@mysql.kencochrane.dotcloud.com:3913
state: running
type: mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see from above, we have a mysql database, it is running, and
it lets us know the ssh and mysql urls and ports, along with the root
password. Lets create our database. To do that we will login to the
server and run some sql commands. (the sensitive information has been
changed)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# connect to dotcloud mysql server instance
$ dotcloud run kencochrane.mysql -- mysql -u root -p

# mysql -u root -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 34
Server version: 5.1.41-3ubuntu12.10 (Ubuntu)

# create the user and database and give user permissions to database.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.

mysql&amp;gt; create database blogdb;
Query OK, 1 row affected (0.00 sec)

mysql&amp;gt; create user &#39;blog_username&#39; identified by &#39;strong_password&#39;;
Query OK, 0 rows affected (0.05 sec)

mysql&amp;gt; grant all on blogdb.* to &#39;blog_user&#39;@&#39;%&#39;;
Query OK, 0 rows affected (0.04 sec)

mysql&amp;gt; flush privileges;
Query OK, 0 rows affected (0.00 sec)

mysql&amp;gt; exit;Bye
Shared connection to mysql.kencochrane.dotcloud.com closed.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have our database all setup, we need to change our settings
file so that it has all of the new information. Here is what mine looks
like.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;# update your settings.py file.

DATABASES = {
    &#39;default&#39;: {
        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,
        &#39;NAME&#39;: &#39;blogdb&#39;,
        &#39;USER&#39;: &#39;blog_username&#39;,
        &#39;PASSWORD&#39;: &#39;strong_password&#39;,
        &#39;HOST&#39;: &#39;mysql.kencochrane.dotcloud.com&#39;,
        &#39;PORT&#39;: &#39;3913&#39;,
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are ready to deploy our Django app, but before I go any further
it is important to know the following. Dotcloud will pay attention to
your .hgignore files. If you have a settings file in your .hgignore file
so that it doesn&amp;rsquo;t get saved in the repo, it will not push those changes
up to the cloud. You will need to remove it from the .hgignore in order
to get those files out there. It is also import to remember that only
changes that are committed are pushed, so don&amp;rsquo;t forget to commit your
changes. If you wanted to be tricky you could use a post install script
to pull down the file from a secure location and install it that way, if
you want to make things super secure.&lt;/p&gt;

&lt;p&gt;Now that we have that behind us, lets get going. First we need to create
a new python service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# deploy a new python app called kencochrane.blog
$ dotcloud deploy --type python kencochrane.blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Service is now created so all we have to do is push our application to
the new service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# push out your changes to the server
$ dotcloud push kencochrane.blog .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now your code is out in the cloud, you just need to sync your database
and run the migrations to get your database all setup, and you should be
good to go.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# sync the database
$ dotcloud run kencochrane.blog python current/mysite/manage.py syncdb

# we use south so run migrate
$ dotcloud run kencochrane.blog python current/mysite/manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;now it works, just go to &lt;a href=&#34;http://blog.kencochrane.dotcloud.com/&#34;&gt;http://blog.kencochrane.dotcloud.com/&lt;/a&gt; to see.&lt;/p&gt;

&lt;p&gt;If you need to look at the logs to see how it is going you can do it two
ways. The first way will tail your logs for you to your console.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# look at logs of your service, it will tail them to your console. ctrl-c to stop.
$ dotcloud logs kencochrane.blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or login via ssh and look at your logs.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# Open up a shell
$ dotcloud ssh kencochrane.blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are the ones you most likely care about.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# nginx access and error logs.
/var/log/nginx/&amp;lt;app_name&amp;gt;.{access,error}.log

# wsgi error logs
/var/log/supervisor/uswgi.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you need to restart your service just issue this command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# restart the service
dotcloud restart kencochrane.blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;DotCloud runs on Amazon&amp;rsquo;s EC2 service, and last week while I was doing
my testing, I was getting a bunch of errors, I wasn&amp;rsquo;t sure if the errors
were because this is a beta service, and they are still bugs in it, or
if it was related to the amazon issues. Either way, I listed those
errors below incase anyone else gets them. If I got the error I would
just run the command again until it worked, sometimes it took 3 times
before everything worked fine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# attempt 1
$ dotcloud push kencochrane.blog .DotCloud service unavailable (&amp;quot;No JSON object could be decoded&amp;quot;).
Please try again later. If the problem persists, send an email to support@dotcloud.com.

# attempt 2
$ dotcloud push kencochrane.blog .
# upload . ssh://dotcloud@uploader.dotcloud.com:1060/kencochrane.blog
# hg
remote: Warning: Permanently added &#39;[uploader.dotcloud.com]:1060,[174.129.15.77]:1060&#39; (RSA) to the list of known hosts.
pushing to ssh://dotcloud@uploader.dotcloud.com:1060/kencochrane.blog
searching for changes
remote: adding changesets
remote: adding manifests
remote: adding file changes
remote: added 1 changesets with 3 changes to 3 files
Scheduling build
Fetching logs...
Build started...
mkdir: cannot create directory `126:afdea9036e83&#39;: File exists
Failed to fetch tarball (&amp;lt;type &#39;exceptions.ValueError&#39;&amp;gt;: Failed to extract the tarball, abort.)
Build finished.
Shared connection to blog.kencochrane.dotcloud.com closed.

# 3rd time is a charm, it finally works.
$ dotcloud push kencochrane.blog .# upload . ssh://dotcloud@uploader.dotcloud.com:1060/kencochrane.blog
# hg
remote: Warning: Permanently added &#39;[uploader.dotcloud.com]:1060,[174.129.15.77]:1060&#39; (RSA) to the list of known hosts.
pushing to ssh://dotcloud@uploader.dotcloud.com:1060/kencochrane.blog
searching for changes
no changes found
Scheduling build
Fetching logs...
Build started...
.
. all of the files (trimmed for space)
.
Fetched code revision 126:afdea9036e83
.
. all the requirments (trimmed for space)
.
Cleaning up...
Reloading nginx configuration: nginx.
uwsgi: stopped
uwsgi: started
Build finished.

Shared connection to blog.kencochrane.dotcloud.com closed.
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;conclusion:d61e2efe99db168c8115d51b1877dded&#34;&gt;Conclusion:&lt;/h1&gt;

&lt;p&gt;Setting up my blog on DotCloud was fairly straightforward, the
documentation helped guide me along the way. I did run into a few road
blocks that stopped me in my tracks for a little while, but after some
digging I was able to get past those issues. Hopefully this post will
help you overcome the same issues I had, and make your deployment a
little more smooth.&lt;/p&gt;

&lt;p&gt;The service is very flexible, which is going to be good for most
developers, but with the added flexibility they added some complexity
that doesn&amp;rsquo;t exist on the other services. For example ep.io and
gondor.io handle all database and user creation for you, so you don&amp;rsquo;t
need to know what commands to run to create the database and the user,
and they also automatically add the database connection strings to your
settings file. I for one don&amp;rsquo;t mind the extra complexity considering I&amp;rsquo;m
going to get the ability to have direct access to my database so that I
can do what I want. Others, might not want to worry about that. If you
are building an application for a client that isn&amp;rsquo;t very tech savy, the
more things that are automated the better.&lt;/p&gt;

&lt;p&gt;DotCloud is still in beta, and if you take a look at their
&lt;a href=&#34;http://docs.dotcloud.com/components/roadmap/&#34;&gt;roadmap&lt;/a&gt;, they have very
ambitious goals. I for one can&amp;rsquo;t wait to see how they progress. I have
only gone into a few of the many things that dotcloud has to offer, I
recommend that you try it out for yourself and leave me a comment
letting me know how you liked it.&lt;/p&gt;

&lt;h1 id=&#34;next-time:d61e2efe99db168c8115d51b1877dded&#34;&gt;Next time:&lt;/h1&gt;

&lt;p&gt;I have been lucky enough to get a sneak peak at &lt;a href=&#34;http://apphosted.com&#34;&gt;http://apphosted.com&lt;/a&gt; a
python/django hosting service similar to gondor.io and ep.io. I&amp;rsquo;m
currently playing with the service now, once I&amp;rsquo;m finished I&amp;rsquo;ll post my
findings.&lt;/p&gt;

&lt;h2 id=&#34;update:d61e2efe99db168c8115d51b1877dded&#34;&gt;Update:&lt;/h2&gt;

&lt;p&gt;Read how this service stacks up against other services like it in my
&lt;a href=&#34;http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/&#34;&gt;Django hosting
roundup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I &lt;a href=&#34;http://kencochrane.net/blog/2012/03/im-now-working-for-dotcloud/&#34;&gt;accepted a job with
dotCloud&lt;/a&gt;.
I plan on keeping this blog post up to date and impartial. If you think
there are any errors, please let me know in the comments.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;warning&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This post is out of date, please read the new updated one:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kencochrane.net/blog/2012/03/deploying-a-django-application-on-dotcloud/&#34;&gt;Deploying my Django application to dotCloud Part
2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>My Day in Gondor.io</title>
      <link>http://www.kencochrane.net/blog/2011/04/my-day-gondorio/</link>
      <pubDate>Fri, 22 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2011/04/my-day-gondorio/</guid>
      <description>

&lt;p&gt;The other day I wrote about a new &lt;a href=&#34;http://kencochrane.net/blog/2011/04/my-experiences-with-epio/&#34;&gt;Django hosting service called
ep.io&lt;/a&gt; ,
after I made that post, I was lucky enough to get an invite for the
private beta of &lt;a href=&#34;http://gondor.io&#34;&gt;gondor.io&lt;/a&gt;, which is similar to
&lt;a href=&#34;http://ep.io&#34;&gt;ep.io&lt;/a&gt; but from the folks over at
&lt;a href=&#34;http://eldarion.com/&#34;&gt;Eldarion&lt;/a&gt;. In order to test out the service I
decided to take my Dango blog application and deploy it to Gondor and I
kept notes along the way, here are those notes.&lt;/p&gt;

&lt;p&gt;The sign up process was pretty typical, register and then validate your
email address. Once into the system you are offered the ability to
create a site. So I created my site &amp;ldquo;KenCochrane_blog&amp;rdquo; and it gave me a
key which I&amp;rsquo;ll use later on. Not knowing where to start I headed over to
the &lt;a href=&#34;https://gondor.io/support/&#34;&gt;documentation&lt;/a&gt;. Which, as of this
writing, is pretty basic, which is understandable since they are still
in beta. I&amp;rsquo;m assuming the documentation will get better as they move
forward. The current documentation and this blog post should get you
enough information to get going.&lt;/p&gt;

&lt;h1 id=&#34;setting-up-my-development-environment:fba4efda7478f8b07a6ceb2f2ba8e87c&#34;&gt;Setting up my development environment:&lt;/h1&gt;

&lt;p&gt;Gondor uses a file to store your login credentials, so that you don&amp;rsquo;t
need to type it in everytime. It is pretty basic, here is how I
installed mine on my MacBook Pro (OSX 10.6).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# create the file, and edit it.
$ emacs ~/.gondor

# copy this into the file.

[auth]
username = &amp;lt;my_username&amp;gt;
password = &amp;lt;my_password&amp;gt;

# change the permissions so that only you can access it.
$ chmod 600 ~/.gondor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like all cool projects these days, gondor uses pip and virtualenv, I&amp;rsquo;m
assuming you already have virtualenv and pip installed so I&amp;rsquo;ll move onto
the fun stuff.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# make my virtualenv called gondor
$ mkvirtualenv gondor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From this point on, all of these commands are done in the new gondor
virtual environment that I just created. Gondor uses a command line
client to manage your application, we need to install that before we can
do anything.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ pip install gondor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since I&amp;rsquo;m going to need to make changes to my blog, I decided to fork it
and make all of my changes to gondor on the new fork. The new fork is on
bitbucket and it is called kencochranenet_gondor. Now that I have it
forked I can pull it down locally.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# go to my projects directory and clone my blog.
$ cd ~/projects
$ hg clone https://bitbucket.org/kencochrane/kencochranenet_gondor kencochranenet_gondor
$ cd kencochranenet_gondor/mysite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have some code to deploy, lets introduce the code to gondor.
We use the init command inside of our django project and it will create
a .gondor directory with a config file and some defaults.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ gondor init &amp;lt;site_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gondor expects your project to be in a certain layout in order to work.
For more info see the documentation:
&lt;a href=&#34;https://gondor.io/support/project-layout/&#34;&gt;https://gondor.io/support/project-layout/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since my blog didn&amp;rsquo;t have everything in the right place, I need to add
some directories and move some files around. One of the files I needed
to add was deploy/wsgi.py, here is what it contains. Notice the two
sys.path.insert lines. I added those because the &lt;a href=&#34;https://gondor.io/support/setting-up-django/&#34;&gt;gondor
documentation&lt;/a&gt; told me
too.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;import os, sys

sys.path.insert(0, os.path.abspath(os.path.join(os.path.abspath(os.path.dirname(__file__)), os.pardir, os.pardir)))
sys.path.insert(0, os.path.abspath(os.path.join(os.path.abspath(os.path.dirname(__file__)), os.pardir)))

from django.core.handlers.wsgi import WSGIHandler
os.environ[&amp;quot;DJANGO_SETTINGS_MODULE&amp;quot;] = &amp;quot;mysite.settings&amp;quot;
application = WSGIHandler()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also had to add the same sys.path lines to my manage.py settings. Here
is my new manage.py&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;#!/usr/bin/env python
from django.core.management import execute_manager
import sys
import os

sys.path.insert(0, os.path.abspath(os.path.join(os.path.abspath(os.path.dirname(__file__)), os.pardir, os.pardir)))
sys.path.insert(0, os.path.abspath(os.path.join(os.path.abspath(os.path.dirname(__file__)), os.pardir)))

try:
    import settings # Assumed to be in the same directory.
except ImportError:
    sys.stderr.write(&amp;quot;Error: Can&#39;t find the file &#39;settings.py&#39; in the directory containing %r. It appears you&#39;ve customized things.\nYou&#39;ll have to run django-admin.py, passing it your settings module.\n(If the file settings.py does indeed exist, it&#39;s causing an ImportError somehow.)\n&amp;quot; % __file__)
    sys.exit(1)

if __name__ == &amp;quot;__main__&amp;quot;:
    execute_manager(settings)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gondor will automagically add your database and other settings to your
app for you at deployment, and in order for that to work correctly you
need to add the following at the end of your settings.py file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode python&#34;&gt;try:
    from local_settings import *
except ImportError:
    pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My blog is using south to manage south migrations, so we need to edit
the .gondor/config file to enable this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# edit .gondor/config changed migrations to migrations=south
emacs .gondor/config

# change this line
migrations = None
# to
migrations = south
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have made all of the changes that we need. I need to commit
all of my changes. It is important to note that because gondor uses
mecurial or git for managing your project files, you need to always
remember to add new files and commit all changes before you try to
deploy your application.&lt;/p&gt;

&lt;h2 id=&#34;deployment:fba4efda7478f8b07a6ceb2f2ba8e87c&#34;&gt;Deployment:&lt;/h2&gt;

&lt;p&gt;Next step is deployment. Before we get there, we need to create a new
instance. Gondor allows you to deploy multiple versions of your code,
this lets you have a production version and development versions all
running at the same time. Gondor calls these different deployments
&amp;lsquo;instances&amp;rsquo;. We run the &amp;lsquo;gondor create master&amp;rsquo; command, which will
create a new instance called, you guessed it, &amp;lsquo;master&amp;rsquo;, and this is what
you should see.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ gondor create master
Reading configuration... [ok]
Creating instance on Gondor... [ok]   

Run: gondor deploy master HEAD
Visit: http://jg437.o1.gondor.io/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This created the master instance and tells us what our url for the
instance will be. Now according to the log message I just need to run
&amp;lsquo;gondor deploy master HEAD&amp;rsquo; and that will deploy my app. Lets do that
now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ gondor deploy master HEAD
  Reading configuration... [ok]
  ERROR: could not map &#39;HEAD&#39; to a SHA
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, it didn&amp;rsquo;t work, after lots of digging, I realized that
the code was assuming I was on a branch called HEAD, which wasn&amp;rsquo;t
correct. I think HEAD is the default git branch, and in mercirual, it is
default. Just to be sure, I checked my mercurial branch.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ hg summary

parent: 122:76f0c2271b7f tip
 gondor settings
branch: default
commit: (clean)

update: (current)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the quick &amp;lsquo;hg summary&amp;rsquo; command lets me know that my branch is
default, so I then made the changes to my command and reran the script.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ gondor deploy master default

Reading configuration... [ok]
Building tarball from default... [ok]
Pushing tarball to Gondor...
Deploying... [failed]

pip has failed installing your requirements. Here is the output we saw:

Downloading/unpacking Django==1.2.5 (from -r mysite/requirements/project.txt (line 1))
Creating supposed download cache at /var/gondor/instances/.cache-i194/pip-download
  Storing download in cache at ./.cache-i194/pip-download/http%3A%2F%2Fpypi.python.org%2Fpackages%2Fsource%2FD%2FDjango%2FDjango-1.2.5.tar.gz
  Running setup.py egg_info for package Django

Downloading/unpacking MySQL-python==1.2.3c1 (from -r mysite/requirements/project.txt (line 2))
  Storing download in cache at ./.cache-i194/pip-download/http%3A%2F%2Fpypi.python.org%2Fpackages%2Fsource%2FM%2FMySQL-python%2FMySQL-python-1.2.3c1.tar.gz
  Running setup.py egg_info for package MySQL-python
    sh: mysql_config: not found
    Traceback (most recent call last):
      File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 14, in &amp;lt;module&amp;gt;
      File &amp;quot;/var/gondor/instances/.cache-i194/pip-build/MySQL-python/setup.py&amp;quot;, line 15, in &amp;lt;module&amp;gt;
        metadata, options = get_config()
      File &amp;quot;setup_posix.py&amp;quot;, line 43, in get_config
        libs = mysql_config(&amp;quot;libs_r&amp;quot;)
      File &amp;quot;setup_posix.py&amp;quot;, line 24, in mysql_config
        raise EnvironmentError(&amp;quot;%s not found&amp;quot; % (mysql_config.path,))
    EnvironmentError: mysql_config not found
    Complete output from command python setup.py egg_info:
    sh: mysql_config: not found

Traceback (most recent call last):

  File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 14, in &amp;lt;module&amp;gt;

  File &amp;quot;/var/gondor/instances/.cache-i194/pip-build/MySQL-python/setup.py&amp;quot;, line 15, in &amp;lt;module&amp;gt;

    metadata, options = get_config()

  File &amp;quot;setup_posix.py&amp;quot;, line 43, in get_config

    libs = mysql_config(&amp;quot;libs_r&amp;quot;)

  File &amp;quot;setup_posix.py&amp;quot;, line 24, in mysql_config

    raise EnvironmentError(&amp;quot;%s not found&amp;quot; % (mysql_config.path,))

EnvironmentError: mysql_config not found


Command python setup.py egg_info failed with error code 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We had mysql-python in our requirements file, and gondor doesn&amp;rsquo;t support
mysql, so we need to remove that, commit and try again.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ gondor deploy master default

Reading configuration... [ok]
Building tarball from default... [ok]
Pushing tarball to Gondor...
Deploying... [failed]

unable to build static (collectstatic or build_static not found)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;closer but no cigar, gondor uses staticfiles (new in django 1.3 or
django-staticfiles) to manage static files. If you aren&amp;rsquo;t currently
using static files add django-staticfiles to your pre django 1.3 app, or
upgrade to django 1.3 and configure static files. To be honest, this was
the biggest problem I had, it took me a while to get this correct. I was
lucky enough to get some help on the #gondor IRC channel, which helped
me along the way. With all of my changes made I committed them and tried
again.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ gondor deploy master default
Reading configuration... [ok]
Building tarball from default... [ok]
Pushing tarball to Gondor...
Deploying... [ok]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That worked!! woo hoo! now if I go to the URL
(&lt;a href=&#34;http://jg437.o1.gondor.io/&#34;&gt;http://jg437.o1.gondor.io/&lt;/a&gt;) I got earlier, I should see something if
all went well. I went to the site, and bingo, all working.. no data but
it is there. Now how do I create my django admin user? Normally that is
done when you do your initial syncdb, and since that is done by gondor,
it doesn&amp;rsquo;t give you a chance. Looking thru all of the documentation I
didn&amp;rsquo;t find anything. So I went and looked at the gondor client source
code, and I found my answer. I kicked off the following command,
answered the prompts and bingo, I was in business.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;$ gondor run master createsuperuser
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;conclusion:fba4efda7478f8b07a6ceb2f2ba8e87c&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now that I have my app up and running and I have admin access I could
switch over my blog to the new service if I wanted. I&amp;rsquo;ll hold off for
right now, but you get the picture. All and all I think this is going to
be a nice service once they are fully up and running. It isn&amp;rsquo;t as far
along as ep.io, but I&amp;rsquo;m sure it won&amp;rsquo;t be long before they are caught up.
I&amp;rsquo;ll try and keep this post updated as I learn more about the service
and they release new features.&lt;/p&gt;

&lt;h3 id=&#34;update:fba4efda7478f8b07a6ceb2f2ba8e87c&#34;&gt;Update:&lt;/h3&gt;

&lt;p&gt;Read how this service stacks up against other services like it in my
&lt;a href=&#34;http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/&#34;&gt;Django hosting
roundup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with
dotCloud a competitor to gondor.io. I plan on keeping this blog post up
to date and impartial. If you think there are any errors, please let me
know in the comments.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Experiences with ep.io</title>
      <link>http://www.kencochrane.net/blog/2011/04/my-experiences-with-epio/</link>
      <pubDate>Mon, 18 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>http://www.kencochrane.net/blog/2011/04/my-experiences-with-epio/</guid>
      <description>

&lt;p&gt;Over the last decade I have deployed my applications many different
ways, I have used, self managed dedicated servers, fully managed
dedicated servers, Virtual Privates Servers from Linode, RackSpace and
Amazon, shared hosting from webfaction, and I also used Google App
Engine. I have learned a lot of things along the way, but the one thing
I learned the most is that managing the server and keeping it up and
running isn&amp;rsquo;t fun. The fun part is writing the applications, and
watching them grow as people start to use them. If there was only a way
to write the application and then let someone else manage all of the
server stuff for you, for a reasonable price.&lt;/p&gt;

&lt;p&gt;The Ruby on Rails folks have had services like this for a while, both
Heroku and EngineYard are pretty popular and make hosting your Rails
applications much easier. When Heroku was bought by salesforce.com for
$212M, it opened people eyes, and started to get them thinking. Why
can&amp;rsquo;t we do that for Django? I have been wanting to build a Django
service like this for a while now, but with limited time and not knowing
where to begin, my idea went no where. Recently there have been a bunch
of new services that have popped up that provided turn key Django
hosting, very similar in nature to Heroku, and Google App Engine
(Python, and Java). This has gotten me very excited, and I plan on
trying them all out.&lt;/p&gt;

&lt;p&gt;One of these new services is called &lt;a href=&#34;http://ep.io&#34;&gt;ep.io&lt;/a&gt;, and it is run
by Andrew Godwin (of Django South fame) and Ben Firshman. They are
trying to make the hosting as simple as possible, so that you don&amp;rsquo;t have
to worry about servers at all. You write your application, deploy it to
their service and they handle the rest. If you need to scale up your
application, add load balancing, add more disk space, they will take
care of that. This allows you the developer to spend your valuable time
writing code instead of doing server maintenance. Best of all their
pricing is based on usage, and they have a free tier, so if you have an
application that you put out there, but it isn&amp;rsquo;t using any resources, or
very few resources, it might not cost you anything at all. So there is
nothing stopping you from trying it out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ep.io&#34;&gt;ep.io&lt;/a&gt; is still in beta, and not available to the public
yet. The only way to get access is to put your name on a waiting list,
and wait until you are sent an invite. I was lucky enough to get an
invite early on, and I have been playing around with
&lt;a href=&#34;http://ep.io&#34;&gt;ep.io&lt;/a&gt; for a new project that I&amp;rsquo;m working on. I&amp;rsquo;m still
in development with my application so it isn&amp;rsquo;t public yet, but I have an
app deployed and running. I personally feel that if you are lucky enough
to be selected to a closed beta, that it is your duty to give as much
feedback as possible, so that you can help make the application great.
If you aren&amp;rsquo;t going to be doing this, then you don&amp;rsquo;t deserve the early
access. That is why I&amp;rsquo;m writing this post, to help spread the word about
ep.io, and to show people getting started with the service how easy it
is to deploy their app.&lt;/p&gt;

&lt;p&gt;Before you start using a service like &lt;a href=&#34;http://ep.io&#34;&gt;ep.io&lt;/a&gt;, you need to
do your research to make sure you know what it is you are getting with
the service. Services like this aim to make hard tasks easy, and
sometimes in doing so, they need to sacrifice features and flexibility.
Knowing the pros and cons about a service before hand will help set your
expectations accordingly so that you aren&amp;rsquo;t disappointed later on in the
process. It is important to note that as of this writing, they are still
in beta, and thus still a work in progress, so if you are reading this,
make sure you look at their website for the most up to date information.
I will try and come back and update this post as the service deploys new
features, and my experience with the service grows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Application setup:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Like most managed application services, you won&amp;rsquo;t be able to deploy your
application as is, you will need to make a few changes in order to get
everything to work. Luckily for us, this step wasn&amp;rsquo;t too hard. I used
the documentation that ep.io provides along with the ep.io project
skeleton (&lt;a href=&#34;https://github.com/idangazit/epio_skel&#34;&gt;https://github.com/idangazit/epio_skel&lt;/a&gt;) as a good starting
point. ep.io uses an ini based configuration file called epio.ini for
all of your configuration information. The documentation does a pretty
good job explaining the different sections, and if you look at the ep.io
project skeleton, there is a good example of one already created for
you.&lt;/p&gt;

&lt;p&gt;ep.io controls all aspects of your environment and because of this you
don&amp;rsquo;t know what your database information is, but that is OK, because if
you setup your django settings.py file correctly, they will handle all
of that for you. Once again, checkout the skeleton project or the
documentation for the recommended settings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dependencies:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If your project is already using virtualenv and pip, this shouldn&amp;rsquo;t be
too difficult. If not, you will need to read up a little on pip and it&amp;rsquo;s
requirements files (&lt;a href=&#34;http://pip.openplans.org/requirement-format.html&#34;&gt;http://pip.openplans.org/requirement-format.html&lt;/a&gt;)
in order to make sure you load all of your dependencies correctly. ep.io
already has some of the most common libraries installed, for a full
list, follow this link:
&lt;a href=&#34;http://www.ep.io/docs/runtime/#python-libraries&#34;&gt;http://www.ep.io/docs/runtime/#python-libraries&lt;/a&gt;. If you need a non
pure-python library that isn&amp;rsquo;t on their list, just let them know and if
it is reasonable, they will most likely install it for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deployment:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ep.io offers a simple control panel so that you can see what apps you
have installed, how much they are costing you, how many resources they
are using (database, bandwidth, CPU, disk usage, etc). It also allows
you to configure your domains, set application permissions, and view the
console log. Besides that, you need to do everything using their command
line client. Before you can use the client, you will need to install it,
you can do that using either pip or easy install.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;pip install -U epio

# or

easy_install -U epio
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have the client installed, this is where the fun begins. With
the client you can create, suspend, resume, upload or delete your app.
You can also use the client to kick off remote commands on your server
such as django syncdb. See the official documentation for full details:
&lt;a href=&#34;http://www.ep.io/docs/client/&#34;&gt;http://www.ep.io/docs/client/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some notes and examples.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;#create app
epio create [&amp;lt;app_name&amp;gt;]

# suspend app
epio suspend [-a &amp;lt;app_name&amp;gt;]

#resume app
epio resume [-a &amp;lt;app_name&amp;gt;]

# delete app
epio delete [-a &amp;lt;app_name&amp;gt;]

# django syncdb
epio django [-a &amp;lt;app_name&amp;gt;] syncdb

# django run south migrations for all apps
epio django [-a &amp;lt;app_name&amp;gt;] migrate

# django run south migrations for just one app called chicken
epio django [-a &amp;lt;app_name&amp;gt;] migrate chicken

# bash command
epio run_command [-a &amp;lt;app_name&amp;gt;] bash

# psql access to your database.
epio run_command [-a &amp;lt;app_name&amp;gt;] psql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Uploading App:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The epio upload command will use git in the background to sync up your
local directory to your server. It will ignore the .pyc files and such,
if you have other files and directories that you also want to ignore you
can create a file called .epioignore and list the files and directories
to ignore in it. The .epioignore file has the same syntax as a
.gitignore file.&lt;/p&gt;

&lt;p&gt;The upload command is fine for most cases, but if you are already using
git or mercurial, you can push your changes directly to ep.io, this
allows you to do more of a continuous deployment setup, where you want
to push to a central repo, run a bunch of tests and if it works push out
to production. See this link for more info on uploading via git and
mercurial &lt;a href=&#34;http://www.ep.io/docs/vcss/&#34;&gt;http://www.ep.io/docs/vcss/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Database:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The ep.io databases are behind a firewall for security purposes, and
because of this, you don&amp;rsquo;t have direct access to the database, so if you
are used to using a GUI database client, you are out of luck. The only
way to get to your database right now is using the psql command tool.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;# psql access to your database.
epio run_command [-a &amp;lt;app_name&amp;gt;] psql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Getting data into your databases:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are two recommended ways for getting data into your database.&lt;/p&gt;

&lt;p&gt;You can create a SQL dump file, and add it to your project, and upload.
Once it is up on the server you can run the following command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;epio run_command -- psql -f dumpname.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also stream the dump over the network via SSH. (They suggest
that you only do this with dumps that are 20MB or less in size.)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sourceCode bash&#34;&gt;epio run_command psql &amp;lt; dumpname.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Background tasks:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ep.io supports both cronjobs and background tasks via Celery and Redis.&lt;/p&gt;

&lt;p&gt;Cron is pretty easy to setup, you have a section in the epio.ini file
called cron where you put your normal cron commands. The syntax isn&amp;rsquo;t
exactly the same, so see the documentation for the differences.
&lt;a href=&#34;http://www.ep.io/docs/epioini/#cron-section&#34;&gt;http://www.ep.io/docs/epioini/#cron-section&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use either plain celery or django-celery, what ever you want,
they support most features, but they currently don&amp;rsquo;t support periodic
tasks, they hope to get to that in the future. In the meantime just use
a cron for those.&lt;/p&gt;

&lt;h1 id=&#34;ep-io-vs-traditional-hosting:5fc66f29d58c6a4f5cf5d470245ca5f8&#34;&gt;ep.io vs traditional hosting&lt;/h1&gt;

&lt;p&gt;I originally wrote this Pro&amp;rsquo;s and Con&amp;rsquo;s section at stackoverflow.com,
and I include it here as well.
&lt;a href=&#34;http://stackoverflow.com/questions/5117395/django-hosting-on-ep-io/5648323#5648323&#34;&gt;http://stackoverflow.com/questions/5117395/django-hosting-on-ep-io/5648323#5648323&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;pros:5fc66f29d58c6a4f5cf5d470245ca5f8&#34;&gt;&lt;strong&gt;Pros:&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Server Management&lt;/em&gt;: You don&amp;rsquo;t have to worry about your server setup
at all, it handles everything for you. With a VPS, you would need to
worry about making sure the server is up to date with security
patches, and all that fun stuff, with this, you don&amp;rsquo;t worry about
anything, they take care of all that for you.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Deployment&lt;/em&gt;: It makes deploying an app and having it up and running
really quickly. deploying a new version of an app is a piece of
cake, I just need to run one maybe two commands, and it handles
everything for me.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Pricing&lt;/em&gt;: you are only charged for what you use, so if you have a
very low traffic website, it might not cost you anything at all.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Scaling&lt;/em&gt;: They handle scaling and load balancing for you out of the
box, no need for you to worry about that. You still need to write
your application so that it can scale efficiently, but if you do,
they will handle the rest.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Background tasks&lt;/em&gt;: They have support for cronjobs as well as
background workers using celery.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Customer support&lt;/em&gt;: I had a few questions, sent them an email, and
had an answer really fast, they have been great, so much better then
I would have expected. If you run your own VPS, you really don&amp;rsquo;t
have anyone to talk to, so this is a major plus.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cons:5fc66f29d58c6a4f5cf5d470245ca5f8&#34;&gt;&lt;strong&gt;Cons:&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;DB access&lt;/em&gt;: You don&amp;rsquo;t have direct access to the database, you can
get to the psql shell, but you can&amp;rsquo;t connect an external client GUI.
This makes doing somethings a little more difficult or slow. But you
can still use the django admin or fixtures to do a lot of things.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Limited services available&lt;/em&gt;: It currently only supports Postgresql
and redis, so if you want to use MySQL, memcached, mongodb,etc you
are out of luck.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Low level c libs&lt;/em&gt;: You can&amp;rsquo;t install any dependencies that you
want, similar to google app engine, they have some of the common c
libs installed already, and if you want something different that
isn&amp;rsquo;t already installed you will need to contact them to get
it added. &lt;a href=&#34;http://www.ep.io/docs/runtime/#python-libraries&#34;&gt;http://www.ep.io/docs/runtime/#python-libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Email&lt;/em&gt;: You can&amp;rsquo;t send or receive email, which means you will need
to depend on a 3rd party for that, which is probably good practice
anyway, but it just means more money.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;File system&lt;/em&gt;: You have a more limited file system available to you,
and because of the distributed nature of the system you will need to
be very careful when working from files. You can&amp;rsquo;t (unless i
missed it) connect to your account via (s)ftp to upload files, you
will need to connect via the ep.io command line tool and either do
an rsync or a push of a repo to get files up there.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;update:5fc66f29d58c6a4f5cf5d470245ca5f8&#34;&gt;Update:&lt;/h2&gt;

&lt;p&gt;Read how this service stacks up against other services like it in my
&lt;a href=&#34;http://kencochrane.net/blog/2011/06/django-hosting-roundup-who-wins/&#34;&gt;Django hosting
roundup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2/16/2012: Full disclosure. On Feb 16th 2012, I accepted a job with
dotCloud a competitor to ep.io. I plan on keeping this blog post up to
date and impartial. If you think there are any errors, please let me
know in the comments.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>